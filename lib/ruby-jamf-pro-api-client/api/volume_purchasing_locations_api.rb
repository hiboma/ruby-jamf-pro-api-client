=begin
#Jamf Pro API

### Overview The Jamf Pro API is a RESTful API for Jamf Pro built to enable consistent and efficient programmatic access to Jamf Pro.<br/><br/> The swagger schema can be found [here](/api/schema/). 

The version of the OpenAPI document: production

Generated by: https://openapi-generator.tech
OpenAPI Generator version: 6.1.0-SNAPSHOT

=end

require 'cgi'

module JamfPro
  class VolumePurchasingLocationsApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Retrieve Volume Purchasing Locations
    # Retrieves Volume Purchasing Locations
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :page  (default to 0)
    # @option opts [Integer] :page_size  (default to 100)
    # @option opts [Array<String>] :sort Sorting criteria in the format: property:asc/desc. Default sort is id:asc. Multiple sort criteria are supported and must be separated with a comma.
    # @option opts [String] :filter Query in the RSQL format, allowing to filter Volume Purchasing Location collection. Default filter is empty query - returning all results for the requested page. Fields allowed in the query: id, name, appleId, organizationName, tokenExpiration, countryCode, locationName, automaticallyPopulatePurchasedContent, and sendNotificationWhenNoLongerAssigned. This param can be combined with paging and sorting. (default to '')
    # @return [VolumePurchasingLocations]
    def v1_volume_purchasing_locations_get(opts = {})
      data, _status_code, _headers = v1_volume_purchasing_locations_get_with_http_info(opts)
      data
    end

    # Retrieve Volume Purchasing Locations
    # Retrieves Volume Purchasing Locations
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :page  (default to 0)
    # @option opts [Integer] :page_size  (default to 100)
    # @option opts [Array<String>] :sort Sorting criteria in the format: property:asc/desc. Default sort is id:asc. Multiple sort criteria are supported and must be separated with a comma.
    # @option opts [String] :filter Query in the RSQL format, allowing to filter Volume Purchasing Location collection. Default filter is empty query - returning all results for the requested page. Fields allowed in the query: id, name, appleId, organizationName, tokenExpiration, countryCode, locationName, automaticallyPopulatePurchasedContent, and sendNotificationWhenNoLongerAssigned. This param can be combined with paging and sorting. (default to '')
    # @return [Array<(VolumePurchasingLocations, Integer, Hash)>] VolumePurchasingLocations data, response status code and response headers
    def v1_volume_purchasing_locations_get_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: VolumePurchasingLocationsApi.v1_volume_purchasing_locations_get ...'
      end
      # resource path
      local_var_path = '/v1/volume-purchasing-locations'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'page'] = opts[:'page'] if !opts[:'page'].nil?
      query_params[:'page-size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'sort'] = @api_client.build_collection_param(opts[:'sort'], :multi) if !opts[:'sort'].nil?
      query_params[:'filter'] = opts[:'filter'] if !opts[:'filter'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'VolumePurchasingLocations'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['Bearer']

      new_options = opts.merge(
        :operation => :"VolumePurchasingLocationsApi.v1_volume_purchasing_locations_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: VolumePurchasingLocationsApi#v1_volume_purchasing_locations_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Delete a Volume Purchasing Location with the supplied id
    # Deletes a Volume Purchasing Location with the supplied id
    # @param id [String] Volume Purchasing Location identifier
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def v1_volume_purchasing_locations_id_delete(id, opts = {})
      v1_volume_purchasing_locations_id_delete_with_http_info(id, opts)
      nil
    end

    # Delete a Volume Purchasing Location with the supplied id
    # Deletes a Volume Purchasing Location with the supplied id
    # @param id [String] Volume Purchasing Location identifier
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def v1_volume_purchasing_locations_id_delete_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: VolumePurchasingLocationsApi.v1_volume_purchasing_locations_id_delete ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling VolumePurchasingLocationsApi.v1_volume_purchasing_locations_id_delete"
      end
      # resource path
      local_var_path = '/v1/volume-purchasing-locations/{id}'.sub('{' + 'id' + '}', CGI.escape(id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || ['Bearer']

      new_options = opts.merge(
        :operation => :"VolumePurchasingLocationsApi.v1_volume_purchasing_locations_id_delete",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: VolumePurchasingLocationsApi#v1_volume_purchasing_locations_id_delete\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Retrieve a Volume Purchasing Location with the supplied id
    # Retrieves a Volume Purchasing Location with the supplied id
    # @param id [String] Volume Purchasing Location identifier
    # @param [Hash] opts the optional parameters
    # @return [VolumePurchasingLocation]
    def v1_volume_purchasing_locations_id_get(id, opts = {})
      data, _status_code, _headers = v1_volume_purchasing_locations_id_get_with_http_info(id, opts)
      data
    end

    # Retrieve a Volume Purchasing Location with the supplied id
    # Retrieves a Volume Purchasing Location with the supplied id
    # @param id [String] Volume Purchasing Location identifier
    # @param [Hash] opts the optional parameters
    # @return [Array<(VolumePurchasingLocation, Integer, Hash)>] VolumePurchasingLocation data, response status code and response headers
    def v1_volume_purchasing_locations_id_get_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: VolumePurchasingLocationsApi.v1_volume_purchasing_locations_id_get ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling VolumePurchasingLocationsApi.v1_volume_purchasing_locations_id_get"
      end
      # resource path
      local_var_path = '/v1/volume-purchasing-locations/{id}'.sub('{' + 'id' + '}', CGI.escape(id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'VolumePurchasingLocation'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['Bearer']

      new_options = opts.merge(
        :operation => :"VolumePurchasingLocationsApi.v1_volume_purchasing_locations_id_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: VolumePurchasingLocationsApi#v1_volume_purchasing_locations_id_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get specified Volume Purchasing Location history object 
    # Gets specified Volume Purchasing Location history object 
    # @param id [String] instance id of Volume Purchasing Location history record
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :page  (default to 0)
    # @option opts [Integer] :page_size  (default to 100)
    # @option opts [Array<String>] :sort Sorting criteria in the format: property:asc/desc. Default sort is date:desc. Multiple sort criteria are supported and must be separated with a comma. 
    # @option opts [String] :filter Query in the RSQL format, allowing to filter history notes collection. Default filter is empty query - returning all results for the requested page. Fields allowed in the query: username, date, note, details. This param can be combined with paging and sorting. Example: filter&#x3D;username!&#x3D;admin and details&#x3D;&#x3D;*disabled* and date&lt;2019-12-15 (default to '')
    # @return [HistorySearchResults]
    def v1_volume_purchasing_locations_id_history_get(id, opts = {})
      data, _status_code, _headers = v1_volume_purchasing_locations_id_history_get_with_http_info(id, opts)
      data
    end

    # Get specified Volume Purchasing Location history object 
    # Gets specified Volume Purchasing Location history object 
    # @param id [String] instance id of Volume Purchasing Location history record
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :page  (default to 0)
    # @option opts [Integer] :page_size  (default to 100)
    # @option opts [Array<String>] :sort Sorting criteria in the format: property:asc/desc. Default sort is date:desc. Multiple sort criteria are supported and must be separated with a comma. 
    # @option opts [String] :filter Query in the RSQL format, allowing to filter history notes collection. Default filter is empty query - returning all results for the requested page. Fields allowed in the query: username, date, note, details. This param can be combined with paging and sorting. Example: filter&#x3D;username!&#x3D;admin and details&#x3D;&#x3D;*disabled* and date&lt;2019-12-15 (default to '')
    # @return [Array<(HistorySearchResults, Integer, Hash)>] HistorySearchResults data, response status code and response headers
    def v1_volume_purchasing_locations_id_history_get_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: VolumePurchasingLocationsApi.v1_volume_purchasing_locations_id_history_get ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling VolumePurchasingLocationsApi.v1_volume_purchasing_locations_id_history_get"
      end
      # resource path
      local_var_path = '/v1/volume-purchasing-locations/{id}/history'.sub('{' + 'id' + '}', CGI.escape(id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'page'] = opts[:'page'] if !opts[:'page'].nil?
      query_params[:'page-size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'sort'] = @api_client.build_collection_param(opts[:'sort'], :multi) if !opts[:'sort'].nil?
      query_params[:'filter'] = opts[:'filter'] if !opts[:'filter'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'HistorySearchResults'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['Bearer']

      new_options = opts.merge(
        :operation => :"VolumePurchasingLocationsApi.v1_volume_purchasing_locations_id_history_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: VolumePurchasingLocationsApi#v1_volume_purchasing_locations_id_history_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Update a Volume Purchasing Location
    # Updates a Volume Purchasing Location
    # @param id [String] Volume Purchasing Location identifier
    # @param volume_purchasing_location_patch [VolumePurchasingLocationPatch] Volume Purchasing Location to update
    # @param [Hash] opts the optional parameters
    # @return [VolumePurchasingLocation]
    def v1_volume_purchasing_locations_id_patch(id, volume_purchasing_location_patch, opts = {})
      data, _status_code, _headers = v1_volume_purchasing_locations_id_patch_with_http_info(id, volume_purchasing_location_patch, opts)
      data
    end

    # Update a Volume Purchasing Location
    # Updates a Volume Purchasing Location
    # @param id [String] Volume Purchasing Location identifier
    # @param volume_purchasing_location_patch [VolumePurchasingLocationPatch] Volume Purchasing Location to update
    # @param [Hash] opts the optional parameters
    # @return [Array<(VolumePurchasingLocation, Integer, Hash)>] VolumePurchasingLocation data, response status code and response headers
    def v1_volume_purchasing_locations_id_patch_with_http_info(id, volume_purchasing_location_patch, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: VolumePurchasingLocationsApi.v1_volume_purchasing_locations_id_patch ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling VolumePurchasingLocationsApi.v1_volume_purchasing_locations_id_patch"
      end
      # verify the required parameter 'volume_purchasing_location_patch' is set
      if @api_client.config.client_side_validation && volume_purchasing_location_patch.nil?
        fail ArgumentError, "Missing the required parameter 'volume_purchasing_location_patch' when calling VolumePurchasingLocationsApi.v1_volume_purchasing_locations_id_patch"
      end
      # resource path
      local_var_path = '/v1/volume-purchasing-locations/{id}'.sub('{' + 'id' + '}', CGI.escape(id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/merge-patch+json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(volume_purchasing_location_patch)

      # return_type
      return_type = opts[:debug_return_type] || 'VolumePurchasingLocation'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['Bearer']

      new_options = opts.merge(
        :operation => :"VolumePurchasingLocationsApi.v1_volume_purchasing_locations_id_patch",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PATCH, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: VolumePurchasingLocationsApi#v1_volume_purchasing_locations_id_patch\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Reclaim a Volume Purchasing Location with the supplied id
    # Reclaims a Volume Purchasing Location with the supplied id
    # @param id [String] Volume Purchasing Location identifier
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def v1_volume_purchasing_locations_id_reclaim_post(id, opts = {})
      v1_volume_purchasing_locations_id_reclaim_post_with_http_info(id, opts)
      nil
    end

    # Reclaim a Volume Purchasing Location with the supplied id
    # Reclaims a Volume Purchasing Location with the supplied id
    # @param id [String] Volume Purchasing Location identifier
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def v1_volume_purchasing_locations_id_reclaim_post_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: VolumePurchasingLocationsApi.v1_volume_purchasing_locations_id_reclaim_post ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling VolumePurchasingLocationsApi.v1_volume_purchasing_locations_id_reclaim_post"
      end
      # resource path
      local_var_path = '/v1/volume-purchasing-locations/{id}/reclaim'.sub('{' + 'id' + '}', CGI.escape(id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || ['Bearer']

      new_options = opts.merge(
        :operation => :"VolumePurchasingLocationsApi.v1_volume_purchasing_locations_id_reclaim_post",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: VolumePurchasingLocationsApi#v1_volume_purchasing_locations_id_reclaim_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Revoke licenses for a Volume Purchasing Location with the supplied id
    # Revokes licenses for a Volume Purchasing Location with the supplied id. The licenses must be revokable - any asset whose licenses are irrevocable will not be revoked.
    # @param id [String] Volume Purchasing Location identifier
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def v1_volume_purchasing_locations_id_revoke_licenses_post(id, opts = {})
      v1_volume_purchasing_locations_id_revoke_licenses_post_with_http_info(id, opts)
      nil
    end

    # Revoke licenses for a Volume Purchasing Location with the supplied id
    # Revokes licenses for a Volume Purchasing Location with the supplied id. The licenses must be revokable - any asset whose licenses are irrevocable will not be revoked.
    # @param id [String] Volume Purchasing Location identifier
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def v1_volume_purchasing_locations_id_revoke_licenses_post_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: VolumePurchasingLocationsApi.v1_volume_purchasing_locations_id_revoke_licenses_post ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling VolumePurchasingLocationsApi.v1_volume_purchasing_locations_id_revoke_licenses_post"
      end
      # resource path
      local_var_path = '/v1/volume-purchasing-locations/{id}/revoke-licenses'.sub('{' + 'id' + '}', CGI.escape(id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || ['Bearer']

      new_options = opts.merge(
        :operation => :"VolumePurchasingLocationsApi.v1_volume_purchasing_locations_id_revoke_licenses_post",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: VolumePurchasingLocationsApi#v1_volume_purchasing_locations_id_revoke_licenses_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Create a Volume Purchasing Location
    # Creates a Volume Purchasing Location using an sToken
    # @param volume_purchasing_location_post [VolumePurchasingLocationPost] Volume Purchasing Location to create
    # @param [Hash] opts the optional parameters
    # @return [HrefResponse]
    def v1_volume_purchasing_locations_post(volume_purchasing_location_post, opts = {})
      data, _status_code, _headers = v1_volume_purchasing_locations_post_with_http_info(volume_purchasing_location_post, opts)
      data
    end

    # Create a Volume Purchasing Location
    # Creates a Volume Purchasing Location using an sToken
    # @param volume_purchasing_location_post [VolumePurchasingLocationPost] Volume Purchasing Location to create
    # @param [Hash] opts the optional parameters
    # @return [Array<(HrefResponse, Integer, Hash)>] HrefResponse data, response status code and response headers
    def v1_volume_purchasing_locations_post_with_http_info(volume_purchasing_location_post, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: VolumePurchasingLocationsApi.v1_volume_purchasing_locations_post ...'
      end
      # verify the required parameter 'volume_purchasing_location_post' is set
      if @api_client.config.client_side_validation && volume_purchasing_location_post.nil?
        fail ArgumentError, "Missing the required parameter 'volume_purchasing_location_post' when calling VolumePurchasingLocationsApi.v1_volume_purchasing_locations_post"
      end
      # resource path
      local_var_path = '/v1/volume-purchasing-locations'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(volume_purchasing_location_post)

      # return_type
      return_type = opts[:debug_return_type] || 'HrefResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['Bearer']

      new_options = opts.merge(
        :operation => :"VolumePurchasingLocationsApi.v1_volume_purchasing_locations_post",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: VolumePurchasingLocationsApi#v1_volume_purchasing_locations_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
