=begin
#Jamf Pro API

### Overview The Jamf Pro API is a RESTful API for Jamf Pro built to enable consistent and efficient programmatic access to Jamf Pro.<br/><br/> The swagger schema can be found [here](/api/schema/). 

The version of the OpenAPI document: production

Generated by: https://openapi-generator.tech
OpenAPI Generator version: 6.1.0-SNAPSHOT

=end

require 'cgi'

module JamfPro
  class TeamViewerRemoteAdministrationApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Get a paginated list of sessions 
    # Returns a paginated list of sessions for a given configuration ID
    # @param configuration_id [String] ID of the Team Viewer connection configuration
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :page  (default to 0)
    # @option opts [Integer] :page_size  (default to 100)
    # @option opts [String] :filter Query in the RSQL format, allowing to filter sessions collection. Default filter is empty query - returning all results for the requested page.  Fields allowed in the query: &#x60;deviceId&#x60;, &#x60;deviceType&#x60;, &#x60;state&#x60;  This param can be combined with paging.  (default to '')
    # @return [SessionDetailsSearchResults]
    def preview_remote_administration_configurations_team_viewer_configuration_id_sessions_get(configuration_id, opts = {})
      data, _status_code, _headers = preview_remote_administration_configurations_team_viewer_configuration_id_sessions_get_with_http_info(configuration_id, opts)
      data
    end

    # Get a paginated list of sessions 
    # Returns a paginated list of sessions for a given configuration ID
    # @param configuration_id [String] ID of the Team Viewer connection configuration
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :page  (default to 0)
    # @option opts [Integer] :page_size  (default to 100)
    # @option opts [String] :filter Query in the RSQL format, allowing to filter sessions collection. Default filter is empty query - returning all results for the requested page.  Fields allowed in the query: &#x60;deviceId&#x60;, &#x60;deviceType&#x60;, &#x60;state&#x60;  This param can be combined with paging.  (default to '')
    # @return [Array<(SessionDetailsSearchResults, Integer, Hash)>] SessionDetailsSearchResults data, response status code and response headers
    def preview_remote_administration_configurations_team_viewer_configuration_id_sessions_get_with_http_info(configuration_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: TeamViewerRemoteAdministrationApi.preview_remote_administration_configurations_team_viewer_configuration_id_sessions_get ...'
      end
      # verify the required parameter 'configuration_id' is set
      if @api_client.config.client_side_validation && configuration_id.nil?
        fail ArgumentError, "Missing the required parameter 'configuration_id' when calling TeamViewerRemoteAdministrationApi.preview_remote_administration_configurations_team_viewer_configuration_id_sessions_get"
      end
      # resource path
      local_var_path = '/preview/remote-administration-configurations/team-viewer/{configurationId}/sessions'.sub('{' + 'configurationId' + '}', CGI.escape(configuration_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'page'] = opts[:'page'] if !opts[:'page'].nil?
      query_params[:'page-size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'filter'] = opts[:'filter'] if !opts[:'filter'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'SessionDetailsSearchResults'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['Bearer']

      new_options = opts.merge(
        :operation => :"TeamViewerRemoteAdministrationApi.preview_remote_administration_configurations_team_viewer_configuration_id_sessions_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: TeamViewerRemoteAdministrationApi#preview_remote_administration_configurations_team_viewer_configuration_id_sessions_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Create a new session
    # Creates a new Team Viewer session to be used to establish a remote connection
    # @param configuration_id [String] ID of the Team Viewer connection configuration
    # @param session_candidate_request [SessionCandidateRequest] Team Viewer session attributes
    # @param [Hash] opts the optional parameters
    # @return [HrefResponse]
    def preview_remote_administration_configurations_team_viewer_configuration_id_sessions_post(configuration_id, session_candidate_request, opts = {})
      data, _status_code, _headers = preview_remote_administration_configurations_team_viewer_configuration_id_sessions_post_with_http_info(configuration_id, session_candidate_request, opts)
      data
    end

    # Create a new session
    # Creates a new Team Viewer session to be used to establish a remote connection
    # @param configuration_id [String] ID of the Team Viewer connection configuration
    # @param session_candidate_request [SessionCandidateRequest] Team Viewer session attributes
    # @param [Hash] opts the optional parameters
    # @return [Array<(HrefResponse, Integer, Hash)>] HrefResponse data, response status code and response headers
    def preview_remote_administration_configurations_team_viewer_configuration_id_sessions_post_with_http_info(configuration_id, session_candidate_request, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: TeamViewerRemoteAdministrationApi.preview_remote_administration_configurations_team_viewer_configuration_id_sessions_post ...'
      end
      # verify the required parameter 'configuration_id' is set
      if @api_client.config.client_side_validation && configuration_id.nil?
        fail ArgumentError, "Missing the required parameter 'configuration_id' when calling TeamViewerRemoteAdministrationApi.preview_remote_administration_configurations_team_viewer_configuration_id_sessions_post"
      end
      # verify the required parameter 'session_candidate_request' is set
      if @api_client.config.client_side_validation && session_candidate_request.nil?
        fail ArgumentError, "Missing the required parameter 'session_candidate_request' when calling TeamViewerRemoteAdministrationApi.preview_remote_administration_configurations_team_viewer_configuration_id_sessions_post"
      end
      # resource path
      local_var_path = '/preview/remote-administration-configurations/team-viewer/{configurationId}/sessions'.sub('{' + 'configurationId' + '}', CGI.escape(configuration_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(session_candidate_request)

      # return_type
      return_type = opts[:debug_return_type] || 'HrefResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['Bearer']

      new_options = opts.merge(
        :operation => :"TeamViewerRemoteAdministrationApi.preview_remote_administration_configurations_team_viewer_configuration_id_sessions_post",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: TeamViewerRemoteAdministrationApi#preview_remote_administration_configurations_team_viewer_configuration_id_sessions_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Close a session
    # Changes the session state from open to close. Closing a session means it is not possible to establish new remote connection between devices
    # @param configuration_id [String] ID of the Team Viewer connection configuration
    # @param session_id [String] ID of the Team Viewer session
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def preview_remote_administration_configurations_team_viewer_configuration_id_sessions_session_id_close_post(configuration_id, session_id, opts = {})
      preview_remote_administration_configurations_team_viewer_configuration_id_sessions_session_id_close_post_with_http_info(configuration_id, session_id, opts)
      nil
    end

    # Close a session
    # Changes the session state from open to close. Closing a session means it is not possible to establish new remote connection between devices
    # @param configuration_id [String] ID of the Team Viewer connection configuration
    # @param session_id [String] ID of the Team Viewer session
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def preview_remote_administration_configurations_team_viewer_configuration_id_sessions_session_id_close_post_with_http_info(configuration_id, session_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: TeamViewerRemoteAdministrationApi.preview_remote_administration_configurations_team_viewer_configuration_id_sessions_session_id_close_post ...'
      end
      # verify the required parameter 'configuration_id' is set
      if @api_client.config.client_side_validation && configuration_id.nil?
        fail ArgumentError, "Missing the required parameter 'configuration_id' when calling TeamViewerRemoteAdministrationApi.preview_remote_administration_configurations_team_viewer_configuration_id_sessions_session_id_close_post"
      end
      # verify the required parameter 'session_id' is set
      if @api_client.config.client_side_validation && session_id.nil?
        fail ArgumentError, "Missing the required parameter 'session_id' when calling TeamViewerRemoteAdministrationApi.preview_remote_administration_configurations_team_viewer_configuration_id_sessions_session_id_close_post"
      end
      # resource path
      local_var_path = '/preview/remote-administration-configurations/team-viewer/{configurationId}/sessions/{sessionId}/close'.sub('{' + 'configurationId' + '}', CGI.escape(configuration_id.to_s)).sub('{' + 'sessionId' + '}', CGI.escape(session_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || ['Bearer']

      new_options = opts.merge(
        :operation => :"TeamViewerRemoteAdministrationApi.preview_remote_administration_configurations_team_viewer_configuration_id_sessions_session_id_close_post",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: TeamViewerRemoteAdministrationApi#preview_remote_administration_configurations_team_viewer_configuration_id_sessions_session_id_close_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get a session by its ID 
    # Returns a session details if found.
    # @param configuration_id [String] ID of the Team Viewer connection configuration
    # @param session_id [String] ID of the Team Viewer session
    # @param [Hash] opts the optional parameters
    # @return [SessionDetails]
    def preview_remote_administration_configurations_team_viewer_configuration_id_sessions_session_id_get(configuration_id, session_id, opts = {})
      data, _status_code, _headers = preview_remote_administration_configurations_team_viewer_configuration_id_sessions_session_id_get_with_http_info(configuration_id, session_id, opts)
      data
    end

    # Get a session by its ID 
    # Returns a session details if found.
    # @param configuration_id [String] ID of the Team Viewer connection configuration
    # @param session_id [String] ID of the Team Viewer session
    # @param [Hash] opts the optional parameters
    # @return [Array<(SessionDetails, Integer, Hash)>] SessionDetails data, response status code and response headers
    def preview_remote_administration_configurations_team_viewer_configuration_id_sessions_session_id_get_with_http_info(configuration_id, session_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: TeamViewerRemoteAdministrationApi.preview_remote_administration_configurations_team_viewer_configuration_id_sessions_session_id_get ...'
      end
      # verify the required parameter 'configuration_id' is set
      if @api_client.config.client_side_validation && configuration_id.nil?
        fail ArgumentError, "Missing the required parameter 'configuration_id' when calling TeamViewerRemoteAdministrationApi.preview_remote_administration_configurations_team_viewer_configuration_id_sessions_session_id_get"
      end
      # verify the required parameter 'session_id' is set
      if @api_client.config.client_side_validation && session_id.nil?
        fail ArgumentError, "Missing the required parameter 'session_id' when calling TeamViewerRemoteAdministrationApi.preview_remote_administration_configurations_team_viewer_configuration_id_sessions_session_id_get"
      end
      # resource path
      local_var_path = '/preview/remote-administration-configurations/team-viewer/{configurationId}/sessions/{sessionId}'.sub('{' + 'configurationId' + '}', CGI.escape(configuration_id.to_s)).sub('{' + 'sessionId' + '}', CGI.escape(session_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'SessionDetails'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['Bearer']

      new_options = opts.merge(
        :operation => :"TeamViewerRemoteAdministrationApi.preview_remote_administration_configurations_team_viewer_configuration_id_sessions_session_id_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: TeamViewerRemoteAdministrationApi#preview_remote_administration_configurations_team_viewer_configuration_id_sessions_session_id_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Resend nofications for a session
    # Resends configured notifications (e.g. Self Service push notifications).
    # @param configuration_id [String] ID of the Team Viewer connection configuration
    # @param session_id [String] ID of the Team Viewer session
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def preview_remote_administration_configurations_team_viewer_configuration_id_sessions_session_id_resend_notification_post(configuration_id, session_id, opts = {})
      preview_remote_administration_configurations_team_viewer_configuration_id_sessions_session_id_resend_notification_post_with_http_info(configuration_id, session_id, opts)
      nil
    end

    # Resend nofications for a session
    # Resends configured notifications (e.g. Self Service push notifications).
    # @param configuration_id [String] ID of the Team Viewer connection configuration
    # @param session_id [String] ID of the Team Viewer session
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def preview_remote_administration_configurations_team_viewer_configuration_id_sessions_session_id_resend_notification_post_with_http_info(configuration_id, session_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: TeamViewerRemoteAdministrationApi.preview_remote_administration_configurations_team_viewer_configuration_id_sessions_session_id_resend_notification_post ...'
      end
      # verify the required parameter 'configuration_id' is set
      if @api_client.config.client_side_validation && configuration_id.nil?
        fail ArgumentError, "Missing the required parameter 'configuration_id' when calling TeamViewerRemoteAdministrationApi.preview_remote_administration_configurations_team_viewer_configuration_id_sessions_session_id_resend_notification_post"
      end
      # verify the required parameter 'session_id' is set
      if @api_client.config.client_side_validation && session_id.nil?
        fail ArgumentError, "Missing the required parameter 'session_id' when calling TeamViewerRemoteAdministrationApi.preview_remote_administration_configurations_team_viewer_configuration_id_sessions_session_id_resend_notification_post"
      end
      # resource path
      local_var_path = '/preview/remote-administration-configurations/team-viewer/{configurationId}/sessions/{sessionId}/resend-notification'.sub('{' + 'configurationId' + '}', CGI.escape(configuration_id.to_s)).sub('{' + 'sessionId' + '}', CGI.escape(session_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || ['Bearer']

      new_options = opts.merge(
        :operation => :"TeamViewerRemoteAdministrationApi.preview_remote_administration_configurations_team_viewer_configuration_id_sessions_session_id_resend_notification_post",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: TeamViewerRemoteAdministrationApi#preview_remote_administration_configurations_team_viewer_configuration_id_sessions_session_id_resend_notification_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get a session status by its ID 
    # Returns a session status if found.
    # @param configuration_id [String] ID of the Team Viewer connection configuration
    # @param session_id [String] ID of the Team Viewer session
    # @param [Hash] opts the optional parameters
    # @return [SessionStatus]
    def preview_remote_administration_configurations_team_viewer_configuration_id_sessions_session_id_status_get(configuration_id, session_id, opts = {})
      data, _status_code, _headers = preview_remote_administration_configurations_team_viewer_configuration_id_sessions_session_id_status_get_with_http_info(configuration_id, session_id, opts)
      data
    end

    # Get a session status by its ID 
    # Returns a session status if found.
    # @param configuration_id [String] ID of the Team Viewer connection configuration
    # @param session_id [String] ID of the Team Viewer session
    # @param [Hash] opts the optional parameters
    # @return [Array<(SessionStatus, Integer, Hash)>] SessionStatus data, response status code and response headers
    def preview_remote_administration_configurations_team_viewer_configuration_id_sessions_session_id_status_get_with_http_info(configuration_id, session_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: TeamViewerRemoteAdministrationApi.preview_remote_administration_configurations_team_viewer_configuration_id_sessions_session_id_status_get ...'
      end
      # verify the required parameter 'configuration_id' is set
      if @api_client.config.client_side_validation && configuration_id.nil?
        fail ArgumentError, "Missing the required parameter 'configuration_id' when calling TeamViewerRemoteAdministrationApi.preview_remote_administration_configurations_team_viewer_configuration_id_sessions_session_id_status_get"
      end
      # verify the required parameter 'session_id' is set
      if @api_client.config.client_side_validation && session_id.nil?
        fail ArgumentError, "Missing the required parameter 'session_id' when calling TeamViewerRemoteAdministrationApi.preview_remote_administration_configurations_team_viewer_configuration_id_sessions_session_id_status_get"
      end
      # resource path
      local_var_path = '/preview/remote-administration-configurations/team-viewer/{configurationId}/sessions/{sessionId}/status'.sub('{' + 'configurationId' + '}', CGI.escape(configuration_id.to_s)).sub('{' + 'sessionId' + '}', CGI.escape(session_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'SessionStatus'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['Bearer']

      new_options = opts.merge(
        :operation => :"TeamViewerRemoteAdministrationApi.preview_remote_administration_configurations_team_viewer_configuration_id_sessions_session_id_status_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: TeamViewerRemoteAdministrationApi#preview_remote_administration_configurations_team_viewer_configuration_id_sessions_session_id_status_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Delete Team Viewer Remote Administration connection configuration
    # Deletes Team Viewer Remote Administration connection configuration
    # @param id [String] ID of the Team Viewer connection configuration
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def preview_remote_administration_configurations_team_viewer_id_delete(id, opts = {})
      preview_remote_administration_configurations_team_viewer_id_delete_with_http_info(id, opts)
      nil
    end

    # Delete Team Viewer Remote Administration connection configuration
    # Deletes Team Viewer Remote Administration connection configuration
    # @param id [String] ID of the Team Viewer connection configuration
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def preview_remote_administration_configurations_team_viewer_id_delete_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: TeamViewerRemoteAdministrationApi.preview_remote_administration_configurations_team_viewer_id_delete ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling TeamViewerRemoteAdministrationApi.preview_remote_administration_configurations_team_viewer_id_delete"
      end
      # resource path
      local_var_path = '/preview/remote-administration-configurations/team-viewer/{id}'.sub('{' + 'id' + '}', CGI.escape(id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || ['Bearer']

      new_options = opts.merge(
        :operation => :"TeamViewerRemoteAdministrationApi.preview_remote_administration_configurations_team_viewer_id_delete",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: TeamViewerRemoteAdministrationApi#preview_remote_administration_configurations_team_viewer_id_delete\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get Team Viewer Remote Administration connection configuration
    # Returns Team Viewer Remote Administration connection configuration
    # @param id [String] ID of the Team Viewer connection configuration
    # @param [Hash] opts the optional parameters
    # @return [ConnectionConfigurationResponse]
    def preview_remote_administration_configurations_team_viewer_id_get(id, opts = {})
      data, _status_code, _headers = preview_remote_administration_configurations_team_viewer_id_get_with_http_info(id, opts)
      data
    end

    # Get Team Viewer Remote Administration connection configuration
    # Returns Team Viewer Remote Administration connection configuration
    # @param id [String] ID of the Team Viewer connection configuration
    # @param [Hash] opts the optional parameters
    # @return [Array<(ConnectionConfigurationResponse, Integer, Hash)>] ConnectionConfigurationResponse data, response status code and response headers
    def preview_remote_administration_configurations_team_viewer_id_get_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: TeamViewerRemoteAdministrationApi.preview_remote_administration_configurations_team_viewer_id_get ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling TeamViewerRemoteAdministrationApi.preview_remote_administration_configurations_team_viewer_id_get"
      end
      # resource path
      local_var_path = '/preview/remote-administration-configurations/team-viewer/{id}'.sub('{' + 'id' + '}', CGI.escape(id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ConnectionConfigurationResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['Bearer']

      new_options = opts.merge(
        :operation => :"TeamViewerRemoteAdministrationApi.preview_remote_administration_configurations_team_viewer_id_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: TeamViewerRemoteAdministrationApi#preview_remote_administration_configurations_team_viewer_id_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Update Team Viewer Remote Administration connection configuration
    # Updates Team Viewer Remote Administration connection configuration
    # @param id [String] ID of the Team Viewer connection configuration
    # @param connection_configuration_update_request [ConnectionConfigurationUpdateRequest] Team Viewer connection configuration update request
    # @param [Hash] opts the optional parameters
    # @return [ConnectionConfigurationResponse]
    def preview_remote_administration_configurations_team_viewer_id_patch(id, connection_configuration_update_request, opts = {})
      data, _status_code, _headers = preview_remote_administration_configurations_team_viewer_id_patch_with_http_info(id, connection_configuration_update_request, opts)
      data
    end

    # Update Team Viewer Remote Administration connection configuration
    # Updates Team Viewer Remote Administration connection configuration
    # @param id [String] ID of the Team Viewer connection configuration
    # @param connection_configuration_update_request [ConnectionConfigurationUpdateRequest] Team Viewer connection configuration update request
    # @param [Hash] opts the optional parameters
    # @return [Array<(ConnectionConfigurationResponse, Integer, Hash)>] ConnectionConfigurationResponse data, response status code and response headers
    def preview_remote_administration_configurations_team_viewer_id_patch_with_http_info(id, connection_configuration_update_request, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: TeamViewerRemoteAdministrationApi.preview_remote_administration_configurations_team_viewer_id_patch ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling TeamViewerRemoteAdministrationApi.preview_remote_administration_configurations_team_viewer_id_patch"
      end
      # verify the required parameter 'connection_configuration_update_request' is set
      if @api_client.config.client_side_validation && connection_configuration_update_request.nil?
        fail ArgumentError, "Missing the required parameter 'connection_configuration_update_request' when calling TeamViewerRemoteAdministrationApi.preview_remote_administration_configurations_team_viewer_id_patch"
      end
      # resource path
      local_var_path = '/preview/remote-administration-configurations/team-viewer/{id}'.sub('{' + 'id' + '}', CGI.escape(id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(connection_configuration_update_request)

      # return_type
      return_type = opts[:debug_return_type] || 'ConnectionConfigurationResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['Bearer']

      new_options = opts.merge(
        :operation => :"TeamViewerRemoteAdministrationApi.preview_remote_administration_configurations_team_viewer_id_patch",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PATCH, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: TeamViewerRemoteAdministrationApi#preview_remote_administration_configurations_team_viewer_id_patch\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get Team Viewer Remote Administration connection status
    # Returns Team Viewer Remote Administration connection status
    # @param id [String] ID of the Team Viewer connection configuration
    # @param [Hash] opts the optional parameters
    # @return [ConnectionConfigurationStatusResponse]
    def preview_remote_administration_configurations_team_viewer_id_status_get(id, opts = {})
      data, _status_code, _headers = preview_remote_administration_configurations_team_viewer_id_status_get_with_http_info(id, opts)
      data
    end

    # Get Team Viewer Remote Administration connection status
    # Returns Team Viewer Remote Administration connection status
    # @param id [String] ID of the Team Viewer connection configuration
    # @param [Hash] opts the optional parameters
    # @return [Array<(ConnectionConfigurationStatusResponse, Integer, Hash)>] ConnectionConfigurationStatusResponse data, response status code and response headers
    def preview_remote_administration_configurations_team_viewer_id_status_get_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: TeamViewerRemoteAdministrationApi.preview_remote_administration_configurations_team_viewer_id_status_get ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling TeamViewerRemoteAdministrationApi.preview_remote_administration_configurations_team_viewer_id_status_get"
      end
      # resource path
      local_var_path = '/preview/remote-administration-configurations/team-viewer/{id}/status'.sub('{' + 'id' + '}', CGI.escape(id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ConnectionConfigurationStatusResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['Bearer']

      new_options = opts.merge(
        :operation => :"TeamViewerRemoteAdministrationApi.preview_remote_administration_configurations_team_viewer_id_status_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: TeamViewerRemoteAdministrationApi#preview_remote_administration_configurations_team_viewer_id_status_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Create Team Viewer Remote Administration connection configuration
    # Creates Team Viewer Remote Administration connection configuration
    # @param connection_configuration_candidate_request [ConnectionConfigurationCandidateRequest] Team Viewer connection configuration create definition
    # @param [Hash] opts the optional parameters
    # @return [HrefResponse]
    def preview_remote_administration_configurations_team_viewer_post(connection_configuration_candidate_request, opts = {})
      data, _status_code, _headers = preview_remote_administration_configurations_team_viewer_post_with_http_info(connection_configuration_candidate_request, opts)
      data
    end

    # Create Team Viewer Remote Administration connection configuration
    # Creates Team Viewer Remote Administration connection configuration
    # @param connection_configuration_candidate_request [ConnectionConfigurationCandidateRequest] Team Viewer connection configuration create definition
    # @param [Hash] opts the optional parameters
    # @return [Array<(HrefResponse, Integer, Hash)>] HrefResponse data, response status code and response headers
    def preview_remote_administration_configurations_team_viewer_post_with_http_info(connection_configuration_candidate_request, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: TeamViewerRemoteAdministrationApi.preview_remote_administration_configurations_team_viewer_post ...'
      end
      # verify the required parameter 'connection_configuration_candidate_request' is set
      if @api_client.config.client_side_validation && connection_configuration_candidate_request.nil?
        fail ArgumentError, "Missing the required parameter 'connection_configuration_candidate_request' when calling TeamViewerRemoteAdministrationApi.preview_remote_administration_configurations_team_viewer_post"
      end
      # resource path
      local_var_path = '/preview/remote-administration-configurations/team-viewer'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(connection_configuration_candidate_request)

      # return_type
      return_type = opts[:debug_return_type] || 'HrefResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['Bearer']

      new_options = opts.merge(
        :operation => :"TeamViewerRemoteAdministrationApi.preview_remote_administration_configurations_team_viewer_post",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: TeamViewerRemoteAdministrationApi#preview_remote_administration_configurations_team_viewer_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
