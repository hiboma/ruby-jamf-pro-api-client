=begin
#Jamf Pro API

### Overview The Jamf Pro API is a RESTful API for Jamf Pro built to enable consistent and efficient programmatic access to Jamf Pro.<br/><br/> The swagger schema can be found [here](/api/schema/). 

The version of the OpenAPI document: production

Generated by: https://openapi-generator.tech
OpenAPI Generator version: 6.1.0-SNAPSHOT

=end

require 'cgi'

module JamfPro
  class EnrollmentCustomizationApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Retrieve sorted and paged Enrollment Customizations 
    # Retrieves sorted and paged Enrollment Customizations
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :page  (default to 0)
    # @option opts [Integer] :size  (default to 100)
    # @option opts [Integer] :pagesize  (default to 100)
    # @option opts [Integer] :page_size  (default to 100)
    # @option opts [String] :sort Sorting criteria in the format: property:asc/desc. Multiple sort criteria are supported and must be separated with a comma. Example: sort&#x3D;date:desc,name:asc  (default to 'id:asc')
    # @return [EnrollmentCustomizationSearchResults]
    def v1_enrollment_customization_get(opts = {})
      data, _status_code, _headers = v1_enrollment_customization_get_with_http_info(opts)
      data
    end

    # Retrieve sorted and paged Enrollment Customizations 
    # Retrieves sorted and paged Enrollment Customizations
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :page  (default to 0)
    # @option opts [Integer] :size  (default to 100)
    # @option opts [Integer] :pagesize  (default to 100)
    # @option opts [Integer] :page_size  (default to 100)
    # @option opts [String] :sort Sorting criteria in the format: property:asc/desc. Multiple sort criteria are supported and must be separated with a comma. Example: sort&#x3D;date:desc,name:asc  (default to 'id:asc')
    # @return [Array<(EnrollmentCustomizationSearchResults, Integer, Hash)>] EnrollmentCustomizationSearchResults data, response status code and response headers
    def v1_enrollment_customization_get_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: EnrollmentCustomizationApi.v1_enrollment_customization_get ...'
      end
      # resource path
      local_var_path = '/v1/enrollment-customization'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'page'] = opts[:'page'] if !opts[:'page'].nil?
      query_params[:'size'] = opts[:'size'] if !opts[:'size'].nil?
      query_params[:'pagesize'] = opts[:'pagesize'] if !opts[:'pagesize'].nil?
      query_params[:'page-size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'sort'] = opts[:'sort'] if !opts[:'sort'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'EnrollmentCustomizationSearchResults'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['Bearer']

      new_options = opts.merge(
        :operation => :"EnrollmentCustomizationApi.v1_enrollment_customization_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: EnrollmentCustomizationApi#v1_enrollment_customization_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Delete an Enrollment Customization with the supplied id 
    # Deletes an Enrollment Customization with the supplied id
    # @param id [Integer] Enrollment Customization identifier
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def v1_enrollment_customization_id_delete(id, opts = {})
      v1_enrollment_customization_id_delete_with_http_info(id, opts)
      nil
    end

    # Delete an Enrollment Customization with the supplied id 
    # Deletes an Enrollment Customization with the supplied id
    # @param id [Integer] Enrollment Customization identifier
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def v1_enrollment_customization_id_delete_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: EnrollmentCustomizationApi.v1_enrollment_customization_id_delete ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling EnrollmentCustomizationApi.v1_enrollment_customization_id_delete"
      end
      # resource path
      local_var_path = '/v1/enrollment-customization/{id}'.sub('{' + 'id' + '}', CGI.escape(id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || ['Bearer']

      new_options = opts.merge(
        :operation => :"EnrollmentCustomizationApi.v1_enrollment_customization_id_delete",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: EnrollmentCustomizationApi#v1_enrollment_customization_id_delete\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Retrieve an Enrollment Customization with the supplied id 
    # Retrieves an Enrollment Customization with the supplied id
    # @param id [Integer] Enrollment Customization identifier
    # @param [Hash] opts the optional parameters
    # @return [GetEnrollmentCustomization]
    def v1_enrollment_customization_id_get(id, opts = {})
      data, _status_code, _headers = v1_enrollment_customization_id_get_with_http_info(id, opts)
      data
    end

    # Retrieve an Enrollment Customization with the supplied id 
    # Retrieves an Enrollment Customization with the supplied id
    # @param id [Integer] Enrollment Customization identifier
    # @param [Hash] opts the optional parameters
    # @return [Array<(GetEnrollmentCustomization, Integer, Hash)>] GetEnrollmentCustomization data, response status code and response headers
    def v1_enrollment_customization_id_get_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: EnrollmentCustomizationApi.v1_enrollment_customization_id_get ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling EnrollmentCustomizationApi.v1_enrollment_customization_id_get"
      end
      # resource path
      local_var_path = '/v1/enrollment-customization/{id}'.sub('{' + 'id' + '}', CGI.escape(id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'GetEnrollmentCustomization'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['Bearer']

      new_options = opts.merge(
        :operation => :"EnrollmentCustomizationApi.v1_enrollment_customization_id_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: EnrollmentCustomizationApi#v1_enrollment_customization_id_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get sorted and paged Enrollment Customization history objects 
    # Gets sorted and paged enrollment customization history objects
    # @param id [Integer] Enrollment Customization identifier
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :page  (default to 0)
    # @option opts [Integer] :size  (default to 100)
    # @option opts [Integer] :pagesize  (default to 100)
    # @option opts [Integer] :page_size  (default to 100)
    # @option opts [Array<String>] :sort Sorting criteria in the format: property,asc/desc. Default sort order is descending. Multiple sort criteria are supported and must be entered on separate lines in Swagger UI. In the URI the &#39;sort&#39; query param is duplicated for each sort criterion, e.g., ...&amp;sort&#x3D;name%2Casc&amp;sort&#x3D;date%2Cdesc
    # @return [HistorySearchResults]
    def v1_enrollment_customization_id_history_get(id, opts = {})
      data, _status_code, _headers = v1_enrollment_customization_id_history_get_with_http_info(id, opts)
      data
    end

    # Get sorted and paged Enrollment Customization history objects 
    # Gets sorted and paged enrollment customization history objects
    # @param id [Integer] Enrollment Customization identifier
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :page  (default to 0)
    # @option opts [Integer] :size  (default to 100)
    # @option opts [Integer] :pagesize  (default to 100)
    # @option opts [Integer] :page_size  (default to 100)
    # @option opts [Array<String>] :sort Sorting criteria in the format: property,asc/desc. Default sort order is descending. Multiple sort criteria are supported and must be entered on separate lines in Swagger UI. In the URI the &#39;sort&#39; query param is duplicated for each sort criterion, e.g., ...&amp;sort&#x3D;name%2Casc&amp;sort&#x3D;date%2Cdesc
    # @return [Array<(HistorySearchResults, Integer, Hash)>] HistorySearchResults data, response status code and response headers
    def v1_enrollment_customization_id_history_get_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: EnrollmentCustomizationApi.v1_enrollment_customization_id_history_get ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling EnrollmentCustomizationApi.v1_enrollment_customization_id_history_get"
      end
      # resource path
      local_var_path = '/v1/enrollment-customization/{id}/history'.sub('{' + 'id' + '}', CGI.escape(id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'page'] = opts[:'page'] if !opts[:'page'].nil?
      query_params[:'size'] = opts[:'size'] if !opts[:'size'].nil?
      query_params[:'pagesize'] = opts[:'pagesize'] if !opts[:'pagesize'].nil?
      query_params[:'page-size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'sort'] = @api_client.build_collection_param(opts[:'sort'], :multi) if !opts[:'sort'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'HistorySearchResults'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['Bearer']

      new_options = opts.merge(
        :operation => :"EnrollmentCustomizationApi.v1_enrollment_customization_id_history_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: EnrollmentCustomizationApi#v1_enrollment_customization_id_history_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Add Enrollment Customization history object notes 
    # Adds enrollment customization history object notes
    # @param id [Integer] Enrollment Customization identifier
    # @param object_history_note [ObjectHistoryNote] History notes to create
    # @param [Hash] opts the optional parameters
    # @return [ObjectHistory]
    def v1_enrollment_customization_id_history_post(id, object_history_note, opts = {})
      data, _status_code, _headers = v1_enrollment_customization_id_history_post_with_http_info(id, object_history_note, opts)
      data
    end

    # Add Enrollment Customization history object notes 
    # Adds enrollment customization history object notes
    # @param id [Integer] Enrollment Customization identifier
    # @param object_history_note [ObjectHistoryNote] History notes to create
    # @param [Hash] opts the optional parameters
    # @return [Array<(ObjectHistory, Integer, Hash)>] ObjectHistory data, response status code and response headers
    def v1_enrollment_customization_id_history_post_with_http_info(id, object_history_note, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: EnrollmentCustomizationApi.v1_enrollment_customization_id_history_post ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling EnrollmentCustomizationApi.v1_enrollment_customization_id_history_post"
      end
      # verify the required parameter 'object_history_note' is set
      if @api_client.config.client_side_validation && object_history_note.nil?
        fail ArgumentError, "Missing the required parameter 'object_history_note' when calling EnrollmentCustomizationApi.v1_enrollment_customization_id_history_post"
      end
      # resource path
      local_var_path = '/v1/enrollment-customization/{id}/history'.sub('{' + 'id' + '}', CGI.escape(id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(object_history_note)

      # return_type
      return_type = opts[:debug_return_type] || 'ObjectHistory'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['Bearer']

      new_options = opts.merge(
        :operation => :"EnrollmentCustomizationApi.v1_enrollment_customization_id_history_post",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: EnrollmentCustomizationApi#v1_enrollment_customization_id_history_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Retrieve the list of Prestages using this Enrollment Customization 
    # Retrieves the list of Prestages using this Enrollment Customization
    # @param id [Integer] Enrollment Customization identifier
    # @param [Hash] opts the optional parameters
    # @return [PrestageDependencies]
    def v1_enrollment_customization_id_prestages_get(id, opts = {})
      data, _status_code, _headers = v1_enrollment_customization_id_prestages_get_with_http_info(id, opts)
      data
    end

    # Retrieve the list of Prestages using this Enrollment Customization 
    # Retrieves the list of Prestages using this Enrollment Customization
    # @param id [Integer] Enrollment Customization identifier
    # @param [Hash] opts the optional parameters
    # @return [Array<(PrestageDependencies, Integer, Hash)>] PrestageDependencies data, response status code and response headers
    def v1_enrollment_customization_id_prestages_get_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: EnrollmentCustomizationApi.v1_enrollment_customization_id_prestages_get ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling EnrollmentCustomizationApi.v1_enrollment_customization_id_prestages_get"
      end
      # resource path
      local_var_path = '/v1/enrollment-customization/{id}/prestages'.sub('{' + 'id' + '}', CGI.escape(id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'PrestageDependencies'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['Bearer']

      new_options = opts.merge(
        :operation => :"EnrollmentCustomizationApi.v1_enrollment_customization_id_prestages_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: EnrollmentCustomizationApi#v1_enrollment_customization_id_prestages_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Update an Enrollment Customization 
    # Updates an Enrollment Customization
    # @param id [Integer] Enrollment Customization identifier
    # @param enrollment_customization [EnrollmentCustomization] Enrollment Customization to update
    # @param [Hash] opts the optional parameters
    # @return [GetEnrollmentCustomization]
    def v1_enrollment_customization_id_put(id, enrollment_customization, opts = {})
      data, _status_code, _headers = v1_enrollment_customization_id_put_with_http_info(id, enrollment_customization, opts)
      data
    end

    # Update an Enrollment Customization 
    # Updates an Enrollment Customization
    # @param id [Integer] Enrollment Customization identifier
    # @param enrollment_customization [EnrollmentCustomization] Enrollment Customization to update
    # @param [Hash] opts the optional parameters
    # @return [Array<(GetEnrollmentCustomization, Integer, Hash)>] GetEnrollmentCustomization data, response status code and response headers
    def v1_enrollment_customization_id_put_with_http_info(id, enrollment_customization, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: EnrollmentCustomizationApi.v1_enrollment_customization_id_put ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling EnrollmentCustomizationApi.v1_enrollment_customization_id_put"
      end
      # verify the required parameter 'enrollment_customization' is set
      if @api_client.config.client_side_validation && enrollment_customization.nil?
        fail ArgumentError, "Missing the required parameter 'enrollment_customization' when calling EnrollmentCustomizationApi.v1_enrollment_customization_id_put"
      end
      # resource path
      local_var_path = '/v1/enrollment-customization/{id}'.sub('{' + 'id' + '}', CGI.escape(id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(enrollment_customization)

      # return_type
      return_type = opts[:debug_return_type] || 'GetEnrollmentCustomization'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['Bearer']

      new_options = opts.merge(
        :operation => :"EnrollmentCustomizationApi.v1_enrollment_customization_id_put",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PUT, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: EnrollmentCustomizationApi#v1_enrollment_customization_id_put\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Upload an image
    # Uploads an image
    # @param file [File] The file to upload
    # @param [Hash] opts the optional parameters
    # @return [BrandingImageUrl]
    def v1_enrollment_customization_images_post(file, opts = {})
      data, _status_code, _headers = v1_enrollment_customization_images_post_with_http_info(file, opts)
      data
    end

    # Upload an image
    # Uploads an image
    # @param file [File] The file to upload
    # @param [Hash] opts the optional parameters
    # @return [Array<(BrandingImageUrl, Integer, Hash)>] BrandingImageUrl data, response status code and response headers
    def v1_enrollment_customization_images_post_with_http_info(file, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: EnrollmentCustomizationApi.v1_enrollment_customization_images_post ...'
      end
      # verify the required parameter 'file' is set
      if @api_client.config.client_side_validation && file.nil?
        fail ArgumentError, "Missing the required parameter 'file' when calling EnrollmentCustomizationApi.v1_enrollment_customization_images_post"
      end
      # resource path
      local_var_path = '/v1/enrollment-customization/images'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['multipart/form-data'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}
      form_params['file'] = file

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'BrandingImageUrl'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['Bearer']

      new_options = opts.merge(
        :operation => :"EnrollmentCustomizationApi.v1_enrollment_customization_images_post",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: EnrollmentCustomizationApi#v1_enrollment_customization_images_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Create an Enrollment Customization 
    # Create an enrollment customization
    # @param enrollment_customization [EnrollmentCustomization] Enrollment customization to create.
    # @param [Hash] opts the optional parameters
    # @return [GetEnrollmentCustomization]
    def v1_enrollment_customization_post(enrollment_customization, opts = {})
      data, _status_code, _headers = v1_enrollment_customization_post_with_http_info(enrollment_customization, opts)
      data
    end

    # Create an Enrollment Customization 
    # Create an enrollment customization
    # @param enrollment_customization [EnrollmentCustomization] Enrollment customization to create.
    # @param [Hash] opts the optional parameters
    # @return [Array<(GetEnrollmentCustomization, Integer, Hash)>] GetEnrollmentCustomization data, response status code and response headers
    def v1_enrollment_customization_post_with_http_info(enrollment_customization, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: EnrollmentCustomizationApi.v1_enrollment_customization_post ...'
      end
      # verify the required parameter 'enrollment_customization' is set
      if @api_client.config.client_side_validation && enrollment_customization.nil?
        fail ArgumentError, "Missing the required parameter 'enrollment_customization' when calling EnrollmentCustomizationApi.v1_enrollment_customization_post"
      end
      # resource path
      local_var_path = '/v1/enrollment-customization'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(enrollment_customization)

      # return_type
      return_type = opts[:debug_return_type] || 'GetEnrollmentCustomization'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['Bearer']

      new_options = opts.merge(
        :operation => :"EnrollmentCustomizationApi.v1_enrollment_customization_post",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: EnrollmentCustomizationApi#v1_enrollment_customization_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Retrieve sorted and paged Enrollment Customizations 
    # Retrieves sorted and paged Enrollment Customizations
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :page  (default to 0)
    # @option opts [Integer] :page_size  (default to 100)
    # @option opts [Array<String>] :sort Sorting criteria in the format: property:asc/desc. Multiple sort criteria are supported and must be separated with a comma. Example: sort&#x3D;date:desc,name:asc 
    # @return [EnrollmentCustomizationSearchResultsV2]
    def v2_enrollment_customizations_get(opts = {})
      data, _status_code, _headers = v2_enrollment_customizations_get_with_http_info(opts)
      data
    end

    # Retrieve sorted and paged Enrollment Customizations 
    # Retrieves sorted and paged Enrollment Customizations
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :page  (default to 0)
    # @option opts [Integer] :page_size  (default to 100)
    # @option opts [Array<String>] :sort Sorting criteria in the format: property:asc/desc. Multiple sort criteria are supported and must be separated with a comma. Example: sort&#x3D;date:desc,name:asc 
    # @return [Array<(EnrollmentCustomizationSearchResultsV2, Integer, Hash)>] EnrollmentCustomizationSearchResultsV2 data, response status code and response headers
    def v2_enrollment_customizations_get_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: EnrollmentCustomizationApi.v2_enrollment_customizations_get ...'
      end
      # resource path
      local_var_path = '/v2/enrollment-customizations'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'page'] = opts[:'page'] if !opts[:'page'].nil?
      query_params[:'page-size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'sort'] = @api_client.build_collection_param(opts[:'sort'], :multi) if !opts[:'sort'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'EnrollmentCustomizationSearchResultsV2'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['Bearer']

      new_options = opts.merge(
        :operation => :"EnrollmentCustomizationApi.v2_enrollment_customizations_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: EnrollmentCustomizationApi#v2_enrollment_customizations_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Delete an Enrollment Customization with the supplied id 
    # Deletes an Enrollment Customization with the supplied id
    # @param id [String] Enrollment Customization identifier
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def v2_enrollment_customizations_id_delete(id, opts = {})
      v2_enrollment_customizations_id_delete_with_http_info(id, opts)
      nil
    end

    # Delete an Enrollment Customization with the supplied id 
    # Deletes an Enrollment Customization with the supplied id
    # @param id [String] Enrollment Customization identifier
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def v2_enrollment_customizations_id_delete_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: EnrollmentCustomizationApi.v2_enrollment_customizations_id_delete ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling EnrollmentCustomizationApi.v2_enrollment_customizations_id_delete"
      end
      # resource path
      local_var_path = '/v2/enrollment-customizations/{id}'.sub('{' + 'id' + '}', CGI.escape(id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || ['Bearer']

      new_options = opts.merge(
        :operation => :"EnrollmentCustomizationApi.v2_enrollment_customizations_id_delete",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: EnrollmentCustomizationApi#v2_enrollment_customizations_id_delete\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Retrieve an Enrollment Customization with the supplied id 
    # Retrieves an Enrollment Customization with the supplied id
    # @param id [String] Enrollment Customization identifier
    # @param [Hash] opts the optional parameters
    # @return [EnrollmentCustomizationV2]
    def v2_enrollment_customizations_id_get(id, opts = {})
      data, _status_code, _headers = v2_enrollment_customizations_id_get_with_http_info(id, opts)
      data
    end

    # Retrieve an Enrollment Customization with the supplied id 
    # Retrieves an Enrollment Customization with the supplied id
    # @param id [String] Enrollment Customization identifier
    # @param [Hash] opts the optional parameters
    # @return [Array<(EnrollmentCustomizationV2, Integer, Hash)>] EnrollmentCustomizationV2 data, response status code and response headers
    def v2_enrollment_customizations_id_get_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: EnrollmentCustomizationApi.v2_enrollment_customizations_id_get ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling EnrollmentCustomizationApi.v2_enrollment_customizations_id_get"
      end
      # resource path
      local_var_path = '/v2/enrollment-customizations/{id}'.sub('{' + 'id' + '}', CGI.escape(id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'EnrollmentCustomizationV2'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['Bearer']

      new_options = opts.merge(
        :operation => :"EnrollmentCustomizationApi.v2_enrollment_customizations_id_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: EnrollmentCustomizationApi#v2_enrollment_customizations_id_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get sorted and paged Enrollment Customization history objects 
    # Gets sorted and paged enrollment customization history objects
    # @param id [String] Enrollment Customization identifier
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :page  (default to 0)
    # @option opts [Integer] :page_size  (default to 100)
    # @option opts [Array<String>] :sort Sorting criteria in the format: property,asc/desc. Default sort order is descending. Multiple sort criteria are supported and must be entered on separate lines in Swagger UI. In the URI the &#39;sort&#39; query param is duplicated for each sort criterion, e.g., ...&amp;sort&#x3D;name%2Casc&amp;sort&#x3D;date%2Cdesc
    # @return [HistorySearchResults]
    def v2_enrollment_customizations_id_history_get(id, opts = {})
      data, _status_code, _headers = v2_enrollment_customizations_id_history_get_with_http_info(id, opts)
      data
    end

    # Get sorted and paged Enrollment Customization history objects 
    # Gets sorted and paged enrollment customization history objects
    # @param id [String] Enrollment Customization identifier
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :page  (default to 0)
    # @option opts [Integer] :page_size  (default to 100)
    # @option opts [Array<String>] :sort Sorting criteria in the format: property,asc/desc. Default sort order is descending. Multiple sort criteria are supported and must be entered on separate lines in Swagger UI. In the URI the &#39;sort&#39; query param is duplicated for each sort criterion, e.g., ...&amp;sort&#x3D;name%2Casc&amp;sort&#x3D;date%2Cdesc
    # @return [Array<(HistorySearchResults, Integer, Hash)>] HistorySearchResults data, response status code and response headers
    def v2_enrollment_customizations_id_history_get_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: EnrollmentCustomizationApi.v2_enrollment_customizations_id_history_get ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling EnrollmentCustomizationApi.v2_enrollment_customizations_id_history_get"
      end
      # resource path
      local_var_path = '/v2/enrollment-customizations/{id}/history'.sub('{' + 'id' + '}', CGI.escape(id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'page'] = opts[:'page'] if !opts[:'page'].nil?
      query_params[:'page-size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'sort'] = @api_client.build_collection_param(opts[:'sort'], :multi) if !opts[:'sort'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'HistorySearchResults'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['Bearer']

      new_options = opts.merge(
        :operation => :"EnrollmentCustomizationApi.v2_enrollment_customizations_id_history_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: EnrollmentCustomizationApi#v2_enrollment_customizations_id_history_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Add Enrollment Customization history object notes 
    # Adds enrollment customization history object notes
    # @param id [String] Enrollment Customization identifier
    # @param object_history_note [ObjectHistoryNote] History notes to create
    # @param [Hash] opts the optional parameters
    # @return [ObjectHistory]
    def v2_enrollment_customizations_id_history_post(id, object_history_note, opts = {})
      data, _status_code, _headers = v2_enrollment_customizations_id_history_post_with_http_info(id, object_history_note, opts)
      data
    end

    # Add Enrollment Customization history object notes 
    # Adds enrollment customization history object notes
    # @param id [String] Enrollment Customization identifier
    # @param object_history_note [ObjectHistoryNote] History notes to create
    # @param [Hash] opts the optional parameters
    # @return [Array<(ObjectHistory, Integer, Hash)>] ObjectHistory data, response status code and response headers
    def v2_enrollment_customizations_id_history_post_with_http_info(id, object_history_note, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: EnrollmentCustomizationApi.v2_enrollment_customizations_id_history_post ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling EnrollmentCustomizationApi.v2_enrollment_customizations_id_history_post"
      end
      # verify the required parameter 'object_history_note' is set
      if @api_client.config.client_side_validation && object_history_note.nil?
        fail ArgumentError, "Missing the required parameter 'object_history_note' when calling EnrollmentCustomizationApi.v2_enrollment_customizations_id_history_post"
      end
      # resource path
      local_var_path = '/v2/enrollment-customizations/{id}/history'.sub('{' + 'id' + '}', CGI.escape(id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(object_history_note)

      # return_type
      return_type = opts[:debug_return_type] || 'ObjectHistory'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['Bearer']

      new_options = opts.merge(
        :operation => :"EnrollmentCustomizationApi.v2_enrollment_customizations_id_history_post",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: EnrollmentCustomizationApi#v2_enrollment_customizations_id_history_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Retrieve the list of Prestages using this Enrollment Customization 
    # Retrieves the list of Prestages using this Enrollment Customization
    # @param id [String] Enrollment Customization identifier
    # @param [Hash] opts the optional parameters
    # @return [PrestageDependencies]
    def v2_enrollment_customizations_id_prestages_get(id, opts = {})
      data, _status_code, _headers = v2_enrollment_customizations_id_prestages_get_with_http_info(id, opts)
      data
    end

    # Retrieve the list of Prestages using this Enrollment Customization 
    # Retrieves the list of Prestages using this Enrollment Customization
    # @param id [String] Enrollment Customization identifier
    # @param [Hash] opts the optional parameters
    # @return [Array<(PrestageDependencies, Integer, Hash)>] PrestageDependencies data, response status code and response headers
    def v2_enrollment_customizations_id_prestages_get_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: EnrollmentCustomizationApi.v2_enrollment_customizations_id_prestages_get ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling EnrollmentCustomizationApi.v2_enrollment_customizations_id_prestages_get"
      end
      # resource path
      local_var_path = '/v2/enrollment-customizations/{id}/prestages'.sub('{' + 'id' + '}', CGI.escape(id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'PrestageDependencies'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['Bearer']

      new_options = opts.merge(
        :operation => :"EnrollmentCustomizationApi.v2_enrollment_customizations_id_prestages_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: EnrollmentCustomizationApi#v2_enrollment_customizations_id_prestages_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Update an Enrollment Customization 
    # Updates an Enrollment Customization
    # @param id [String] Enrollment Customization identifier
    # @param enrollment_customization_v2 [EnrollmentCustomizationV2] Enrollment Customization to update
    # @param [Hash] opts the optional parameters
    # @return [EnrollmentCustomizationV2]
    def v2_enrollment_customizations_id_put(id, enrollment_customization_v2, opts = {})
      data, _status_code, _headers = v2_enrollment_customizations_id_put_with_http_info(id, enrollment_customization_v2, opts)
      data
    end

    # Update an Enrollment Customization 
    # Updates an Enrollment Customization
    # @param id [String] Enrollment Customization identifier
    # @param enrollment_customization_v2 [EnrollmentCustomizationV2] Enrollment Customization to update
    # @param [Hash] opts the optional parameters
    # @return [Array<(EnrollmentCustomizationV2, Integer, Hash)>] EnrollmentCustomizationV2 data, response status code and response headers
    def v2_enrollment_customizations_id_put_with_http_info(id, enrollment_customization_v2, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: EnrollmentCustomizationApi.v2_enrollment_customizations_id_put ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling EnrollmentCustomizationApi.v2_enrollment_customizations_id_put"
      end
      # verify the required parameter 'enrollment_customization_v2' is set
      if @api_client.config.client_side_validation && enrollment_customization_v2.nil?
        fail ArgumentError, "Missing the required parameter 'enrollment_customization_v2' when calling EnrollmentCustomizationApi.v2_enrollment_customizations_id_put"
      end
      # resource path
      local_var_path = '/v2/enrollment-customizations/{id}'.sub('{' + 'id' + '}', CGI.escape(id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(enrollment_customization_v2)

      # return_type
      return_type = opts[:debug_return_type] || 'EnrollmentCustomizationV2'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['Bearer']

      new_options = opts.merge(
        :operation => :"EnrollmentCustomizationApi.v2_enrollment_customizations_id_put",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PUT, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: EnrollmentCustomizationApi#v2_enrollment_customizations_id_put\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Upload an image
    # Uploads an image
    # @param file [File] The file to upload
    # @param [Hash] opts the optional parameters
    # @return [BrandingImageUrl]
    def v2_enrollment_customizations_images_post(file, opts = {})
      data, _status_code, _headers = v2_enrollment_customizations_images_post_with_http_info(file, opts)
      data
    end

    # Upload an image
    # Uploads an image
    # @param file [File] The file to upload
    # @param [Hash] opts the optional parameters
    # @return [Array<(BrandingImageUrl, Integer, Hash)>] BrandingImageUrl data, response status code and response headers
    def v2_enrollment_customizations_images_post_with_http_info(file, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: EnrollmentCustomizationApi.v2_enrollment_customizations_images_post ...'
      end
      # verify the required parameter 'file' is set
      if @api_client.config.client_side_validation && file.nil?
        fail ArgumentError, "Missing the required parameter 'file' when calling EnrollmentCustomizationApi.v2_enrollment_customizations_images_post"
      end
      # resource path
      local_var_path = '/v2/enrollment-customizations/images'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['multipart/form-data'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}
      form_params['file'] = file

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'BrandingImageUrl'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['Bearer']

      new_options = opts.merge(
        :operation => :"EnrollmentCustomizationApi.v2_enrollment_customizations_images_post",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: EnrollmentCustomizationApi#v2_enrollment_customizations_images_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Create an Enrollment Customization 
    # Create an enrollment customization
    # @param enrollment_customization_v2 [EnrollmentCustomizationV2] Enrollment customization to create.
    # @param [Hash] opts the optional parameters
    # @return [HrefResponse]
    def v2_enrollment_customizations_post(enrollment_customization_v2, opts = {})
      data, _status_code, _headers = v2_enrollment_customizations_post_with_http_info(enrollment_customization_v2, opts)
      data
    end

    # Create an Enrollment Customization 
    # Create an enrollment customization
    # @param enrollment_customization_v2 [EnrollmentCustomizationV2] Enrollment customization to create.
    # @param [Hash] opts the optional parameters
    # @return [Array<(HrefResponse, Integer, Hash)>] HrefResponse data, response status code and response headers
    def v2_enrollment_customizations_post_with_http_info(enrollment_customization_v2, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: EnrollmentCustomizationApi.v2_enrollment_customizations_post ...'
      end
      # verify the required parameter 'enrollment_customization_v2' is set
      if @api_client.config.client_side_validation && enrollment_customization_v2.nil?
        fail ArgumentError, "Missing the required parameter 'enrollment_customization_v2' when calling EnrollmentCustomizationApi.v2_enrollment_customizations_post"
      end
      # resource path
      local_var_path = '/v2/enrollment-customizations'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(enrollment_customization_v2)

      # return_type
      return_type = opts[:debug_return_type] || 'HrefResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['Bearer']

      new_options = opts.merge(
        :operation => :"EnrollmentCustomizationApi.v2_enrollment_customizations_post",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: EnrollmentCustomizationApi#v2_enrollment_customizations_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
