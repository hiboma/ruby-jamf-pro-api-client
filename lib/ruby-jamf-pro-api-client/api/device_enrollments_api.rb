=begin
#Jamf Pro API

### Overview The Jamf Pro API is a RESTful API for Jamf Pro built to enable consistent and efficient programmatic access to Jamf Pro.<br/><br/> The swagger schema can be found [here](/api/schema/). 

The version of the OpenAPI document: production

Generated by: https://openapi-generator.tech
OpenAPI Generator version: 6.1.0-SNAPSHOT

=end

require 'cgi'

module JamfPro
  class DeviceEnrollmentsApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Read all sorted and paged Device Enrollment instances 
    # Search for sorted and paged device enrollment instances
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :page  (default to 0)
    # @option opts [Integer] :page_size  (default to 100)
    # @option opts [Array<String>] :sort Sorting criteria in the format: property:asc/desc. Multiple sort criteria are supported and must be separated with a comma. Example: sort&#x3D;date:desc,name:asc 
    # @return [DeviceEnrollmentInstanceSearchResults]
    def v1_device_enrollments_get(opts = {})
      data, _status_code, _headers = v1_device_enrollments_get_with_http_info(opts)
      data
    end

    # Read all sorted and paged Device Enrollment instances 
    # Search for sorted and paged device enrollment instances
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :page  (default to 0)
    # @option opts [Integer] :page_size  (default to 100)
    # @option opts [Array<String>] :sort Sorting criteria in the format: property:asc/desc. Multiple sort criteria are supported and must be separated with a comma. Example: sort&#x3D;date:desc,name:asc 
    # @return [Array<(DeviceEnrollmentInstanceSearchResults, Integer, Hash)>] DeviceEnrollmentInstanceSearchResults data, response status code and response headers
    def v1_device_enrollments_get_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DeviceEnrollmentsApi.v1_device_enrollments_get ...'
      end
      # resource path
      local_var_path = '/v1/device-enrollments'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'page'] = opts[:'page'] if !opts[:'page'].nil?
      query_params[:'page-size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'sort'] = @api_client.build_collection_param(opts[:'sort'], :multi) if !opts[:'sort'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'DeviceEnrollmentInstanceSearchResults'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['Bearer']

      new_options = opts.merge(
        :operation => :"DeviceEnrollmentsApi.v1_device_enrollments_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DeviceEnrollmentsApi#v1_device_enrollments_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Delete a Device Enrollment Instance with the supplied id 
    # Deletes a Device Enrollment Instance with the supplied id
    # @param id [String] Device Enrollment Instance identifier
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def v1_device_enrollments_id_delete(id, opts = {})
      v1_device_enrollments_id_delete_with_http_info(id, opts)
      nil
    end

    # Delete a Device Enrollment Instance with the supplied id 
    # Deletes a Device Enrollment Instance with the supplied id
    # @param id [String] Device Enrollment Instance identifier
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def v1_device_enrollments_id_delete_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DeviceEnrollmentsApi.v1_device_enrollments_id_delete ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling DeviceEnrollmentsApi.v1_device_enrollments_id_delete"
      end
      # resource path
      local_var_path = '/v1/device-enrollments/{id}'.sub('{' + 'id' + '}', CGI.escape(id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || ['Bearer']

      new_options = opts.merge(
        :operation => :"DeviceEnrollmentsApi.v1_device_enrollments_id_delete",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DeviceEnrollmentsApi#v1_device_enrollments_id_delete\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Disown devices from the given Device Enrollment Instance 
    # Disowns devices from the given device enrollment instance
    # @param id [String] Device Enrollment Instance identifier
    # @param [Hash] opts the optional parameters
    # @option opts [DeviceEnrollmentDisownBody] :device_enrollment_disown_body List of device serial numbers to disown
    # @return [DeviceEnrollmentDisownResponse]
    def v1_device_enrollments_id_disown_post(id, opts = {})
      data, _status_code, _headers = v1_device_enrollments_id_disown_post_with_http_info(id, opts)
      data
    end

    # Disown devices from the given Device Enrollment Instance 
    # Disowns devices from the given device enrollment instance
    # @param id [String] Device Enrollment Instance identifier
    # @param [Hash] opts the optional parameters
    # @option opts [DeviceEnrollmentDisownBody] :device_enrollment_disown_body List of device serial numbers to disown
    # @return [Array<(DeviceEnrollmentDisownResponse, Integer, Hash)>] DeviceEnrollmentDisownResponse data, response status code and response headers
    def v1_device_enrollments_id_disown_post_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DeviceEnrollmentsApi.v1_device_enrollments_id_disown_post ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling DeviceEnrollmentsApi.v1_device_enrollments_id_disown_post"
      end
      # resource path
      local_var_path = '/v1/device-enrollments/{id}/disown'.sub('{' + 'id' + '}', CGI.escape(id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(opts[:'device_enrollment_disown_body'])

      # return_type
      return_type = opts[:debug_return_type] || 'DeviceEnrollmentDisownResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['Bearer']

      new_options = opts.merge(
        :operation => :"DeviceEnrollmentsApi.v1_device_enrollments_id_disown_post",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DeviceEnrollmentsApi#v1_device_enrollments_id_disown_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Retrieve a Device Enrollment Instance with the supplied id 
    # Retrieves a Device Enrollment Instance with the supplied id
    # @param id [String] Device Enrollment Instance identifier
    # @param [Hash] opts the optional parameters
    # @return [DeviceEnrollmentInstance]
    def v1_device_enrollments_id_get(id, opts = {})
      data, _status_code, _headers = v1_device_enrollments_id_get_with_http_info(id, opts)
      data
    end

    # Retrieve a Device Enrollment Instance with the supplied id 
    # Retrieves a Device Enrollment Instance with the supplied id
    # @param id [String] Device Enrollment Instance identifier
    # @param [Hash] opts the optional parameters
    # @return [Array<(DeviceEnrollmentInstance, Integer, Hash)>] DeviceEnrollmentInstance data, response status code and response headers
    def v1_device_enrollments_id_get_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DeviceEnrollmentsApi.v1_device_enrollments_id_get ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling DeviceEnrollmentsApi.v1_device_enrollments_id_get"
      end
      # resource path
      local_var_path = '/v1/device-enrollments/{id}'.sub('{' + 'id' + '}', CGI.escape(id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'DeviceEnrollmentInstance'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['Bearer']

      new_options = opts.merge(
        :operation => :"DeviceEnrollmentsApi.v1_device_enrollments_id_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DeviceEnrollmentsApi#v1_device_enrollments_id_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get sorted and paged Device Enrollment history objects 
    # Gets sorted and paged device enrollment history objects
    # @param id [String] Device Enrollment Instance identifier
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :page  (default to 0)
    # @option opts [Integer] :page_size  (default to 100)
    # @option opts [Array<String>] :sort Sorting criteria in the format: property,asc/desc. Default sort order is descending. Multiple sort criteria are supported and must be entered on separate lines in Swagger UI. In the URI the &#39;sort&#39; query param is duplicated for each sort criterion, e.g., ...&amp;sort&#x3D;name%2Casc&amp;sort&#x3D;date%2Cdesc
    # @option opts [String] :filter Query in the RSQL format, allowing to filter history notes collection. Default search is empty query - returning all results for the requested page. Fields allowed in the query: username, date, note, details. This param can be combined with paging and sorting. Example: search&#x3D;username!&#x3D;admin and details&#x3D;&#x3D;*disabled* and date&lt;2019-12-15 (default to '')
    # @return [HistorySearchResults]
    def v1_device_enrollments_id_history_get(id, opts = {})
      data, _status_code, _headers = v1_device_enrollments_id_history_get_with_http_info(id, opts)
      data
    end

    # Get sorted and paged Device Enrollment history objects 
    # Gets sorted and paged device enrollment history objects
    # @param id [String] Device Enrollment Instance identifier
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :page  (default to 0)
    # @option opts [Integer] :page_size  (default to 100)
    # @option opts [Array<String>] :sort Sorting criteria in the format: property,asc/desc. Default sort order is descending. Multiple sort criteria are supported and must be entered on separate lines in Swagger UI. In the URI the &#39;sort&#39; query param is duplicated for each sort criterion, e.g., ...&amp;sort&#x3D;name%2Casc&amp;sort&#x3D;date%2Cdesc
    # @option opts [String] :filter Query in the RSQL format, allowing to filter history notes collection. Default search is empty query - returning all results for the requested page. Fields allowed in the query: username, date, note, details. This param can be combined with paging and sorting. Example: search&#x3D;username!&#x3D;admin and details&#x3D;&#x3D;*disabled* and date&lt;2019-12-15 (default to '')
    # @return [Array<(HistorySearchResults, Integer, Hash)>] HistorySearchResults data, response status code and response headers
    def v1_device_enrollments_id_history_get_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DeviceEnrollmentsApi.v1_device_enrollments_id_history_get ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling DeviceEnrollmentsApi.v1_device_enrollments_id_history_get"
      end
      # resource path
      local_var_path = '/v1/device-enrollments/{id}/history'.sub('{' + 'id' + '}', CGI.escape(id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'page'] = opts[:'page'] if !opts[:'page'].nil?
      query_params[:'page-size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'sort'] = @api_client.build_collection_param(opts[:'sort'], :multi) if !opts[:'sort'].nil?
      query_params[:'filter'] = opts[:'filter'] if !opts[:'filter'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'HistorySearchResults'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['Bearer']

      new_options = opts.merge(
        :operation => :"DeviceEnrollmentsApi.v1_device_enrollments_id_history_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DeviceEnrollmentsApi#v1_device_enrollments_id_history_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Add Device Enrollment history object notes 
    # Adds device enrollment history object notes
    # @param id [String] Device Enrollment Instance identifier
    # @param object_history_note [ObjectHistoryNote] History notes to create
    # @param [Hash] opts the optional parameters
    # @return [HrefResponse]
    def v1_device_enrollments_id_history_post(id, object_history_note, opts = {})
      data, _status_code, _headers = v1_device_enrollments_id_history_post_with_http_info(id, object_history_note, opts)
      data
    end

    # Add Device Enrollment history object notes 
    # Adds device enrollment history object notes
    # @param id [String] Device Enrollment Instance identifier
    # @param object_history_note [ObjectHistoryNote] History notes to create
    # @param [Hash] opts the optional parameters
    # @return [Array<(HrefResponse, Integer, Hash)>] HrefResponse data, response status code and response headers
    def v1_device_enrollments_id_history_post_with_http_info(id, object_history_note, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DeviceEnrollmentsApi.v1_device_enrollments_id_history_post ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling DeviceEnrollmentsApi.v1_device_enrollments_id_history_post"
      end
      # verify the required parameter 'object_history_note' is set
      if @api_client.config.client_side_validation && object_history_note.nil?
        fail ArgumentError, "Missing the required parameter 'object_history_note' when calling DeviceEnrollmentsApi.v1_device_enrollments_id_history_post"
      end
      # resource path
      local_var_path = '/v1/device-enrollments/{id}/history'.sub('{' + 'id' + '}', CGI.escape(id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(object_history_note)

      # return_type
      return_type = opts[:debug_return_type] || 'HrefResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['Bearer']

      new_options = opts.merge(
        :operation => :"DeviceEnrollmentsApi.v1_device_enrollments_id_history_post",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DeviceEnrollmentsApi#v1_device_enrollments_id_history_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Update a Device Enrollment Instance with the supplied id 
    # Updates a Device Enrollment Instance with the supplied id
    # @param id [String] Device Enrollment Instance identifier
    # @param device_enrollment_instance [DeviceEnrollmentInstance] 
    # @param [Hash] opts the optional parameters
    # @return [DeviceEnrollmentInstance]
    def v1_device_enrollments_id_put(id, device_enrollment_instance, opts = {})
      data, _status_code, _headers = v1_device_enrollments_id_put_with_http_info(id, device_enrollment_instance, opts)
      data
    end

    # Update a Device Enrollment Instance with the supplied id 
    # Updates a Device Enrollment Instance with the supplied id
    # @param id [String] Device Enrollment Instance identifier
    # @param device_enrollment_instance [DeviceEnrollmentInstance] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(DeviceEnrollmentInstance, Integer, Hash)>] DeviceEnrollmentInstance data, response status code and response headers
    def v1_device_enrollments_id_put_with_http_info(id, device_enrollment_instance, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DeviceEnrollmentsApi.v1_device_enrollments_id_put ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling DeviceEnrollmentsApi.v1_device_enrollments_id_put"
      end
      # verify the required parameter 'device_enrollment_instance' is set
      if @api_client.config.client_side_validation && device_enrollment_instance.nil?
        fail ArgumentError, "Missing the required parameter 'device_enrollment_instance' when calling DeviceEnrollmentsApi.v1_device_enrollments_id_put"
      end
      # resource path
      local_var_path = '/v1/device-enrollments/{id}'.sub('{' + 'id' + '}', CGI.escape(id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(device_enrollment_instance)

      # return_type
      return_type = opts[:debug_return_type] || 'DeviceEnrollmentInstance'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['Bearer']

      new_options = opts.merge(
        :operation => :"DeviceEnrollmentsApi.v1_device_enrollments_id_put",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PUT, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DeviceEnrollmentsApi#v1_device_enrollments_id_put\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get all instance sync states for a single Device Enrollment Instance 
    # Get all instance sync states for a single instance
    # @param id [String] Device Enrollment Instance identifier
    # @param [Hash] opts the optional parameters
    # @return [Array<DeviceEnrollmentInstanceSyncStatus>]
    def v1_device_enrollments_id_syncs_get(id, opts = {})
      data, _status_code, _headers = v1_device_enrollments_id_syncs_get_with_http_info(id, opts)
      data
    end

    # Get all instance sync states for a single Device Enrollment Instance 
    # Get all instance sync states for a single instance
    # @param id [String] Device Enrollment Instance identifier
    # @param [Hash] opts the optional parameters
    # @return [Array<(Array<DeviceEnrollmentInstanceSyncStatus>, Integer, Hash)>] Array<DeviceEnrollmentInstanceSyncStatus> data, response status code and response headers
    def v1_device_enrollments_id_syncs_get_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DeviceEnrollmentsApi.v1_device_enrollments_id_syncs_get ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling DeviceEnrollmentsApi.v1_device_enrollments_id_syncs_get"
      end
      # resource path
      local_var_path = '/v1/device-enrollments/{id}/syncs'.sub('{' + 'id' + '}', CGI.escape(id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'Array<DeviceEnrollmentInstanceSyncStatus>'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['Bearer']

      new_options = opts.merge(
        :operation => :"DeviceEnrollmentsApi.v1_device_enrollments_id_syncs_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DeviceEnrollmentsApi#v1_device_enrollments_id_syncs_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get the latest sync state for a single Device Enrollment Instance 
    # Get the latest sync state for a single instance
    # @param id [String] Device Enrollment Instance identifier
    # @param [Hash] opts the optional parameters
    # @return [DeviceEnrollmentInstanceSyncStatus]
    def v1_device_enrollments_id_syncs_latest_get(id, opts = {})
      data, _status_code, _headers = v1_device_enrollments_id_syncs_latest_get_with_http_info(id, opts)
      data
    end

    # Get the latest sync state for a single Device Enrollment Instance 
    # Get the latest sync state for a single instance
    # @param id [String] Device Enrollment Instance identifier
    # @param [Hash] opts the optional parameters
    # @return [Array<(DeviceEnrollmentInstanceSyncStatus, Integer, Hash)>] DeviceEnrollmentInstanceSyncStatus data, response status code and response headers
    def v1_device_enrollments_id_syncs_latest_get_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DeviceEnrollmentsApi.v1_device_enrollments_id_syncs_latest_get ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling DeviceEnrollmentsApi.v1_device_enrollments_id_syncs_latest_get"
      end
      # resource path
      local_var_path = '/v1/device-enrollments/{id}/syncs/latest'.sub('{' + 'id' + '}', CGI.escape(id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'DeviceEnrollmentInstanceSyncStatus'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['Bearer']

      new_options = opts.merge(
        :operation => :"DeviceEnrollmentsApi.v1_device_enrollments_id_syncs_latest_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DeviceEnrollmentsApi#v1_device_enrollments_id_syncs_latest_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Update a Device Enrollment Instance with the supplied Token 
    # Updates a device enrollment instance with the supplied token.
    # @param id [String] Device Enrollment Instance identifier
    # @param device_enrollment_token [DeviceEnrollmentToken] The downloaded token base 64 encoded from the MDM server to be used to create a new Device Enrollment Instance.
    # @param [Hash] opts the optional parameters
    # @return [DeviceEnrollmentInstance]
    def v1_device_enrollments_id_upload_token_put(id, device_enrollment_token, opts = {})
      data, _status_code, _headers = v1_device_enrollments_id_upload_token_put_with_http_info(id, device_enrollment_token, opts)
      data
    end

    # Update a Device Enrollment Instance with the supplied Token 
    # Updates a device enrollment instance with the supplied token.
    # @param id [String] Device Enrollment Instance identifier
    # @param device_enrollment_token [DeviceEnrollmentToken] The downloaded token base 64 encoded from the MDM server to be used to create a new Device Enrollment Instance.
    # @param [Hash] opts the optional parameters
    # @return [Array<(DeviceEnrollmentInstance, Integer, Hash)>] DeviceEnrollmentInstance data, response status code and response headers
    def v1_device_enrollments_id_upload_token_put_with_http_info(id, device_enrollment_token, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DeviceEnrollmentsApi.v1_device_enrollments_id_upload_token_put ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling DeviceEnrollmentsApi.v1_device_enrollments_id_upload_token_put"
      end
      # verify the required parameter 'device_enrollment_token' is set
      if @api_client.config.client_side_validation && device_enrollment_token.nil?
        fail ArgumentError, "Missing the required parameter 'device_enrollment_token' when calling DeviceEnrollmentsApi.v1_device_enrollments_id_upload_token_put"
      end
      # resource path
      local_var_path = '/v1/device-enrollments/{id}/upload-token'.sub('{' + 'id' + '}', CGI.escape(id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(device_enrollment_token)

      # return_type
      return_type = opts[:debug_return_type] || 'DeviceEnrollmentInstance'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['Bearer']

      new_options = opts.merge(
        :operation => :"DeviceEnrollmentsApi.v1_device_enrollments_id_upload_token_put",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PUT, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DeviceEnrollmentsApi#v1_device_enrollments_id_upload_token_put\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Retrieve the Jamf Pro Device Enrollment public key 
    # Retrieve the Jamf Pro device enrollment public key
    # @param [Hash] opts the optional parameters
    # @return [File]
    def v1_device_enrollments_public_key_get(opts = {})
      data, _status_code, _headers = v1_device_enrollments_public_key_get_with_http_info(opts)
      data
    end

    # Retrieve the Jamf Pro Device Enrollment public key 
    # Retrieve the Jamf Pro device enrollment public key
    # @param [Hash] opts the optional parameters
    # @return [Array<(File, Integer, Hash)>] File data, response status code and response headers
    def v1_device_enrollments_public_key_get_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DeviceEnrollmentsApi.v1_device_enrollments_public_key_get ...'
      end
      # resource path
      local_var_path = '/v1/device-enrollments/public-key'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/x-pem-file'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'File'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['Bearer']

      new_options = opts.merge(
        :operation => :"DeviceEnrollmentsApi.v1_device_enrollments_public_key_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DeviceEnrollmentsApi#v1_device_enrollments_public_key_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get all instance sync states for all Device Enrollment Instances 
    # Get all instance sync states for all instances
    # @param [Hash] opts the optional parameters
    # @return [Array<DeviceEnrollmentInstanceSyncStatus>]
    def v1_device_enrollments_syncs_get(opts = {})
      data, _status_code, _headers = v1_device_enrollments_syncs_get_with_http_info(opts)
      data
    end

    # Get all instance sync states for all Device Enrollment Instances 
    # Get all instance sync states for all instances
    # @param [Hash] opts the optional parameters
    # @return [Array<(Array<DeviceEnrollmentInstanceSyncStatus>, Integer, Hash)>] Array<DeviceEnrollmentInstanceSyncStatus> data, response status code and response headers
    def v1_device_enrollments_syncs_get_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DeviceEnrollmentsApi.v1_device_enrollments_syncs_get ...'
      end
      # resource path
      local_var_path = '/v1/device-enrollments/syncs'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'Array<DeviceEnrollmentInstanceSyncStatus>'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['Bearer']

      new_options = opts.merge(
        :operation => :"DeviceEnrollmentsApi.v1_device_enrollments_syncs_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DeviceEnrollmentsApi#v1_device_enrollments_syncs_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Create a Device Enrollment Instance with the supplied Token 
    # Creates a device enrollment instance with the supplied token.
    # @param device_enrollment_token [DeviceEnrollmentToken] The downloaded token base 64 encoded from the MDM server to be used to create a new Device Enrollment Instance.
    # @param [Hash] opts the optional parameters
    # @return [HrefResponse]
    def v1_device_enrollments_upload_token_post(device_enrollment_token, opts = {})
      data, _status_code, _headers = v1_device_enrollments_upload_token_post_with_http_info(device_enrollment_token, opts)
      data
    end

    # Create a Device Enrollment Instance with the supplied Token 
    # Creates a device enrollment instance with the supplied token.
    # @param device_enrollment_token [DeviceEnrollmentToken] The downloaded token base 64 encoded from the MDM server to be used to create a new Device Enrollment Instance.
    # @param [Hash] opts the optional parameters
    # @return [Array<(HrefResponse, Integer, Hash)>] HrefResponse data, response status code and response headers
    def v1_device_enrollments_upload_token_post_with_http_info(device_enrollment_token, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DeviceEnrollmentsApi.v1_device_enrollments_upload_token_post ...'
      end
      # verify the required parameter 'device_enrollment_token' is set
      if @api_client.config.client_side_validation && device_enrollment_token.nil?
        fail ArgumentError, "Missing the required parameter 'device_enrollment_token' when calling DeviceEnrollmentsApi.v1_device_enrollments_upload_token_post"
      end
      # resource path
      local_var_path = '/v1/device-enrollments/upload-token'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(device_enrollment_token)

      # return_type
      return_type = opts[:debug_return_type] || 'HrefResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['Bearer']

      new_options = opts.merge(
        :operation => :"DeviceEnrollmentsApi.v1_device_enrollments_upload_token_post",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DeviceEnrollmentsApi#v1_device_enrollments_upload_token_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
