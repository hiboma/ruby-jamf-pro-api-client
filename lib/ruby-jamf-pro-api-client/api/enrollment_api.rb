=begin
#Jamf Pro API

### Overview The Jamf Pro API is a RESTful API for Jamf Pro built to enable consistent and efficient programmatic access to Jamf Pro.<br/><br/> The swagger schema can be found [here](/api/schema/). 

The version of the OpenAPI document: production

Generated by: https://openapi-generator.tech
OpenAPI Generator version: 6.1.0-SNAPSHOT

=end

require 'cgi'

module JamfPro
  class EnrollmentApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Retrieve the Account Driven User Enrollment Session Token Settings 
    # Retrieve the Account Driven User Enrollment Session Token Settings 
    # @param [Hash] opts the optional parameters
    # @return [AccountDrivenUserEnrollmentSessionTokenSettings]
    def v1_adue_session_token_settings_get(opts = {})
      data, _status_code, _headers = v1_adue_session_token_settings_get_with_http_info(opts)
      data
    end

    # Retrieve the Account Driven User Enrollment Session Token Settings 
    # Retrieve the Account Driven User Enrollment Session Token Settings 
    # @param [Hash] opts the optional parameters
    # @return [Array<(AccountDrivenUserEnrollmentSessionTokenSettings, Integer, Hash)>] AccountDrivenUserEnrollmentSessionTokenSettings data, response status code and response headers
    def v1_adue_session_token_settings_get_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: EnrollmentApi.v1_adue_session_token_settings_get ...'
      end
      # resource path
      local_var_path = '/v1/adue-session-token-settings'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'AccountDrivenUserEnrollmentSessionTokenSettings'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['Bearer']

      new_options = opts.merge(
        :operation => :"EnrollmentApi.v1_adue_session_token_settings_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: EnrollmentApi#v1_adue_session_token_settings_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Update Account Driven User Enrollment Session Token Settings. 
    # Update the Account Driven User Enrollment Session Token Settings object. 
    # @param account_driven_user_enrollment_session_token_settings [AccountDrivenUserEnrollmentSessionTokenSettings] Update Account Driven User Enrollment Session Token Settings.
    # @param [Hash] opts the optional parameters
    # @return [AccountDrivenUserEnrollmentSessionTokenSettings]
    def v1_adue_session_token_settings_put(account_driven_user_enrollment_session_token_settings, opts = {})
      data, _status_code, _headers = v1_adue_session_token_settings_put_with_http_info(account_driven_user_enrollment_session_token_settings, opts)
      data
    end

    # Update Account Driven User Enrollment Session Token Settings. 
    # Update the Account Driven User Enrollment Session Token Settings object. 
    # @param account_driven_user_enrollment_session_token_settings [AccountDrivenUserEnrollmentSessionTokenSettings] Update Account Driven User Enrollment Session Token Settings.
    # @param [Hash] opts the optional parameters
    # @return [Array<(AccountDrivenUserEnrollmentSessionTokenSettings, Integer, Hash)>] AccountDrivenUserEnrollmentSessionTokenSettings data, response status code and response headers
    def v1_adue_session_token_settings_put_with_http_info(account_driven_user_enrollment_session_token_settings, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: EnrollmentApi.v1_adue_session_token_settings_put ...'
      end
      # verify the required parameter 'account_driven_user_enrollment_session_token_settings' is set
      if @api_client.config.client_side_validation && account_driven_user_enrollment_session_token_settings.nil?
        fail ArgumentError, "Missing the required parameter 'account_driven_user_enrollment_session_token_settings' when calling EnrollmentApi.v1_adue_session_token_settings_put"
      end
      # resource path
      local_var_path = '/v1/adue-session-token-settings'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(account_driven_user_enrollment_session_token_settings)

      # return_type
      return_type = opts[:debug_return_type] || 'AccountDrivenUserEnrollmentSessionTokenSettings'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['Bearer']

      new_options = opts.merge(
        :operation => :"EnrollmentApi.v1_adue_session_token_settings_put",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PUT, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: EnrollmentApi#v1_adue_session_token_settings_put\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Retrieve the configured LDAP groups configured for User-Initiated Enrollment 
    # Retrieves the configured LDAP groups configured for User-Initiated Enrollment.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :page  (default to 0)
    # @option opts [Integer] :page_size  (default to 100)
    # @option opts [Array<String>] :sort Sorting criteria in the format: &#x60;property:asc/desc&#x60;. Default sort is &#x60;name:asc&#x60;. Multiple sort criteria are supported and must be separated with a comma. Example: &#x60;sort&#x3D;date:desc,name:asc&#x60;. 
    # @option opts [Boolean] :all_users_option_first Return \&quot;All LDAP Users\&quot; option on the first position if it is present in the current page (default to false)
    # @return [AccessGroupsV2SearchResults]
    def v2_enrollment_access_groups_get(opts = {})
      data, _status_code, _headers = v2_enrollment_access_groups_get_with_http_info(opts)
      data
    end

    # Retrieve the configured LDAP groups configured for User-Initiated Enrollment 
    # Retrieves the configured LDAP groups configured for User-Initiated Enrollment.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :page  (default to 0)
    # @option opts [Integer] :page_size  (default to 100)
    # @option opts [Array<String>] :sort Sorting criteria in the format: &#x60;property:asc/desc&#x60;. Default sort is &#x60;name:asc&#x60;. Multiple sort criteria are supported and must be separated with a comma. Example: &#x60;sort&#x3D;date:desc,name:asc&#x60;. 
    # @option opts [Boolean] :all_users_option_first Return \&quot;All LDAP Users\&quot; option on the first position if it is present in the current page (default to false)
    # @return [Array<(AccessGroupsV2SearchResults, Integer, Hash)>] AccessGroupsV2SearchResults data, response status code and response headers
    def v2_enrollment_access_groups_get_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: EnrollmentApi.v2_enrollment_access_groups_get ...'
      end
      # resource path
      local_var_path = '/v2/enrollment/access-groups'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'page'] = opts[:'page'] if !opts[:'page'].nil?
      query_params[:'page-size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'sort'] = @api_client.build_collection_param(opts[:'sort'], :multi) if !opts[:'sort'].nil?
      query_params[:'all-users-option-first'] = opts[:'all_users_option_first'] if !opts[:'all_users_option_first'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'AccessGroupsV2SearchResults'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['Bearer']

      new_options = opts.merge(
        :operation => :"EnrollmentApi.v2_enrollment_access_groups_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: EnrollmentApi#v2_enrollment_access_groups_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Add the configured LDAP group for User-Initiated Enrollment. 
    # Add the configured LDAP group for User-Initiated Enrollment. 
    # @param enrollment_access_group_v2 [EnrollmentAccessGroupV2] Configured LDAP group to create.
    # @param [Hash] opts the optional parameters
    # @return [HrefResponse]
    def v2_enrollment_access_groups_post(enrollment_access_group_v2, opts = {})
      data, _status_code, _headers = v2_enrollment_access_groups_post_with_http_info(enrollment_access_group_v2, opts)
      data
    end

    # Add the configured LDAP group for User-Initiated Enrollment. 
    # Add the configured LDAP group for User-Initiated Enrollment. 
    # @param enrollment_access_group_v2 [EnrollmentAccessGroupV2] Configured LDAP group to create.
    # @param [Hash] opts the optional parameters
    # @return [Array<(HrefResponse, Integer, Hash)>] HrefResponse data, response status code and response headers
    def v2_enrollment_access_groups_post_with_http_info(enrollment_access_group_v2, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: EnrollmentApi.v2_enrollment_access_groups_post ...'
      end
      # verify the required parameter 'enrollment_access_group_v2' is set
      if @api_client.config.client_side_validation && enrollment_access_group_v2.nil?
        fail ArgumentError, "Missing the required parameter 'enrollment_access_group_v2' when calling EnrollmentApi.v2_enrollment_access_groups_post"
      end
      # resource path
      local_var_path = '/v2/enrollment/access-groups'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(enrollment_access_group_v2)

      # return_type
      return_type = opts[:debug_return_type] || 'HrefResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['Bearer']

      new_options = opts.merge(
        :operation => :"EnrollmentApi.v2_enrollment_access_groups_post",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: EnrollmentApi#v2_enrollment_access_groups_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Delete an LDAP group's access to user initiated Enrollment 
    # Deletes an LDAP group's access to user initiated enrollment. The group \"All LDAP Users\" cannot be deleted, but it can be modified to disallow User-Initiated Enrollment.
    # @param server_id [String] LDAP server id
    # @param group_id [String] LDAP group id.
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def v2_enrollment_access_groups_server_id_group_id_delete(server_id, group_id, opts = {})
      v2_enrollment_access_groups_server_id_group_id_delete_with_http_info(server_id, group_id, opts)
      nil
    end

    # Delete an LDAP group&#39;s access to user initiated Enrollment 
    # Deletes an LDAP group&#39;s access to user initiated enrollment. The group \&quot;All LDAP Users\&quot; cannot be deleted, but it can be modified to disallow User-Initiated Enrollment.
    # @param server_id [String] LDAP server id
    # @param group_id [String] LDAP group id.
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def v2_enrollment_access_groups_server_id_group_id_delete_with_http_info(server_id, group_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: EnrollmentApi.v2_enrollment_access_groups_server_id_group_id_delete ...'
      end
      # verify the required parameter 'server_id' is set
      if @api_client.config.client_side_validation && server_id.nil?
        fail ArgumentError, "Missing the required parameter 'server_id' when calling EnrollmentApi.v2_enrollment_access_groups_server_id_group_id_delete"
      end
      # verify the required parameter 'group_id' is set
      if @api_client.config.client_side_validation && group_id.nil?
        fail ArgumentError, "Missing the required parameter 'group_id' when calling EnrollmentApi.v2_enrollment_access_groups_server_id_group_id_delete"
      end
      # resource path
      local_var_path = '/v2/enrollment/access-groups/{serverId}/{groupId}'.sub('{' + 'serverId' + '}', CGI.escape(server_id.to_s)).sub('{' + 'groupId' + '}', CGI.escape(group_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || ['Bearer']

      new_options = opts.merge(
        :operation => :"EnrollmentApi.v2_enrollment_access_groups_server_id_group_id_delete",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: EnrollmentApi#v2_enrollment_access_groups_server_id_group_id_delete\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Retrieve the configured LDAP groups configured for User-Initiated Enrollment 
    # Retrieves the configured LDAP groups configured for User-Initiated Enrollment.
    # @param server_id [String] LDAP server id.
    # @param group_id [String] LDAP group id.
    # @param [Hash] opts the optional parameters
    # @return [EnrollmentAccessGroupV2]
    def v2_enrollment_access_groups_server_id_group_id_get(server_id, group_id, opts = {})
      data, _status_code, _headers = v2_enrollment_access_groups_server_id_group_id_get_with_http_info(server_id, group_id, opts)
      data
    end

    # Retrieve the configured LDAP groups configured for User-Initiated Enrollment 
    # Retrieves the configured LDAP groups configured for User-Initiated Enrollment.
    # @param server_id [String] LDAP server id.
    # @param group_id [String] LDAP group id.
    # @param [Hash] opts the optional parameters
    # @return [Array<(EnrollmentAccessGroupV2, Integer, Hash)>] EnrollmentAccessGroupV2 data, response status code and response headers
    def v2_enrollment_access_groups_server_id_group_id_get_with_http_info(server_id, group_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: EnrollmentApi.v2_enrollment_access_groups_server_id_group_id_get ...'
      end
      # verify the required parameter 'server_id' is set
      if @api_client.config.client_side_validation && server_id.nil?
        fail ArgumentError, "Missing the required parameter 'server_id' when calling EnrollmentApi.v2_enrollment_access_groups_server_id_group_id_get"
      end
      # verify the required parameter 'group_id' is set
      if @api_client.config.client_side_validation && group_id.nil?
        fail ArgumentError, "Missing the required parameter 'group_id' when calling EnrollmentApi.v2_enrollment_access_groups_server_id_group_id_get"
      end
      # resource path
      local_var_path = '/v2/enrollment/access-groups/{serverId}/{groupId}'.sub('{' + 'serverId' + '}', CGI.escape(server_id.to_s)).sub('{' + 'groupId' + '}', CGI.escape(group_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'EnrollmentAccessGroupV2'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['Bearer']

      new_options = opts.merge(
        :operation => :"EnrollmentApi.v2_enrollment_access_groups_server_id_group_id_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: EnrollmentApi#v2_enrollment_access_groups_server_id_group_id_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Modify the configured LDAP groups configured for User-Initiated Enrollment 
    # Modifies the configured LDAP groups configured for User-Initiated Enrollment.
    # @param server_id [String] LDAP server id.
    # @param group_id [String] LDAP group id.
    # @param [Hash] opts the optional parameters
    # @option opts [EnrollmentAccessGroupV2] :enrollment_access_group_v2 
    # @return [EnrollmentAccessGroupV2]
    def v2_enrollment_access_groups_server_id_group_id_put(server_id, group_id, opts = {})
      data, _status_code, _headers = v2_enrollment_access_groups_server_id_group_id_put_with_http_info(server_id, group_id, opts)
      data
    end

    # Modify the configured LDAP groups configured for User-Initiated Enrollment 
    # Modifies the configured LDAP groups configured for User-Initiated Enrollment.
    # @param server_id [String] LDAP server id.
    # @param group_id [String] LDAP group id.
    # @param [Hash] opts the optional parameters
    # @option opts [EnrollmentAccessGroupV2] :enrollment_access_group_v2 
    # @return [Array<(EnrollmentAccessGroupV2, Integer, Hash)>] EnrollmentAccessGroupV2 data, response status code and response headers
    def v2_enrollment_access_groups_server_id_group_id_put_with_http_info(server_id, group_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: EnrollmentApi.v2_enrollment_access_groups_server_id_group_id_put ...'
      end
      # verify the required parameter 'server_id' is set
      if @api_client.config.client_side_validation && server_id.nil?
        fail ArgumentError, "Missing the required parameter 'server_id' when calling EnrollmentApi.v2_enrollment_access_groups_server_id_group_id_put"
      end
      # verify the required parameter 'group_id' is set
      if @api_client.config.client_side_validation && group_id.nil?
        fail ArgumentError, "Missing the required parameter 'group_id' when calling EnrollmentApi.v2_enrollment_access_groups_server_id_group_id_put"
      end
      # resource path
      local_var_path = '/v2/enrollment/access-groups/{serverId}/{groupId}'.sub('{' + 'serverId' + '}', CGI.escape(server_id.to_s)).sub('{' + 'groupId' + '}', CGI.escape(group_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(opts[:'enrollment_access_group_v2'])

      # return_type
      return_type = opts[:debug_return_type] || 'EnrollmentAccessGroupV2'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['Bearer']

      new_options = opts.merge(
        :operation => :"EnrollmentApi.v2_enrollment_access_groups_server_id_group_id_put",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PUT, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: EnrollmentApi#v2_enrollment_access_groups_server_id_group_id_put\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Retrieve the list of languages and corresponding ISO 639-1 Codes but only those not already added to Enrollment 
    # Retrieves the list of languages and corresponding ISO 639-1 Codes, but only those not already added to Enrollment.
    # @param [Hash] opts the optional parameters
    # @return [Array<LanguageCode>]
    def v2_enrollment_filtered_language_codes_get(opts = {})
      data, _status_code, _headers = v2_enrollment_filtered_language_codes_get_with_http_info(opts)
      data
    end

    # Retrieve the list of languages and corresponding ISO 639-1 Codes but only those not already added to Enrollment 
    # Retrieves the list of languages and corresponding ISO 639-1 Codes, but only those not already added to Enrollment.
    # @param [Hash] opts the optional parameters
    # @return [Array<(Array<LanguageCode>, Integer, Hash)>] Array<LanguageCode> data, response status code and response headers
    def v2_enrollment_filtered_language_codes_get_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: EnrollmentApi.v2_enrollment_filtered_language_codes_get ...'
      end
      # resource path
      local_var_path = '/v2/enrollment/filtered-language-codes'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'Array<LanguageCode>'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['Bearer']

      new_options = opts.merge(
        :operation => :"EnrollmentApi.v2_enrollment_filtered_language_codes_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: EnrollmentApi#v2_enrollment_filtered_language_codes_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get Enrollment object and Re-enrollment settings 
    # Gets Enrollment object and re-enrollment settings. The settings can be altered without providing the existing management password by providing the following value for `managementPassword`: `\\uffff\\uffff\\uffff\\uffff\\uffff\\uffff\\uffff\\uffff\\uffff\\uffff\\uffff\\uffff\\uffff\\uffff\\uffff`. 
    # @param [Hash] opts the optional parameters
    # @return [EnrollmentSettingsV2]
    def v2_enrollment_get(opts = {})
      data, _status_code, _headers = v2_enrollment_get_with_http_info(opts)
      data
    end

    # Get Enrollment object and Re-enrollment settings 
    # Gets Enrollment object and re-enrollment settings. The settings can be altered without providing the existing management password by providing the following value for &#x60;managementPassword&#x60;: &#x60;\\uffff\\uffff\\uffff\\uffff\\uffff\\uffff\\uffff\\uffff\\uffff\\uffff\\uffff\\uffff\\uffff\\uffff\\uffff&#x60;. 
    # @param [Hash] opts the optional parameters
    # @return [Array<(EnrollmentSettingsV2, Integer, Hash)>] EnrollmentSettingsV2 data, response status code and response headers
    def v2_enrollment_get_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: EnrollmentApi.v2_enrollment_get ...'
      end
      # resource path
      local_var_path = '/v2/enrollment'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'EnrollmentSettingsV2'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['Bearer']

      new_options = opts.merge(
        :operation => :"EnrollmentApi.v2_enrollment_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: EnrollmentApi#v2_enrollment_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Export enrollment history collection 
    # Export enrollment history collection 
    # @param [Hash] opts the optional parameters
    # @option opts [Array<String>] :export_fields Export fields parameter, used to change default order or ignore some of the response properties. Default is empty array, which means that all fields of the response entity will be serialized. Example: export-fields&#x3D;id,username
    # @option opts [Array<String>] :export_labels Export labels parameter, used to customize fieldnames/columns in the exported file. Default is empty array, which means that response properties names will be used. Number of the provided labels must match the number of export-fields Example: export-labels&#x3D;identifier,name with matching: export-fields&#x3D;id,username
    # @option opts [Integer] :page  (default to 0)
    # @option opts [Integer] :page_size  (default to 100)
    # @option opts [Array<String>] :sort Sorting criteria in the format: property:asc/desc. Default sort is id:desc. Multiple sort criteria are supported and must be separated with a comma. Example: sort&#x3D;id:desc,name:asc 
    # @option opts [String] :filter Query in the RSQL format, allowing to filter history notes collection. Default filter is empty query - returning all results for the requested page. Fields allowed in the query: id, name. This param can be combined with paging and sorting. Example: name&#x3D;&#x3D;\&quot;*script*\&quot; (default to '')
    # @option opts [ExportParameters] :export_parameters Optional. Override query parameters since they can make URI exceed 2,000 character limit.
    # @return [Object]
    def v2_enrollment_history_export_post(opts = {})
      data, _status_code, _headers = v2_enrollment_history_export_post_with_http_info(opts)
      data
    end

    # Export enrollment history collection 
    # Export enrollment history collection 
    # @param [Hash] opts the optional parameters
    # @option opts [Array<String>] :export_fields Export fields parameter, used to change default order or ignore some of the response properties. Default is empty array, which means that all fields of the response entity will be serialized. Example: export-fields&#x3D;id,username
    # @option opts [Array<String>] :export_labels Export labels parameter, used to customize fieldnames/columns in the exported file. Default is empty array, which means that response properties names will be used. Number of the provided labels must match the number of export-fields Example: export-labels&#x3D;identifier,name with matching: export-fields&#x3D;id,username
    # @option opts [Integer] :page  (default to 0)
    # @option opts [Integer] :page_size  (default to 100)
    # @option opts [Array<String>] :sort Sorting criteria in the format: property:asc/desc. Default sort is id:desc. Multiple sort criteria are supported and must be separated with a comma. Example: sort&#x3D;id:desc,name:asc 
    # @option opts [String] :filter Query in the RSQL format, allowing to filter history notes collection. Default filter is empty query - returning all results for the requested page. Fields allowed in the query: id, name. This param can be combined with paging and sorting. Example: name&#x3D;&#x3D;\&quot;*script*\&quot; (default to '')
    # @option opts [ExportParameters] :export_parameters Optional. Override query parameters since they can make URI exceed 2,000 character limit.
    # @return [Array<(Object, Integer, Hash)>] Object data, response status code and response headers
    def v2_enrollment_history_export_post_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: EnrollmentApi.v2_enrollment_history_export_post ...'
      end
      # resource path
      local_var_path = '/v2/enrollment/history/export'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'export-fields'] = @api_client.build_collection_param(opts[:'export_fields'], :multi) if !opts[:'export_fields'].nil?
      query_params[:'export-labels'] = @api_client.build_collection_param(opts[:'export_labels'], :multi) if !opts[:'export_labels'].nil?
      query_params[:'page'] = opts[:'page'] if !opts[:'page'].nil?
      query_params[:'page-size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'sort'] = @api_client.build_collection_param(opts[:'sort'], :multi) if !opts[:'sort'].nil?
      query_params[:'filter'] = opts[:'filter'] if !opts[:'filter'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['text/csv,application/json', 'application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(opts[:'export_parameters'])

      # return_type
      return_type = opts[:debug_return_type] || 'Object'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['Bearer']

      new_options = opts.merge(
        :operation => :"EnrollmentApi.v2_enrollment_history_export_post",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: EnrollmentApi#v2_enrollment_history_export_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get sorted and paged Enrollment history object 
    # Gets sorted and paged Enrollment history object 
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :page  (default to 0)
    # @option opts [Integer] :page_size  (default to 100)
    # @option opts [Array<String>] :sort Sorting criteria in the format: &#x60;property:asc/desc&#x60;. Default sort is &#x60;date:desc&#x60;. Multiple sort criteria are supported and must be separated with a comma. Example: &#x60;sort&#x3D;date:desc,name:asc&#x60;. 
    # @return [HistorySearchResults]
    def v2_enrollment_history_get(opts = {})
      data, _status_code, _headers = v2_enrollment_history_get_with_http_info(opts)
      data
    end

    # Get sorted and paged Enrollment history object 
    # Gets sorted and paged Enrollment history object 
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :page  (default to 0)
    # @option opts [Integer] :page_size  (default to 100)
    # @option opts [Array<String>] :sort Sorting criteria in the format: &#x60;property:asc/desc&#x60;. Default sort is &#x60;date:desc&#x60;. Multiple sort criteria are supported and must be separated with a comma. Example: &#x60;sort&#x3D;date:desc,name:asc&#x60;. 
    # @return [Array<(HistorySearchResults, Integer, Hash)>] HistorySearchResults data, response status code and response headers
    def v2_enrollment_history_get_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: EnrollmentApi.v2_enrollment_history_get ...'
      end
      # resource path
      local_var_path = '/v2/enrollment/history'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'page'] = opts[:'page'] if !opts[:'page'].nil?
      query_params[:'page-size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'sort'] = @api_client.build_collection_param(opts[:'sort'], :multi) if !opts[:'sort'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'HistorySearchResults'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['Bearer']

      new_options = opts.merge(
        :operation => :"EnrollmentApi.v2_enrollment_history_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: EnrollmentApi#v2_enrollment_history_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Add Enrollment history object notes 
    # Adds Enrollment history object notes 
    # @param object_history_note [ObjectHistoryNote] history notes to create
    # @param [Hash] opts the optional parameters
    # @return [HrefResponse]
    def v2_enrollment_history_post(object_history_note, opts = {})
      data, _status_code, _headers = v2_enrollment_history_post_with_http_info(object_history_note, opts)
      data
    end

    # Add Enrollment history object notes 
    # Adds Enrollment history object notes 
    # @param object_history_note [ObjectHistoryNote] history notes to create
    # @param [Hash] opts the optional parameters
    # @return [Array<(HrefResponse, Integer, Hash)>] HrefResponse data, response status code and response headers
    def v2_enrollment_history_post_with_http_info(object_history_note, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: EnrollmentApi.v2_enrollment_history_post ...'
      end
      # verify the required parameter 'object_history_note' is set
      if @api_client.config.client_side_validation && object_history_note.nil?
        fail ArgumentError, "Missing the required parameter 'object_history_note' when calling EnrollmentApi.v2_enrollment_history_post"
      end
      # resource path
      local_var_path = '/v2/enrollment/history'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(object_history_note)

      # return_type
      return_type = opts[:debug_return_type] || 'HrefResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['Bearer']

      new_options = opts.merge(
        :operation => :"EnrollmentApi.v2_enrollment_history_post",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: EnrollmentApi#v2_enrollment_history_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Retrieve the list of languages and corresponding ISO 639-1 Codes 
    # Retrieves the list of languages and corresponding ISO 639-1 Codes.
    # @param [Hash] opts the optional parameters
    # @return [Array<LanguageCode>]
    def v2_enrollment_language_codes_get(opts = {})
      data, _status_code, _headers = v2_enrollment_language_codes_get_with_http_info(opts)
      data
    end

    # Retrieve the list of languages and corresponding ISO 639-1 Codes 
    # Retrieves the list of languages and corresponding ISO 639-1 Codes.
    # @param [Hash] opts the optional parameters
    # @return [Array<(Array<LanguageCode>, Integer, Hash)>] Array<LanguageCode> data, response status code and response headers
    def v2_enrollment_language_codes_get_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: EnrollmentApi.v2_enrollment_language_codes_get ...'
      end
      # resource path
      local_var_path = '/v2/enrollment/language-codes'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'Array<LanguageCode>'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['Bearer']

      new_options = opts.merge(
        :operation => :"EnrollmentApi.v2_enrollment_language_codes_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: EnrollmentApi#v2_enrollment_language_codes_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Delete multiple configured languages from User-Initiated Enrollment settings 
    # Delete multiple configured languages from User-Initiated Enrollment settings
    # @param ids [Ids] ids of each language to delete
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def v2_enrollment_languages_delete_multiple_post(ids, opts = {})
      v2_enrollment_languages_delete_multiple_post_with_http_info(ids, opts)
      nil
    end

    # Delete multiple configured languages from User-Initiated Enrollment settings 
    # Delete multiple configured languages from User-Initiated Enrollment settings
    # @param ids [Ids] ids of each language to delete
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def v2_enrollment_languages_delete_multiple_post_with_http_info(ids, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: EnrollmentApi.v2_enrollment_languages_delete_multiple_post ...'
      end
      # verify the required parameter 'ids' is set
      if @api_client.config.client_side_validation && ids.nil?
        fail ArgumentError, "Missing the required parameter 'ids' when calling EnrollmentApi.v2_enrollment_languages_delete_multiple_post"
      end
      # resource path
      local_var_path = '/v2/enrollment/languages/delete-multiple'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(ids)

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || ['Bearer']

      new_options = opts.merge(
        :operation => :"EnrollmentApi.v2_enrollment_languages_delete_multiple_post",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: EnrollmentApi#v2_enrollment_languages_delete_multiple_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get an array of the language codes that have Enrollment messaging 
    # Returns an array of the language codes that have enrollment messaging currently configured.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :page  (default to 0)
    # @option opts [Integer] :page_size  (default to 100)
    # @option opts [Array<String>] :sort Sorting criteria in the format: property:asc/desc. Default sort is &#x60;languageCode:asc&#x60;. Multiple sort criteria are supported and must be separated with a comma. Example: &#x60;sort&#x3D;date:desc,name:asc&#x60;. 
    # @return [ProcessTextsSearchResults]
    def v2_enrollment_languages_get(opts = {})
      data, _status_code, _headers = v2_enrollment_languages_get_with_http_info(opts)
      data
    end

    # Get an array of the language codes that have Enrollment messaging 
    # Returns an array of the language codes that have enrollment messaging currently configured.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :page  (default to 0)
    # @option opts [Integer] :page_size  (default to 100)
    # @option opts [Array<String>] :sort Sorting criteria in the format: property:asc/desc. Default sort is &#x60;languageCode:asc&#x60;. Multiple sort criteria are supported and must be separated with a comma. Example: &#x60;sort&#x3D;date:desc,name:asc&#x60;. 
    # @return [Array<(ProcessTextsSearchResults, Integer, Hash)>] ProcessTextsSearchResults data, response status code and response headers
    def v2_enrollment_languages_get_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: EnrollmentApi.v2_enrollment_languages_get ...'
      end
      # resource path
      local_var_path = '/v2/enrollment/languages'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'page'] = opts[:'page'] if !opts[:'page'].nil?
      query_params[:'page-size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'sort'] = @api_client.build_collection_param(opts[:'sort'], :multi) if !opts[:'sort'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ProcessTextsSearchResults'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['Bearer']

      new_options = opts.merge(
        :operation => :"EnrollmentApi.v2_enrollment_languages_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: EnrollmentApi#v2_enrollment_languages_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Delete the Enrollment messaging for a language 
    # Delete the enrollment messaging for a language.
    # @param language_id [String] Two letter ISO 639-1 Language Code
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def v2_enrollment_languages_language_id_delete(language_id, opts = {})
      v2_enrollment_languages_language_id_delete_with_http_info(language_id, opts)
      nil
    end

    # Delete the Enrollment messaging for a language 
    # Delete the enrollment messaging for a language.
    # @param language_id [String] Two letter ISO 639-1 Language Code
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def v2_enrollment_languages_language_id_delete_with_http_info(language_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: EnrollmentApi.v2_enrollment_languages_language_id_delete ...'
      end
      # verify the required parameter 'language_id' is set
      if @api_client.config.client_side_validation && language_id.nil?
        fail ArgumentError, "Missing the required parameter 'language_id' when calling EnrollmentApi.v2_enrollment_languages_language_id_delete"
      end
      # resource path
      local_var_path = '/v2/enrollment/languages/{languageId}'.sub('{' + 'languageId' + '}', CGI.escape(language_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || ['Bearer']

      new_options = opts.merge(
        :operation => :"EnrollmentApi.v2_enrollment_languages_language_id_delete",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: EnrollmentApi#v2_enrollment_languages_language_id_delete\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Retrieve the Enrollment messaging for a language 
    # Retrieves the enrollment messaging for a language.
    # @param language_id [String] Two letter ISO 639-1 Language Code
    # @param [Hash] opts the optional parameters
    # @return [EnrollmentProcessTextObject]
    def v2_enrollment_languages_language_id_get(language_id, opts = {})
      data, _status_code, _headers = v2_enrollment_languages_language_id_get_with_http_info(language_id, opts)
      data
    end

    # Retrieve the Enrollment messaging for a language 
    # Retrieves the enrollment messaging for a language.
    # @param language_id [String] Two letter ISO 639-1 Language Code
    # @param [Hash] opts the optional parameters
    # @return [Array<(EnrollmentProcessTextObject, Integer, Hash)>] EnrollmentProcessTextObject data, response status code and response headers
    def v2_enrollment_languages_language_id_get_with_http_info(language_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: EnrollmentApi.v2_enrollment_languages_language_id_get ...'
      end
      # verify the required parameter 'language_id' is set
      if @api_client.config.client_side_validation && language_id.nil?
        fail ArgumentError, "Missing the required parameter 'language_id' when calling EnrollmentApi.v2_enrollment_languages_language_id_get"
      end
      # resource path
      local_var_path = '/v2/enrollment/languages/{languageId}'.sub('{' + 'languageId' + '}', CGI.escape(language_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'EnrollmentProcessTextObject'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['Bearer']

      new_options = opts.merge(
        :operation => :"EnrollmentApi.v2_enrollment_languages_language_id_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: EnrollmentApi#v2_enrollment_languages_language_id_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Edit Enrollment messaging for a language 
    # Edit enrollment messaging for a language.
    # @param language_id [String] Two letter ISO 639-1 Language Code
    # @param [Hash] opts the optional parameters
    # @option opts [EnrollmentProcessTextObject] :enrollment_process_text_object 
    # @return [EnrollmentProcessTextObject]
    def v2_enrollment_languages_language_id_put(language_id, opts = {})
      data, _status_code, _headers = v2_enrollment_languages_language_id_put_with_http_info(language_id, opts)
      data
    end

    # Edit Enrollment messaging for a language 
    # Edit enrollment messaging for a language.
    # @param language_id [String] Two letter ISO 639-1 Language Code
    # @param [Hash] opts the optional parameters
    # @option opts [EnrollmentProcessTextObject] :enrollment_process_text_object 
    # @return [Array<(EnrollmentProcessTextObject, Integer, Hash)>] EnrollmentProcessTextObject data, response status code and response headers
    def v2_enrollment_languages_language_id_put_with_http_info(language_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: EnrollmentApi.v2_enrollment_languages_language_id_put ...'
      end
      # verify the required parameter 'language_id' is set
      if @api_client.config.client_side_validation && language_id.nil?
        fail ArgumentError, "Missing the required parameter 'language_id' when calling EnrollmentApi.v2_enrollment_languages_language_id_put"
      end
      # resource path
      local_var_path = '/v2/enrollment/languages/{languageId}'.sub('{' + 'languageId' + '}', CGI.escape(language_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(opts[:'enrollment_process_text_object'])

      # return_type
      return_type = opts[:debug_return_type] || 'EnrollmentProcessTextObject'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['Bearer']

      new_options = opts.merge(
        :operation => :"EnrollmentApi.v2_enrollment_languages_language_id_put",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PUT, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: EnrollmentApi#v2_enrollment_languages_language_id_put\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Update Enrollment object 
    # Update enrollment object. Regarding the `developerCertificateIdentity`, if this object is omitted, the certificate will not be deleted from Jamf Pro. The `identityKeystore` is the entire cert file as a base64 encoded string. The `md5Sum` field is not required in the PUT request, but is calculated and returned in the response. 
    # @param enrollment_settings_v2 [EnrollmentSettingsV2] Update enrollment
    # @param [Hash] opts the optional parameters
    # @return [EnrollmentSettingsV2]
    def v2_enrollment_put(enrollment_settings_v2, opts = {})
      data, _status_code, _headers = v2_enrollment_put_with_http_info(enrollment_settings_v2, opts)
      data
    end

    # Update Enrollment object 
    # Update enrollment object. Regarding the &#x60;developerCertificateIdentity&#x60;, if this object is omitted, the certificate will not be deleted from Jamf Pro. The &#x60;identityKeystore&#x60; is the entire cert file as a base64 encoded string. The &#x60;md5Sum&#x60; field is not required in the PUT request, but is calculated and returned in the response. 
    # @param enrollment_settings_v2 [EnrollmentSettingsV2] Update enrollment
    # @param [Hash] opts the optional parameters
    # @return [Array<(EnrollmentSettingsV2, Integer, Hash)>] EnrollmentSettingsV2 data, response status code and response headers
    def v2_enrollment_put_with_http_info(enrollment_settings_v2, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: EnrollmentApi.v2_enrollment_put ...'
      end
      # verify the required parameter 'enrollment_settings_v2' is set
      if @api_client.config.client_side_validation && enrollment_settings_v2.nil?
        fail ArgumentError, "Missing the required parameter 'enrollment_settings_v2' when calling EnrollmentApi.v2_enrollment_put"
      end
      # resource path
      local_var_path = '/v2/enrollment'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(enrollment_settings_v2)

      # return_type
      return_type = opts[:debug_return_type] || 'EnrollmentSettingsV2'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['Bearer']

      new_options = opts.merge(
        :operation => :"EnrollmentApi.v2_enrollment_put",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PUT, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: EnrollmentApi#v2_enrollment_put\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Retrieve the configured LDAP groups configured for User-Initiated Enrollment. 
    # Retrieves the configured LDAP groups configured for User-Initiated Enrollment. 
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :page  (default to 0)
    # @option opts [Integer] :page_size  (default to 100)
    # @option opts [Array<String>] :sort Sorting criteria in the format: &#x60;property:asc/desc&#x60;. Default sort is &#x60;name:asc&#x60;. Multiple sort criteria are supported and must be separated with a comma. Example: &#x60;sort&#x3D;date:desc,name:asc&#x60;. 
    # @option opts [Boolean] :all_users_option_first Return \&quot;All LDAP Users\&quot; option on the first position if it is present in the current page (default to false)
    # @return [AccessGroupsPreviewSearchResults]
    def v3_enrollment_access_groups_get(opts = {})
      data, _status_code, _headers = v3_enrollment_access_groups_get_with_http_info(opts)
      data
    end

    # Retrieve the configured LDAP groups configured for User-Initiated Enrollment. 
    # Retrieves the configured LDAP groups configured for User-Initiated Enrollment. 
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :page  (default to 0)
    # @option opts [Integer] :page_size  (default to 100)
    # @option opts [Array<String>] :sort Sorting criteria in the format: &#x60;property:asc/desc&#x60;. Default sort is &#x60;name:asc&#x60;. Multiple sort criteria are supported and must be separated with a comma. Example: &#x60;sort&#x3D;date:desc,name:asc&#x60;. 
    # @option opts [Boolean] :all_users_option_first Return \&quot;All LDAP Users\&quot; option on the first position if it is present in the current page (default to false)
    # @return [Array<(AccessGroupsPreviewSearchResults, Integer, Hash)>] AccessGroupsPreviewSearchResults data, response status code and response headers
    def v3_enrollment_access_groups_get_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: EnrollmentApi.v3_enrollment_access_groups_get ...'
      end
      # resource path
      local_var_path = '/v3/enrollment/access-groups'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'page'] = opts[:'page'] if !opts[:'page'].nil?
      query_params[:'page-size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'sort'] = @api_client.build_collection_param(opts[:'sort'], :multi) if !opts[:'sort'].nil?
      query_params[:'all-users-option-first'] = opts[:'all_users_option_first'] if !opts[:'all_users_option_first'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'AccessGroupsPreviewSearchResults'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['Bearer']

      new_options = opts.merge(
        :operation => :"EnrollmentApi.v3_enrollment_access_groups_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: EnrollmentApi#v3_enrollment_access_groups_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Delete an LDAP group's access to user initiated Enrollment. 
    # Deletes an LDAP group's access to user initiated enrollment. The group \"All LDAP Users\" cannot be deleted, but it can be modified to disallow User-Initiated Enrollment.
    # @param id [String] Autogenerated Access Group ID.
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def v3_enrollment_access_groups_id_delete(id, opts = {})
      v3_enrollment_access_groups_id_delete_with_http_info(id, opts)
      nil
    end

    # Delete an LDAP group&#39;s access to user initiated Enrollment. 
    # Deletes an LDAP group&#39;s access to user initiated enrollment. The group \&quot;All LDAP Users\&quot; cannot be deleted, but it can be modified to disallow User-Initiated Enrollment.
    # @param id [String] Autogenerated Access Group ID.
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def v3_enrollment_access_groups_id_delete_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: EnrollmentApi.v3_enrollment_access_groups_id_delete ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling EnrollmentApi.v3_enrollment_access_groups_id_delete"
      end
      # resource path
      local_var_path = '/v3/enrollment/access-groups/{id}'.sub('{' + 'id' + '}', CGI.escape(id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || ['Bearer']

      new_options = opts.merge(
        :operation => :"EnrollmentApi.v3_enrollment_access_groups_id_delete",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: EnrollmentApi#v3_enrollment_access_groups_id_delete\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Retrieve the configured LDAP groups configured for User-Initiated Enrollment 
    # Retrieves the configured LDAP groups configured for User-Initiated Enrollment.
    # @param id [String] Autogenerated Access Group ID.
    # @param [Hash] opts the optional parameters
    # @return [EnrollmentAccessGroupPreview]
    def v3_enrollment_access_groups_id_get(id, opts = {})
      data, _status_code, _headers = v3_enrollment_access_groups_id_get_with_http_info(id, opts)
      data
    end

    # Retrieve the configured LDAP groups configured for User-Initiated Enrollment 
    # Retrieves the configured LDAP groups configured for User-Initiated Enrollment.
    # @param id [String] Autogenerated Access Group ID.
    # @param [Hash] opts the optional parameters
    # @return [Array<(EnrollmentAccessGroupPreview, Integer, Hash)>] EnrollmentAccessGroupPreview data, response status code and response headers
    def v3_enrollment_access_groups_id_get_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: EnrollmentApi.v3_enrollment_access_groups_id_get ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling EnrollmentApi.v3_enrollment_access_groups_id_get"
      end
      # resource path
      local_var_path = '/v3/enrollment/access-groups/{id}'.sub('{' + 'id' + '}', CGI.escape(id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'EnrollmentAccessGroupPreview'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['Bearer']

      new_options = opts.merge(
        :operation => :"EnrollmentApi.v3_enrollment_access_groups_id_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: EnrollmentApi#v3_enrollment_access_groups_id_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Modify the configured LDAP groups configured for User-Initiated Enrollment. Only exiting Access Groups can be updated. 
    # Modify the configured LDAP groups configured for User-Initiated Enrollment. Only exiting Access Groups can be updated. 
    # @param id [String] Autogenerated Access Group ID.
    # @param enrollment_access_group_preview [EnrollmentAccessGroupPreview] 
    # @param [Hash] opts the optional parameters
    # @return [EnrollmentAccessGroupPreview]
    def v3_enrollment_access_groups_id_put(id, enrollment_access_group_preview, opts = {})
      data, _status_code, _headers = v3_enrollment_access_groups_id_put_with_http_info(id, enrollment_access_group_preview, opts)
      data
    end

    # Modify the configured LDAP groups configured for User-Initiated Enrollment. Only exiting Access Groups can be updated. 
    # Modify the configured LDAP groups configured for User-Initiated Enrollment. Only exiting Access Groups can be updated. 
    # @param id [String] Autogenerated Access Group ID.
    # @param enrollment_access_group_preview [EnrollmentAccessGroupPreview] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(EnrollmentAccessGroupPreview, Integer, Hash)>] EnrollmentAccessGroupPreview data, response status code and response headers
    def v3_enrollment_access_groups_id_put_with_http_info(id, enrollment_access_group_preview, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: EnrollmentApi.v3_enrollment_access_groups_id_put ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling EnrollmentApi.v3_enrollment_access_groups_id_put"
      end
      # verify the required parameter 'enrollment_access_group_preview' is set
      if @api_client.config.client_side_validation && enrollment_access_group_preview.nil?
        fail ArgumentError, "Missing the required parameter 'enrollment_access_group_preview' when calling EnrollmentApi.v3_enrollment_access_groups_id_put"
      end
      # resource path
      local_var_path = '/v3/enrollment/access-groups/{id}'.sub('{' + 'id' + '}', CGI.escape(id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(enrollment_access_group_preview)

      # return_type
      return_type = opts[:debug_return_type] || 'EnrollmentAccessGroupPreview'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['Bearer']

      new_options = opts.merge(
        :operation => :"EnrollmentApi.v3_enrollment_access_groups_id_put",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PUT, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: EnrollmentApi#v3_enrollment_access_groups_id_put\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Add the configured LDAP group for User-Initiated Enrollment. 
    # Add the configured LDAP group for User-Initiated Enrollment. 
    # @param enrollment_access_group_preview [EnrollmentAccessGroupPreview] Configured LDAP group to create.
    # @param [Hash] opts the optional parameters
    # @return [HrefResponse]
    def v3_enrollment_access_groups_post(enrollment_access_group_preview, opts = {})
      data, _status_code, _headers = v3_enrollment_access_groups_post_with_http_info(enrollment_access_group_preview, opts)
      data
    end

    # Add the configured LDAP group for User-Initiated Enrollment. 
    # Add the configured LDAP group for User-Initiated Enrollment. 
    # @param enrollment_access_group_preview [EnrollmentAccessGroupPreview] Configured LDAP group to create.
    # @param [Hash] opts the optional parameters
    # @return [Array<(HrefResponse, Integer, Hash)>] HrefResponse data, response status code and response headers
    def v3_enrollment_access_groups_post_with_http_info(enrollment_access_group_preview, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: EnrollmentApi.v3_enrollment_access_groups_post ...'
      end
      # verify the required parameter 'enrollment_access_group_preview' is set
      if @api_client.config.client_side_validation && enrollment_access_group_preview.nil?
        fail ArgumentError, "Missing the required parameter 'enrollment_access_group_preview' when calling EnrollmentApi.v3_enrollment_access_groups_post"
      end
      # resource path
      local_var_path = '/v3/enrollment/access-groups'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(enrollment_access_group_preview)

      # return_type
      return_type = opts[:debug_return_type] || 'HrefResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['Bearer']

      new_options = opts.merge(
        :operation => :"EnrollmentApi.v3_enrollment_access_groups_post",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: EnrollmentApi#v3_enrollment_access_groups_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Retrieve the list of languages and corresponding ISO 639-1 Codes but only those not already added to Enrollment 
    # Retrieves the list of languages and corresponding ISO 639-1 Codes, but only those not already added to Enrollment.
    # @param [Hash] opts the optional parameters
    # @return [Array<LanguageCode>]
    def v3_enrollment_filtered_language_codes_get(opts = {})
      data, _status_code, _headers = v3_enrollment_filtered_language_codes_get_with_http_info(opts)
      data
    end

    # Retrieve the list of languages and corresponding ISO 639-1 Codes but only those not already added to Enrollment 
    # Retrieves the list of languages and corresponding ISO 639-1 Codes, but only those not already added to Enrollment.
    # @param [Hash] opts the optional parameters
    # @return [Array<(Array<LanguageCode>, Integer, Hash)>] Array<LanguageCode> data, response status code and response headers
    def v3_enrollment_filtered_language_codes_get_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: EnrollmentApi.v3_enrollment_filtered_language_codes_get ...'
      end
      # resource path
      local_var_path = '/v3/enrollment/filtered-language-codes'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'Array<LanguageCode>'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['Bearer']

      new_options = opts.merge(
        :operation => :"EnrollmentApi.v3_enrollment_filtered_language_codes_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: EnrollmentApi#v3_enrollment_filtered_language_codes_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Retrieve the list of languages and corresponding ISO 639-1 Codes 
    # Retrieves the list of languages and corresponding ISO 639-1 Codes.
    # @param [Hash] opts the optional parameters
    # @return [Array<LanguageCode>]
    def v3_enrollment_language_codes_get(opts = {})
      data, _status_code, _headers = v3_enrollment_language_codes_get_with_http_info(opts)
      data
    end

    # Retrieve the list of languages and corresponding ISO 639-1 Codes 
    # Retrieves the list of languages and corresponding ISO 639-1 Codes.
    # @param [Hash] opts the optional parameters
    # @return [Array<(Array<LanguageCode>, Integer, Hash)>] Array<LanguageCode> data, response status code and response headers
    def v3_enrollment_language_codes_get_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: EnrollmentApi.v3_enrollment_language_codes_get ...'
      end
      # resource path
      local_var_path = '/v3/enrollment/language-codes'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'Array<LanguageCode>'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['Bearer']

      new_options = opts.merge(
        :operation => :"EnrollmentApi.v3_enrollment_language_codes_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: EnrollmentApi#v3_enrollment_language_codes_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Delete multiple configured languages from User-Initiated Enrollment settings 
    # Delete multiple configured languages from User-Initiated Enrollment settings
    # @param ids [Ids] ids of each language to delete
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def v3_enrollment_languages_delete_multiple_post(ids, opts = {})
      v3_enrollment_languages_delete_multiple_post_with_http_info(ids, opts)
      nil
    end

    # Delete multiple configured languages from User-Initiated Enrollment settings 
    # Delete multiple configured languages from User-Initiated Enrollment settings
    # @param ids [Ids] ids of each language to delete
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def v3_enrollment_languages_delete_multiple_post_with_http_info(ids, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: EnrollmentApi.v3_enrollment_languages_delete_multiple_post ...'
      end
      # verify the required parameter 'ids' is set
      if @api_client.config.client_side_validation && ids.nil?
        fail ArgumentError, "Missing the required parameter 'ids' when calling EnrollmentApi.v3_enrollment_languages_delete_multiple_post"
      end
      # resource path
      local_var_path = '/v3/enrollment/languages/delete-multiple'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(ids)

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || ['Bearer']

      new_options = opts.merge(
        :operation => :"EnrollmentApi.v3_enrollment_languages_delete_multiple_post",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: EnrollmentApi#v3_enrollment_languages_delete_multiple_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get an array of the language codes that have Enrollment messaging 
    # Returns an array of the language codes that have enrollment messaging currently configured.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :page  (default to 0)
    # @option opts [Integer] :page_size  (default to 100)
    # @option opts [Array<String>] :sort Sorting criteria in the format: property:asc/desc. Default sort is &#x60;languageCode:asc&#x60;. Multiple sort criteria are supported and must be separated with a comma. Example: &#x60;sort&#x3D;date:desc,name:asc&#x60;. 
    # @return [ProcessTextsSearchResults]
    def v3_enrollment_languages_get(opts = {})
      data, _status_code, _headers = v3_enrollment_languages_get_with_http_info(opts)
      data
    end

    # Get an array of the language codes that have Enrollment messaging 
    # Returns an array of the language codes that have enrollment messaging currently configured.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :page  (default to 0)
    # @option opts [Integer] :page_size  (default to 100)
    # @option opts [Array<String>] :sort Sorting criteria in the format: property:asc/desc. Default sort is &#x60;languageCode:asc&#x60;. Multiple sort criteria are supported and must be separated with a comma. Example: &#x60;sort&#x3D;date:desc,name:asc&#x60;. 
    # @return [Array<(ProcessTextsSearchResults, Integer, Hash)>] ProcessTextsSearchResults data, response status code and response headers
    def v3_enrollment_languages_get_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: EnrollmentApi.v3_enrollment_languages_get ...'
      end
      # resource path
      local_var_path = '/v3/enrollment/languages'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'page'] = opts[:'page'] if !opts[:'page'].nil?
      query_params[:'page-size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'sort'] = @api_client.build_collection_param(opts[:'sort'], :multi) if !opts[:'sort'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ProcessTextsSearchResults'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['Bearer']

      new_options = opts.merge(
        :operation => :"EnrollmentApi.v3_enrollment_languages_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: EnrollmentApi#v3_enrollment_languages_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Delete the Enrollment messaging for a language 
    # Delete the enrollment messaging for a language.
    # @param language_id [String] Two letter ISO 639-1 Language Code
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def v3_enrollment_languages_language_id_delete(language_id, opts = {})
      v3_enrollment_languages_language_id_delete_with_http_info(language_id, opts)
      nil
    end

    # Delete the Enrollment messaging for a language 
    # Delete the enrollment messaging for a language.
    # @param language_id [String] Two letter ISO 639-1 Language Code
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def v3_enrollment_languages_language_id_delete_with_http_info(language_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: EnrollmentApi.v3_enrollment_languages_language_id_delete ...'
      end
      # verify the required parameter 'language_id' is set
      if @api_client.config.client_side_validation && language_id.nil?
        fail ArgumentError, "Missing the required parameter 'language_id' when calling EnrollmentApi.v3_enrollment_languages_language_id_delete"
      end
      # resource path
      local_var_path = '/v3/enrollment/languages/{languageId}'.sub('{' + 'languageId' + '}', CGI.escape(language_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || ['Bearer']

      new_options = opts.merge(
        :operation => :"EnrollmentApi.v3_enrollment_languages_language_id_delete",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: EnrollmentApi#v3_enrollment_languages_language_id_delete\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Retrieve the Enrollment messaging for a language 
    # Retrieves the enrollment messaging for a language.
    # @param language_id [String] Two letter ISO 639-1 Language Code
    # @param [Hash] opts the optional parameters
    # @return [EnrollmentProcessTextObject]
    def v3_enrollment_languages_language_id_get(language_id, opts = {})
      data, _status_code, _headers = v3_enrollment_languages_language_id_get_with_http_info(language_id, opts)
      data
    end

    # Retrieve the Enrollment messaging for a language 
    # Retrieves the enrollment messaging for a language.
    # @param language_id [String] Two letter ISO 639-1 Language Code
    # @param [Hash] opts the optional parameters
    # @return [Array<(EnrollmentProcessTextObject, Integer, Hash)>] EnrollmentProcessTextObject data, response status code and response headers
    def v3_enrollment_languages_language_id_get_with_http_info(language_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: EnrollmentApi.v3_enrollment_languages_language_id_get ...'
      end
      # verify the required parameter 'language_id' is set
      if @api_client.config.client_side_validation && language_id.nil?
        fail ArgumentError, "Missing the required parameter 'language_id' when calling EnrollmentApi.v3_enrollment_languages_language_id_get"
      end
      # resource path
      local_var_path = '/v3/enrollment/languages/{languageId}'.sub('{' + 'languageId' + '}', CGI.escape(language_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'EnrollmentProcessTextObject'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['Bearer']

      new_options = opts.merge(
        :operation => :"EnrollmentApi.v3_enrollment_languages_language_id_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: EnrollmentApi#v3_enrollment_languages_language_id_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Edit Enrollment messaging for a language 
    # Edit enrollment messaging for a language.
    # @param language_id [String] Two letter ISO 639-1 Language Code
    # @param [Hash] opts the optional parameters
    # @option opts [EnrollmentProcessTextObject] :enrollment_process_text_object 
    # @return [EnrollmentProcessTextObject]
    def v3_enrollment_languages_language_id_put(language_id, opts = {})
      data, _status_code, _headers = v3_enrollment_languages_language_id_put_with_http_info(language_id, opts)
      data
    end

    # Edit Enrollment messaging for a language 
    # Edit enrollment messaging for a language.
    # @param language_id [String] Two letter ISO 639-1 Language Code
    # @param [Hash] opts the optional parameters
    # @option opts [EnrollmentProcessTextObject] :enrollment_process_text_object 
    # @return [Array<(EnrollmentProcessTextObject, Integer, Hash)>] EnrollmentProcessTextObject data, response status code and response headers
    def v3_enrollment_languages_language_id_put_with_http_info(language_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: EnrollmentApi.v3_enrollment_languages_language_id_put ...'
      end
      # verify the required parameter 'language_id' is set
      if @api_client.config.client_side_validation && language_id.nil?
        fail ArgumentError, "Missing the required parameter 'language_id' when calling EnrollmentApi.v3_enrollment_languages_language_id_put"
      end
      # resource path
      local_var_path = '/v3/enrollment/languages/{languageId}'.sub('{' + 'languageId' + '}', CGI.escape(language_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(opts[:'enrollment_process_text_object'])

      # return_type
      return_type = opts[:debug_return_type] || 'EnrollmentProcessTextObject'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['Bearer']

      new_options = opts.merge(
        :operation => :"EnrollmentApi.v3_enrollment_languages_language_id_put",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PUT, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: EnrollmentApi#v3_enrollment_languages_language_id_put\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
