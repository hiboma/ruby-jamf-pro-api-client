=begin
#Jamf Pro API

### Overview The Jamf Pro API is a RESTful API for Jamf Pro built to enable consistent and efficient programmatic access to Jamf Pro.<br/><br/> The swagger schema can be found [here](/api/schema/). 

The version of the OpenAPI document: production

Generated by: https://openapi-generator.tech
OpenAPI Generator version: 6.1.0-SNAPSHOT

=end

require 'cgi'

module JamfPro
  class CloudLdapApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Validate keystore for Cloud Identity Provider secure connection
    # Validate keystore for Cloud Identity Provider secure connection
    # @param cloud_ldap_keystore_file [CloudLdapKeystoreFile] 
    # @param [Hash] opts the optional parameters
    # @return [CloudLdapKeystore]
    def v1_ldap_keystore_verify_post(cloud_ldap_keystore_file, opts = {})
      data, _status_code, _headers = v1_ldap_keystore_verify_post_with_http_info(cloud_ldap_keystore_file, opts)
      data
    end

    # Validate keystore for Cloud Identity Provider secure connection
    # Validate keystore for Cloud Identity Provider secure connection
    # @param cloud_ldap_keystore_file [CloudLdapKeystoreFile] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(CloudLdapKeystore, Integer, Hash)>] CloudLdapKeystore data, response status code and response headers
    def v1_ldap_keystore_verify_post_with_http_info(cloud_ldap_keystore_file, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: CloudLdapApi.v1_ldap_keystore_verify_post ...'
      end
      # verify the required parameter 'cloud_ldap_keystore_file' is set
      if @api_client.config.client_side_validation && cloud_ldap_keystore_file.nil?
        fail ArgumentError, "Missing the required parameter 'cloud_ldap_keystore_file' when calling CloudLdapApi.v1_ldap_keystore_verify_post"
      end
      # resource path
      local_var_path = '/v1/ldap-keystore/verify'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(cloud_ldap_keystore_file)

      # return_type
      return_type = opts[:debug_return_type] || 'CloudLdapKeystore'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['Bearer']

      new_options = opts.merge(
        :operation => :"CloudLdapApi.v1_ldap_keystore_verify_post",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CloudLdapApi#v1_ldap_keystore_verify_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get default mappings
    # Get default mappings for Cloud Identity Provider Provider.
    # @param provider [String] Cloud Identity Provider name
    # @param [Hash] opts the optional parameters
    # @return [CloudLdapMappingsResponse]
    def v2_cloud_ldaps_defaults_provider_mappings_get(provider, opts = {})
      data, _status_code, _headers = v2_cloud_ldaps_defaults_provider_mappings_get_with_http_info(provider, opts)
      data
    end

    # Get default mappings
    # Get default mappings for Cloud Identity Provider Provider.
    # @param provider [String] Cloud Identity Provider name
    # @param [Hash] opts the optional parameters
    # @return [Array<(CloudLdapMappingsResponse, Integer, Hash)>] CloudLdapMappingsResponse data, response status code and response headers
    def v2_cloud_ldaps_defaults_provider_mappings_get_with_http_info(provider, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: CloudLdapApi.v2_cloud_ldaps_defaults_provider_mappings_get ...'
      end
      # verify the required parameter 'provider' is set
      if @api_client.config.client_side_validation && provider.nil?
        fail ArgumentError, "Missing the required parameter 'provider' when calling CloudLdapApi.v2_cloud_ldaps_defaults_provider_mappings_get"
      end
      # resource path
      local_var_path = '/v2/cloud-ldaps/defaults/{provider}/mappings'.sub('{' + 'provider' + '}', CGI.escape(provider.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'CloudLdapMappingsResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['Bearer']

      new_options = opts.merge(
        :operation => :"CloudLdapApi.v2_cloud_ldaps_defaults_provider_mappings_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CloudLdapApi#v2_cloud_ldaps_defaults_provider_mappings_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get default server configuration
    # Get default server configuration for Cloud Identity Provider Identity Provider.
    # @param provider [String] Cloud Identity Provider name
    # @param [Hash] opts the optional parameters
    # @return [CloudLdapServerResponse]
    def v2_cloud_ldaps_defaults_provider_server_configuration_get(provider, opts = {})
      data, _status_code, _headers = v2_cloud_ldaps_defaults_provider_server_configuration_get_with_http_info(provider, opts)
      data
    end

    # Get default server configuration
    # Get default server configuration for Cloud Identity Provider Identity Provider.
    # @param provider [String] Cloud Identity Provider name
    # @param [Hash] opts the optional parameters
    # @return [Array<(CloudLdapServerResponse, Integer, Hash)>] CloudLdapServerResponse data, response status code and response headers
    def v2_cloud_ldaps_defaults_provider_server_configuration_get_with_http_info(provider, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: CloudLdapApi.v2_cloud_ldaps_defaults_provider_server_configuration_get ...'
      end
      # verify the required parameter 'provider' is set
      if @api_client.config.client_side_validation && provider.nil?
        fail ArgumentError, "Missing the required parameter 'provider' when calling CloudLdapApi.v2_cloud_ldaps_defaults_provider_server_configuration_get"
      end
      # resource path
      local_var_path = '/v2/cloud-ldaps/defaults/{provider}/server-configuration'.sub('{' + 'provider' + '}', CGI.escape(provider.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'CloudLdapServerResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['Bearer']

      new_options = opts.merge(
        :operation => :"CloudLdapApi.v2_cloud_ldaps_defaults_provider_server_configuration_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CloudLdapApi#v2_cloud_ldaps_defaults_provider_server_configuration_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get bind connection pool statistics
    # Get all search connection pool for chosen Cloud Identity Provider. numConnectionsClosedDefunct - The number of connections that have been closed as defunct. numConnectionsClosedExpired - The number of connections that have been closed because they were expired. numConnectionsClosedUnneeded - The number of connections that have been closed because they were no longer needed. numFailedCheckouts - The number of failed attempts to check out a connection from the pool. numFailedConnectionAttempts - The number of failed attempts to create a connection for use in the pool. numReleasedValid - The number of valid connections released back to the pool. numSuccessfulCheckouts - The number of successful attempts to check out a connection from the pool. numSuccessfulCheckoutsNewConnection - The number of successful checkout attempts that had to create a new connection because none were available. numSuccessfulConnectionAttempts - The number successful attempts to create a connection for use in the pool. maximumAvailableConnections - The maximum number of connections that may be available in the pool at any time. numSuccessfulCheckoutsWithoutWait - The number of successful checkout attempts that were able to take an existing connection without waiting. numSuccessfulCheckoutsAfterWait - The number of successful checkout attempts that retrieved a connection from the pool after waiting for it to become available. numAvailableConnections - The number of connections currently available for use in the pool. 
    # @param id [String] Cloud Identity Provider identifier
    # @param [Hash] opts the optional parameters
    # @return [CloudLdapConnectionPoolStatistics]
    def v2_cloud_ldaps_id_connection_bind_get(id, opts = {})
      data, _status_code, _headers = v2_cloud_ldaps_id_connection_bind_get_with_http_info(id, opts)
      data
    end

    # Get bind connection pool statistics
    # Get all search connection pool for chosen Cloud Identity Provider. numConnectionsClosedDefunct - The number of connections that have been closed as defunct. numConnectionsClosedExpired - The number of connections that have been closed because they were expired. numConnectionsClosedUnneeded - The number of connections that have been closed because they were no longer needed. numFailedCheckouts - The number of failed attempts to check out a connection from the pool. numFailedConnectionAttempts - The number of failed attempts to create a connection for use in the pool. numReleasedValid - The number of valid connections released back to the pool. numSuccessfulCheckouts - The number of successful attempts to check out a connection from the pool. numSuccessfulCheckoutsNewConnection - The number of successful checkout attempts that had to create a new connection because none were available. numSuccessfulConnectionAttempts - The number successful attempts to create a connection for use in the pool. maximumAvailableConnections - The maximum number of connections that may be available in the pool at any time. numSuccessfulCheckoutsWithoutWait - The number of successful checkout attempts that were able to take an existing connection without waiting. numSuccessfulCheckoutsAfterWait - The number of successful checkout attempts that retrieved a connection from the pool after waiting for it to become available. numAvailableConnections - The number of connections currently available for use in the pool. 
    # @param id [String] Cloud Identity Provider identifier
    # @param [Hash] opts the optional parameters
    # @return [Array<(CloudLdapConnectionPoolStatistics, Integer, Hash)>] CloudLdapConnectionPoolStatistics data, response status code and response headers
    def v2_cloud_ldaps_id_connection_bind_get_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: CloudLdapApi.v2_cloud_ldaps_id_connection_bind_get ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling CloudLdapApi.v2_cloud_ldaps_id_connection_bind_get"
      end
      # resource path
      local_var_path = '/v2/cloud-ldaps/{id}/connection/bind'.sub('{' + 'id' + '}', CGI.escape(id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'CloudLdapConnectionPoolStatistics'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['Bearer']

      new_options = opts.merge(
        :operation => :"CloudLdapApi.v2_cloud_ldaps_id_connection_bind_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CloudLdapApi#v2_cloud_ldaps_id_connection_bind_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get search connection pool statistics
    # Get all search connection pool for chosen Cloud Identity Provider. numConnectionsClosedDefunct - The number of connections that have been closed as defunct. numConnectionsClosedExpired - The number of connections that have been closed because they were expired. numConnectionsClosedUnneeded - The number of connections that have been closed because they were no longer needed. numFailedCheckouts - The number of failed attempts to check out a connection from the pool. numFailedConnectionAttempts - The number of failed attempts to create a connection for use in the pool. numReleasedValid - The number of valid connections released back to the pool. numSuccessfulCheckouts - The number of successful attempts to check out a connection from the pool. numSuccessfulCheckoutsNewConnection - The number of successful checkout attempts that had to create a new connection because none were available. numSuccessfulConnectionAttempts - The number successful attempts to create a connection for use in the pool. maximumAvailableConnections - The maximum number of connections that may be available in the pool at any time. numSuccessfulCheckoutsWithoutWait - The number of successful checkout attempts that were able to take an existing connection without waiting. numSuccessfulCheckoutsAfterWait - The number of successful checkout attempts that retrieved a connection from the pool after waiting for it to become available. numAvailableConnections - The number of connections currently available for use in the pool. 
    # @param id [String] Cloud Identity Provider identifier
    # @param [Hash] opts the optional parameters
    # @return [CloudLdapConnectionPoolStatistics]
    def v2_cloud_ldaps_id_connection_search_get(id, opts = {})
      data, _status_code, _headers = v2_cloud_ldaps_id_connection_search_get_with_http_info(id, opts)
      data
    end

    # Get search connection pool statistics
    # Get all search connection pool for chosen Cloud Identity Provider. numConnectionsClosedDefunct - The number of connections that have been closed as defunct. numConnectionsClosedExpired - The number of connections that have been closed because they were expired. numConnectionsClosedUnneeded - The number of connections that have been closed because they were no longer needed. numFailedCheckouts - The number of failed attempts to check out a connection from the pool. numFailedConnectionAttempts - The number of failed attempts to create a connection for use in the pool. numReleasedValid - The number of valid connections released back to the pool. numSuccessfulCheckouts - The number of successful attempts to check out a connection from the pool. numSuccessfulCheckoutsNewConnection - The number of successful checkout attempts that had to create a new connection because none were available. numSuccessfulConnectionAttempts - The number successful attempts to create a connection for use in the pool. maximumAvailableConnections - The maximum number of connections that may be available in the pool at any time. numSuccessfulCheckoutsWithoutWait - The number of successful checkout attempts that were able to take an existing connection without waiting. numSuccessfulCheckoutsAfterWait - The number of successful checkout attempts that retrieved a connection from the pool after waiting for it to become available. numAvailableConnections - The number of connections currently available for use in the pool. 
    # @param id [String] Cloud Identity Provider identifier
    # @param [Hash] opts the optional parameters
    # @return [Array<(CloudLdapConnectionPoolStatistics, Integer, Hash)>] CloudLdapConnectionPoolStatistics data, response status code and response headers
    def v2_cloud_ldaps_id_connection_search_get_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: CloudLdapApi.v2_cloud_ldaps_id_connection_search_get ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling CloudLdapApi.v2_cloud_ldaps_id_connection_search_get"
      end
      # resource path
      local_var_path = '/v2/cloud-ldaps/{id}/connection/search'.sub('{' + 'id' + '}', CGI.escape(id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'CloudLdapConnectionPoolStatistics'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['Bearer']

      new_options = opts.merge(
        :operation => :"CloudLdapApi.v2_cloud_ldaps_id_connection_search_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CloudLdapApi#v2_cloud_ldaps_id_connection_search_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Tests the communication with the specified cloud connection 
    # Tests the communication with the specified cloud connection 
    # @param id [String] Cloud Identity Provider identifier
    # @param [Hash] opts the optional parameters
    # @return [CloudLdapConnectionStatus]
    def v2_cloud_ldaps_id_connection_status_get(id, opts = {})
      data, _status_code, _headers = v2_cloud_ldaps_id_connection_status_get_with_http_info(id, opts)
      data
    end

    # Tests the communication with the specified cloud connection 
    # Tests the communication with the specified cloud connection 
    # @param id [String] Cloud Identity Provider identifier
    # @param [Hash] opts the optional parameters
    # @return [Array<(CloudLdapConnectionStatus, Integer, Hash)>] CloudLdapConnectionStatus data, response status code and response headers
    def v2_cloud_ldaps_id_connection_status_get_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: CloudLdapApi.v2_cloud_ldaps_id_connection_status_get ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling CloudLdapApi.v2_cloud_ldaps_id_connection_status_get"
      end
      # resource path
      local_var_path = '/v2/cloud-ldaps/{id}/connection/status'.sub('{' + 'id' + '}', CGI.escape(id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'CloudLdapConnectionStatus'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['Bearer']

      new_options = opts.merge(
        :operation => :"CloudLdapApi.v2_cloud_ldaps_id_connection_status_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CloudLdapApi#v2_cloud_ldaps_id_connection_status_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Delete Cloud Identity Provider configuration.
    # Delete Cloud Identity Provider configuration.
    # @param id [String] Cloud Identity Provider identifier
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def v2_cloud_ldaps_id_delete(id, opts = {})
      v2_cloud_ldaps_id_delete_with_http_info(id, opts)
      nil
    end

    # Delete Cloud Identity Provider configuration.
    # Delete Cloud Identity Provider configuration.
    # @param id [String] Cloud Identity Provider identifier
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def v2_cloud_ldaps_id_delete_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: CloudLdapApi.v2_cloud_ldaps_id_delete ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling CloudLdapApi.v2_cloud_ldaps_id_delete"
      end
      # resource path
      local_var_path = '/v2/cloud-ldaps/{id}'.sub('{' + 'id' + '}', CGI.escape(id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || ['Bearer']

      new_options = opts.merge(
        :operation => :"CloudLdapApi.v2_cloud_ldaps_id_delete",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CloudLdapApi#v2_cloud_ldaps_id_delete\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get Cloud Identity Provider configuration with given id.
    # Get Cloud Identity Provider configuration with given id.
    # @param id [String] Cloud Identity Provider identifier
    # @param [Hash] opts the optional parameters
    # @return [LdapConfigurationResponse]
    def v2_cloud_ldaps_id_get(id, opts = {})
      data, _status_code, _headers = v2_cloud_ldaps_id_get_with_http_info(id, opts)
      data
    end

    # Get Cloud Identity Provider configuration with given id.
    # Get Cloud Identity Provider configuration with given id.
    # @param id [String] Cloud Identity Provider identifier
    # @param [Hash] opts the optional parameters
    # @return [Array<(LdapConfigurationResponse, Integer, Hash)>] LdapConfigurationResponse data, response status code and response headers
    def v2_cloud_ldaps_id_get_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: CloudLdapApi.v2_cloud_ldaps_id_get ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling CloudLdapApi.v2_cloud_ldaps_id_get"
      end
      # resource path
      local_var_path = '/v2/cloud-ldaps/{id}'.sub('{' + 'id' + '}', CGI.escape(id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'LdapConfigurationResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['Bearer']

      new_options = opts.merge(
        :operation => :"CloudLdapApi.v2_cloud_ldaps_id_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CloudLdapApi#v2_cloud_ldaps_id_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get mappings configurations for Cloud Identity Providers server configuration.
    # Get all mappings configurations for Cloud Identity Providers server configuration.
    # @param id [String] Cloud Identity Provider identifier
    # @param [Hash] opts the optional parameters
    # @return [CloudLdapMappingsResponse]
    def v2_cloud_ldaps_id_mappings_get(id, opts = {})
      data, _status_code, _headers = v2_cloud_ldaps_id_mappings_get_with_http_info(id, opts)
      data
    end

    # Get mappings configurations for Cloud Identity Providers server configuration.
    # Get all mappings configurations for Cloud Identity Providers server configuration.
    # @param id [String] Cloud Identity Provider identifier
    # @param [Hash] opts the optional parameters
    # @return [Array<(CloudLdapMappingsResponse, Integer, Hash)>] CloudLdapMappingsResponse data, response status code and response headers
    def v2_cloud_ldaps_id_mappings_get_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: CloudLdapApi.v2_cloud_ldaps_id_mappings_get ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling CloudLdapApi.v2_cloud_ldaps_id_mappings_get"
      end
      # resource path
      local_var_path = '/v2/cloud-ldaps/{id}/mappings'.sub('{' + 'id' + '}', CGI.escape(id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'CloudLdapMappingsResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['Bearer']

      new_options = opts.merge(
        :operation => :"CloudLdapApi.v2_cloud_ldaps_id_mappings_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CloudLdapApi#v2_cloud_ldaps_id_mappings_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Update Cloud Identity Provider mappings configuration.
    # Update Cloud Identity Provider mappings configuration. Cannot be used for partial updates, all content body must be sent.
    # @param id [String] Cloud Identity Provider identifier
    # @param cloud_ldap_mappings_request [CloudLdapMappingsRequest] Cloud Identity Provider mappings to update.
    # @param [Hash] opts the optional parameters
    # @return [CloudLdapMappingsResponse]
    def v2_cloud_ldaps_id_mappings_put(id, cloud_ldap_mappings_request, opts = {})
      data, _status_code, _headers = v2_cloud_ldaps_id_mappings_put_with_http_info(id, cloud_ldap_mappings_request, opts)
      data
    end

    # Update Cloud Identity Provider mappings configuration.
    # Update Cloud Identity Provider mappings configuration. Cannot be used for partial updates, all content body must be sent.
    # @param id [String] Cloud Identity Provider identifier
    # @param cloud_ldap_mappings_request [CloudLdapMappingsRequest] Cloud Identity Provider mappings to update.
    # @param [Hash] opts the optional parameters
    # @return [Array<(CloudLdapMappingsResponse, Integer, Hash)>] CloudLdapMappingsResponse data, response status code and response headers
    def v2_cloud_ldaps_id_mappings_put_with_http_info(id, cloud_ldap_mappings_request, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: CloudLdapApi.v2_cloud_ldaps_id_mappings_put ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling CloudLdapApi.v2_cloud_ldaps_id_mappings_put"
      end
      # verify the required parameter 'cloud_ldap_mappings_request' is set
      if @api_client.config.client_side_validation && cloud_ldap_mappings_request.nil?
        fail ArgumentError, "Missing the required parameter 'cloud_ldap_mappings_request' when calling CloudLdapApi.v2_cloud_ldaps_id_mappings_put"
      end
      # resource path
      local_var_path = '/v2/cloud-ldaps/{id}/mappings'.sub('{' + 'id' + '}', CGI.escape(id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(cloud_ldap_mappings_request)

      # return_type
      return_type = opts[:debug_return_type] || 'CloudLdapMappingsResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['Bearer']

      new_options = opts.merge(
        :operation => :"CloudLdapApi.v2_cloud_ldaps_id_mappings_put",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PUT, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CloudLdapApi#v2_cloud_ldaps_id_mappings_put\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Update Cloud Identity Provider configuration
    # Update Cloud Identity Provider configuration. Cannot be used for partial updates, all content body must be sent.
    # @param id [String] Cloud Identity Provider identifier
    # @param ldap_configuration_update [LdapConfigurationUpdate] Cloud Identity Provider configuration to update
    # @param [Hash] opts the optional parameters
    # @return [LdapConfigurationResponse]
    def v2_cloud_ldaps_id_put(id, ldap_configuration_update, opts = {})
      data, _status_code, _headers = v2_cloud_ldaps_id_put_with_http_info(id, ldap_configuration_update, opts)
      data
    end

    # Update Cloud Identity Provider configuration
    # Update Cloud Identity Provider configuration. Cannot be used for partial updates, all content body must be sent.
    # @param id [String] Cloud Identity Provider identifier
    # @param ldap_configuration_update [LdapConfigurationUpdate] Cloud Identity Provider configuration to update
    # @param [Hash] opts the optional parameters
    # @return [Array<(LdapConfigurationResponse, Integer, Hash)>] LdapConfigurationResponse data, response status code and response headers
    def v2_cloud_ldaps_id_put_with_http_info(id, ldap_configuration_update, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: CloudLdapApi.v2_cloud_ldaps_id_put ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling CloudLdapApi.v2_cloud_ldaps_id_put"
      end
      # verify the required parameter 'ldap_configuration_update' is set
      if @api_client.config.client_side_validation && ldap_configuration_update.nil?
        fail ArgumentError, "Missing the required parameter 'ldap_configuration_update' when calling CloudLdapApi.v2_cloud_ldaps_id_put"
      end
      # resource path
      local_var_path = '/v2/cloud-ldaps/{id}'.sub('{' + 'id' + '}', CGI.escape(id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(ldap_configuration_update)

      # return_type
      return_type = opts[:debug_return_type] || 'LdapConfigurationResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['Bearer']

      new_options = opts.merge(
        :operation => :"CloudLdapApi.v2_cloud_ldaps_id_put",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PUT, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CloudLdapApi#v2_cloud_ldaps_id_put\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Create Cloud Identity Provider configuration
    # Create new Cloud Identity Provider configuration with unique display name. If mappings not provided, then defaults will be generated instead.
    # @param ldap_configuration_request [LdapConfigurationRequest] Cloud Identity Provider configuration to create
    # @param [Hash] opts the optional parameters
    # @return [HrefResponse]
    def v2_cloud_ldaps_post(ldap_configuration_request, opts = {})
      data, _status_code, _headers = v2_cloud_ldaps_post_with_http_info(ldap_configuration_request, opts)
      data
    end

    # Create Cloud Identity Provider configuration
    # Create new Cloud Identity Provider configuration with unique display name. If mappings not provided, then defaults will be generated instead.
    # @param ldap_configuration_request [LdapConfigurationRequest] Cloud Identity Provider configuration to create
    # @param [Hash] opts the optional parameters
    # @return [Array<(HrefResponse, Integer, Hash)>] HrefResponse data, response status code and response headers
    def v2_cloud_ldaps_post_with_http_info(ldap_configuration_request, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: CloudLdapApi.v2_cloud_ldaps_post ...'
      end
      # verify the required parameter 'ldap_configuration_request' is set
      if @api_client.config.client_side_validation && ldap_configuration_request.nil?
        fail ArgumentError, "Missing the required parameter 'ldap_configuration_request' when calling CloudLdapApi.v2_cloud_ldaps_post"
      end
      # resource path
      local_var_path = '/v2/cloud-ldaps'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(ldap_configuration_request)

      # return_type
      return_type = opts[:debug_return_type] || 'HrefResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['Bearer']

      new_options = opts.merge(
        :operation => :"CloudLdapApi.v2_cloud_ldaps_post",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CloudLdapApi#v2_cloud_ldaps_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
