=begin
#Jamf Pro API

### Overview The Jamf Pro API is a RESTful API for Jamf Pro built to enable consistent and efficient programmatic access to Jamf Pro.<br/><br/> The swagger schema can be found [here](/api/schema/). 

The version of the OpenAPI document: production

Generated by: https://openapi-generator.tech
OpenAPI Generator version: 6.1.0-SNAPSHOT

=end

require 'cgi'

module JamfPro
  class EnrollmentCustomizationPreviewApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Get all Panels for single Enrollment Customization 
    # Get all panels for single enrollment customization
    # @param id [Integer] Enrollment Customization identifier
    # @param [Hash] opts the optional parameters
    # @return [EnrollmentCustomizationPanelList]
    def v1_enrollment_customization_id_all_get(id, opts = {})
      data, _status_code, _headers = v1_enrollment_customization_id_all_get_with_http_info(id, opts)
      data
    end

    # Get all Panels for single Enrollment Customization 
    # Get all panels for single enrollment customization
    # @param id [Integer] Enrollment Customization identifier
    # @param [Hash] opts the optional parameters
    # @return [Array<(EnrollmentCustomizationPanelList, Integer, Hash)>] EnrollmentCustomizationPanelList data, response status code and response headers
    def v1_enrollment_customization_id_all_get_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: EnrollmentCustomizationPreviewApi.v1_enrollment_customization_id_all_get ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling EnrollmentCustomizationPreviewApi.v1_enrollment_customization_id_all_get"
      end
      # resource path
      local_var_path = '/v1/enrollment-customization/{id}/all'.sub('{' + 'id' + '}', CGI.escape(id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'EnrollmentCustomizationPanelList'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['Bearer']

      new_options = opts.merge(
        :operation => :"EnrollmentCustomizationPreviewApi.v1_enrollment_customization_id_all_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: EnrollmentCustomizationPreviewApi#v1_enrollment_customization_id_all_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Delete a single Panel from an Enrollment Customization 
    # Delete a single panel from an Enrollment Customization
    # @param id [Integer] Enrollment Customization identifier
    # @param panel_id [Integer] Panel object identifier
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def v1_enrollment_customization_id_all_panel_id_delete(id, panel_id, opts = {})
      v1_enrollment_customization_id_all_panel_id_delete_with_http_info(id, panel_id, opts)
      nil
    end

    # Delete a single Panel from an Enrollment Customization 
    # Delete a single panel from an Enrollment Customization
    # @param id [Integer] Enrollment Customization identifier
    # @param panel_id [Integer] Panel object identifier
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def v1_enrollment_customization_id_all_panel_id_delete_with_http_info(id, panel_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: EnrollmentCustomizationPreviewApi.v1_enrollment_customization_id_all_panel_id_delete ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling EnrollmentCustomizationPreviewApi.v1_enrollment_customization_id_all_panel_id_delete"
      end
      # verify the required parameter 'panel_id' is set
      if @api_client.config.client_side_validation && panel_id.nil?
        fail ArgumentError, "Missing the required parameter 'panel_id' when calling EnrollmentCustomizationPreviewApi.v1_enrollment_customization_id_all_panel_id_delete"
      end
      # resource path
      local_var_path = '/v1/enrollment-customization/{id}/all/{panel-id}'.sub('{' + 'id' + '}', CGI.escape(id.to_s)).sub('{' + 'panel-id' + '}', CGI.escape(panel_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || ['Bearer']

      new_options = opts.merge(
        :operation => :"EnrollmentCustomizationPreviewApi.v1_enrollment_customization_id_all_panel_id_delete",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: EnrollmentCustomizationPreviewApi#v1_enrollment_customization_id_all_panel_id_delete\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get a single Panel for a single Enrollment Customization 
    # Get a single panel for a single enrollment customization
    # @param id [Integer] Enrollment Customization identifier
    # @param panel_id [Integer] Panel object identifier
    # @param [Hash] opts the optional parameters
    # @return [GetEnrollmentCustomizationPanel]
    def v1_enrollment_customization_id_all_panel_id_get(id, panel_id, opts = {})
      data, _status_code, _headers = v1_enrollment_customization_id_all_panel_id_get_with_http_info(id, panel_id, opts)
      data
    end

    # Get a single Panel for a single Enrollment Customization 
    # Get a single panel for a single enrollment customization
    # @param id [Integer] Enrollment Customization identifier
    # @param panel_id [Integer] Panel object identifier
    # @param [Hash] opts the optional parameters
    # @return [Array<(GetEnrollmentCustomizationPanel, Integer, Hash)>] GetEnrollmentCustomizationPanel data, response status code and response headers
    def v1_enrollment_customization_id_all_panel_id_get_with_http_info(id, panel_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: EnrollmentCustomizationPreviewApi.v1_enrollment_customization_id_all_panel_id_get ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling EnrollmentCustomizationPreviewApi.v1_enrollment_customization_id_all_panel_id_get"
      end
      # verify the required parameter 'panel_id' is set
      if @api_client.config.client_side_validation && panel_id.nil?
        fail ArgumentError, "Missing the required parameter 'panel_id' when calling EnrollmentCustomizationPreviewApi.v1_enrollment_customization_id_all_panel_id_get"
      end
      # resource path
      local_var_path = '/v1/enrollment-customization/{id}/all/{panel-id}'.sub('{' + 'id' + '}', CGI.escape(id.to_s)).sub('{' + 'panel-id' + '}', CGI.escape(panel_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'GetEnrollmentCustomizationPanel'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['Bearer']

      new_options = opts.merge(
        :operation => :"EnrollmentCustomizationPreviewApi.v1_enrollment_customization_id_all_panel_id_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: EnrollmentCustomizationPreviewApi#v1_enrollment_customization_id_all_panel_id_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Delete an LDAP single panel from an Enrollment Customization 
    # Delete an LDAP single Panel from an Enrollment Customization
    # @param id [Integer] Enrollment Customization identifier
    # @param panel_id [Integer] Panel object identifier
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def v1_enrollment_customization_id_ldap_panel_id_delete(id, panel_id, opts = {})
      v1_enrollment_customization_id_ldap_panel_id_delete_with_http_info(id, panel_id, opts)
      nil
    end

    # Delete an LDAP single panel from an Enrollment Customization 
    # Delete an LDAP single Panel from an Enrollment Customization
    # @param id [Integer] Enrollment Customization identifier
    # @param panel_id [Integer] Panel object identifier
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def v1_enrollment_customization_id_ldap_panel_id_delete_with_http_info(id, panel_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: EnrollmentCustomizationPreviewApi.v1_enrollment_customization_id_ldap_panel_id_delete ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling EnrollmentCustomizationPreviewApi.v1_enrollment_customization_id_ldap_panel_id_delete"
      end
      # verify the required parameter 'panel_id' is set
      if @api_client.config.client_side_validation && panel_id.nil?
        fail ArgumentError, "Missing the required parameter 'panel_id' when calling EnrollmentCustomizationPreviewApi.v1_enrollment_customization_id_ldap_panel_id_delete"
      end
      # resource path
      local_var_path = '/v1/enrollment-customization/{id}/ldap/{panel-id}'.sub('{' + 'id' + '}', CGI.escape(id.to_s)).sub('{' + 'panel-id' + '}', CGI.escape(panel_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || ['Bearer']

      new_options = opts.merge(
        :operation => :"EnrollmentCustomizationPreviewApi.v1_enrollment_customization_id_ldap_panel_id_delete",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: EnrollmentCustomizationPreviewApi#v1_enrollment_customization_id_ldap_panel_id_delete\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get a single LDAP panel for a single Enrollment Customization 
    # Get a single LDAP panel for a single enrollment customization
    # @param id [Integer] Enrollment Customization identifier
    # @param panel_id [Integer] Panel object identifier
    # @param [Hash] opts the optional parameters
    # @return [GetEnrollmentCustomizationPanelLdapAuth]
    def v1_enrollment_customization_id_ldap_panel_id_get(id, panel_id, opts = {})
      data, _status_code, _headers = v1_enrollment_customization_id_ldap_panel_id_get_with_http_info(id, panel_id, opts)
      data
    end

    # Get a single LDAP panel for a single Enrollment Customization 
    # Get a single LDAP panel for a single enrollment customization
    # @param id [Integer] Enrollment Customization identifier
    # @param panel_id [Integer] Panel object identifier
    # @param [Hash] opts the optional parameters
    # @return [Array<(GetEnrollmentCustomizationPanelLdapAuth, Integer, Hash)>] GetEnrollmentCustomizationPanelLdapAuth data, response status code and response headers
    def v1_enrollment_customization_id_ldap_panel_id_get_with_http_info(id, panel_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: EnrollmentCustomizationPreviewApi.v1_enrollment_customization_id_ldap_panel_id_get ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling EnrollmentCustomizationPreviewApi.v1_enrollment_customization_id_ldap_panel_id_get"
      end
      # verify the required parameter 'panel_id' is set
      if @api_client.config.client_side_validation && panel_id.nil?
        fail ArgumentError, "Missing the required parameter 'panel_id' when calling EnrollmentCustomizationPreviewApi.v1_enrollment_customization_id_ldap_panel_id_get"
      end
      # resource path
      local_var_path = '/v1/enrollment-customization/{id}/ldap/{panel-id}'.sub('{' + 'id' + '}', CGI.escape(id.to_s)).sub('{' + 'panel-id' + '}', CGI.escape(panel_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'GetEnrollmentCustomizationPanelLdapAuth'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['Bearer']

      new_options = opts.merge(
        :operation => :"EnrollmentCustomizationPreviewApi.v1_enrollment_customization_id_ldap_panel_id_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: EnrollmentCustomizationPreviewApi#v1_enrollment_customization_id_ldap_panel_id_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Update a single LDAP Panel for a single Enrollment Customization 
    # Update a single LDAP panel for a single enrollment customization. If multiple LDAP access groups are defined with the same name and id, only one will be saved.
    # @param id [Integer] Enrollment Customization identifier
    # @param panel_id [Integer] Panel object identifier
    # @param enrollment_customization_panel_ldap_auth [EnrollmentCustomizationPanelLdapAuth] Enrollment Customization Panel to update
    # @param [Hash] opts the optional parameters
    # @return [GetEnrollmentCustomizationPanelLdapAuth]
    def v1_enrollment_customization_id_ldap_panel_id_put(id, panel_id, enrollment_customization_panel_ldap_auth, opts = {})
      data, _status_code, _headers = v1_enrollment_customization_id_ldap_panel_id_put_with_http_info(id, panel_id, enrollment_customization_panel_ldap_auth, opts)
      data
    end

    # Update a single LDAP Panel for a single Enrollment Customization 
    # Update a single LDAP panel for a single enrollment customization. If multiple LDAP access groups are defined with the same name and id, only one will be saved.
    # @param id [Integer] Enrollment Customization identifier
    # @param panel_id [Integer] Panel object identifier
    # @param enrollment_customization_panel_ldap_auth [EnrollmentCustomizationPanelLdapAuth] Enrollment Customization Panel to update
    # @param [Hash] opts the optional parameters
    # @return [Array<(GetEnrollmentCustomizationPanelLdapAuth, Integer, Hash)>] GetEnrollmentCustomizationPanelLdapAuth data, response status code and response headers
    def v1_enrollment_customization_id_ldap_panel_id_put_with_http_info(id, panel_id, enrollment_customization_panel_ldap_auth, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: EnrollmentCustomizationPreviewApi.v1_enrollment_customization_id_ldap_panel_id_put ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling EnrollmentCustomizationPreviewApi.v1_enrollment_customization_id_ldap_panel_id_put"
      end
      # verify the required parameter 'panel_id' is set
      if @api_client.config.client_side_validation && panel_id.nil?
        fail ArgumentError, "Missing the required parameter 'panel_id' when calling EnrollmentCustomizationPreviewApi.v1_enrollment_customization_id_ldap_panel_id_put"
      end
      # verify the required parameter 'enrollment_customization_panel_ldap_auth' is set
      if @api_client.config.client_side_validation && enrollment_customization_panel_ldap_auth.nil?
        fail ArgumentError, "Missing the required parameter 'enrollment_customization_panel_ldap_auth' when calling EnrollmentCustomizationPreviewApi.v1_enrollment_customization_id_ldap_panel_id_put"
      end
      # resource path
      local_var_path = '/v1/enrollment-customization/{id}/ldap/{panel-id}'.sub('{' + 'id' + '}', CGI.escape(id.to_s)).sub('{' + 'panel-id' + '}', CGI.escape(panel_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(enrollment_customization_panel_ldap_auth)

      # return_type
      return_type = opts[:debug_return_type] || 'GetEnrollmentCustomizationPanelLdapAuth'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['Bearer']

      new_options = opts.merge(
        :operation => :"EnrollmentCustomizationPreviewApi.v1_enrollment_customization_id_ldap_panel_id_put",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PUT, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: EnrollmentCustomizationPreviewApi#v1_enrollment_customization_id_ldap_panel_id_put\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Create an LDAP Panel for a single Enrollment Customization 
    # Create an LDAP panel for a single enrollment customization. If multiple LDAP access groups are defined with the same name and id, only one will be saved.
    # @param id [Integer] Enrollment Customization identifier
    # @param enrollment_customization_panel_ldap_auth [EnrollmentCustomizationPanelLdapAuth] Enrollment Customization Panel to create
    # @param [Hash] opts the optional parameters
    # @return [GetEnrollmentCustomizationPanelLdapAuth]
    def v1_enrollment_customization_id_ldap_post(id, enrollment_customization_panel_ldap_auth, opts = {})
      data, _status_code, _headers = v1_enrollment_customization_id_ldap_post_with_http_info(id, enrollment_customization_panel_ldap_auth, opts)
      data
    end

    # Create an LDAP Panel for a single Enrollment Customization 
    # Create an LDAP panel for a single enrollment customization. If multiple LDAP access groups are defined with the same name and id, only one will be saved.
    # @param id [Integer] Enrollment Customization identifier
    # @param enrollment_customization_panel_ldap_auth [EnrollmentCustomizationPanelLdapAuth] Enrollment Customization Panel to create
    # @param [Hash] opts the optional parameters
    # @return [Array<(GetEnrollmentCustomizationPanelLdapAuth, Integer, Hash)>] GetEnrollmentCustomizationPanelLdapAuth data, response status code and response headers
    def v1_enrollment_customization_id_ldap_post_with_http_info(id, enrollment_customization_panel_ldap_auth, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: EnrollmentCustomizationPreviewApi.v1_enrollment_customization_id_ldap_post ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling EnrollmentCustomizationPreviewApi.v1_enrollment_customization_id_ldap_post"
      end
      # verify the required parameter 'enrollment_customization_panel_ldap_auth' is set
      if @api_client.config.client_side_validation && enrollment_customization_panel_ldap_auth.nil?
        fail ArgumentError, "Missing the required parameter 'enrollment_customization_panel_ldap_auth' when calling EnrollmentCustomizationPreviewApi.v1_enrollment_customization_id_ldap_post"
      end
      # resource path
      local_var_path = '/v1/enrollment-customization/{id}/ldap'.sub('{' + 'id' + '}', CGI.escape(id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(enrollment_customization_panel_ldap_auth)

      # return_type
      return_type = opts[:debug_return_type] || 'GetEnrollmentCustomizationPanelLdapAuth'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['Bearer']

      new_options = opts.merge(
        :operation => :"EnrollmentCustomizationPreviewApi.v1_enrollment_customization_id_ldap_post",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: EnrollmentCustomizationPreviewApi#v1_enrollment_customization_id_ldap_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Delete a single SSO Panel from an Enrollment Customization 
    # Delete a single SSO panel from an Enrollment Customization
    # @param id [Integer] Enrollment Customization identifier
    # @param panel_id [Integer] Panel object identifier
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def v1_enrollment_customization_id_sso_panel_id_delete(id, panel_id, opts = {})
      v1_enrollment_customization_id_sso_panel_id_delete_with_http_info(id, panel_id, opts)
      nil
    end

    # Delete a single SSO Panel from an Enrollment Customization 
    # Delete a single SSO panel from an Enrollment Customization
    # @param id [Integer] Enrollment Customization identifier
    # @param panel_id [Integer] Panel object identifier
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def v1_enrollment_customization_id_sso_panel_id_delete_with_http_info(id, panel_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: EnrollmentCustomizationPreviewApi.v1_enrollment_customization_id_sso_panel_id_delete ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling EnrollmentCustomizationPreviewApi.v1_enrollment_customization_id_sso_panel_id_delete"
      end
      # verify the required parameter 'panel_id' is set
      if @api_client.config.client_side_validation && panel_id.nil?
        fail ArgumentError, "Missing the required parameter 'panel_id' when calling EnrollmentCustomizationPreviewApi.v1_enrollment_customization_id_sso_panel_id_delete"
      end
      # resource path
      local_var_path = '/v1/enrollment-customization/{id}/sso/{panel-id}'.sub('{' + 'id' + '}', CGI.escape(id.to_s)).sub('{' + 'panel-id' + '}', CGI.escape(panel_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || ['Bearer']

      new_options = opts.merge(
        :operation => :"EnrollmentCustomizationPreviewApi.v1_enrollment_customization_id_sso_panel_id_delete",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: EnrollmentCustomizationPreviewApi#v1_enrollment_customization_id_sso_panel_id_delete\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get a single SSO Panel for a single Enrollment Customization 
    # Get a single SSO panel for a single enrollment customization
    # @param id [Integer] Enrollment Customization identifier
    # @param panel_id [Integer] Panel object identifier
    # @param [Hash] opts the optional parameters
    # @return [GetEnrollmentCustomizationPanelSsoAuth]
    def v1_enrollment_customization_id_sso_panel_id_get(id, panel_id, opts = {})
      data, _status_code, _headers = v1_enrollment_customization_id_sso_panel_id_get_with_http_info(id, panel_id, opts)
      data
    end

    # Get a single SSO Panel for a single Enrollment Customization 
    # Get a single SSO panel for a single enrollment customization
    # @param id [Integer] Enrollment Customization identifier
    # @param panel_id [Integer] Panel object identifier
    # @param [Hash] opts the optional parameters
    # @return [Array<(GetEnrollmentCustomizationPanelSsoAuth, Integer, Hash)>] GetEnrollmentCustomizationPanelSsoAuth data, response status code and response headers
    def v1_enrollment_customization_id_sso_panel_id_get_with_http_info(id, panel_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: EnrollmentCustomizationPreviewApi.v1_enrollment_customization_id_sso_panel_id_get ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling EnrollmentCustomizationPreviewApi.v1_enrollment_customization_id_sso_panel_id_get"
      end
      # verify the required parameter 'panel_id' is set
      if @api_client.config.client_side_validation && panel_id.nil?
        fail ArgumentError, "Missing the required parameter 'panel_id' when calling EnrollmentCustomizationPreviewApi.v1_enrollment_customization_id_sso_panel_id_get"
      end
      # resource path
      local_var_path = '/v1/enrollment-customization/{id}/sso/{panel-id}'.sub('{' + 'id' + '}', CGI.escape(id.to_s)).sub('{' + 'panel-id' + '}', CGI.escape(panel_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'GetEnrollmentCustomizationPanelSsoAuth'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['Bearer']

      new_options = opts.merge(
        :operation => :"EnrollmentCustomizationPreviewApi.v1_enrollment_customization_id_sso_panel_id_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: EnrollmentCustomizationPreviewApi#v1_enrollment_customization_id_sso_panel_id_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Update a single SSO Panel for a single Enrollment Customization 
    # Update a single SSO panel for a single enrollment customization
    # @param id [Integer] Enrollment Customization identifier
    # @param panel_id [Integer] Panel object identifier
    # @param enrollment_customization_panel_sso_auth [EnrollmentCustomizationPanelSsoAuth] Enrollment Customization Panel to update
    # @param [Hash] opts the optional parameters
    # @return [GetEnrollmentCustomizationPanelSsoAuth]
    def v1_enrollment_customization_id_sso_panel_id_put(id, panel_id, enrollment_customization_panel_sso_auth, opts = {})
      data, _status_code, _headers = v1_enrollment_customization_id_sso_panel_id_put_with_http_info(id, panel_id, enrollment_customization_panel_sso_auth, opts)
      data
    end

    # Update a single SSO Panel for a single Enrollment Customization 
    # Update a single SSO panel for a single enrollment customization
    # @param id [Integer] Enrollment Customization identifier
    # @param panel_id [Integer] Panel object identifier
    # @param enrollment_customization_panel_sso_auth [EnrollmentCustomizationPanelSsoAuth] Enrollment Customization Panel to update
    # @param [Hash] opts the optional parameters
    # @return [Array<(GetEnrollmentCustomizationPanelSsoAuth, Integer, Hash)>] GetEnrollmentCustomizationPanelSsoAuth data, response status code and response headers
    def v1_enrollment_customization_id_sso_panel_id_put_with_http_info(id, panel_id, enrollment_customization_panel_sso_auth, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: EnrollmentCustomizationPreviewApi.v1_enrollment_customization_id_sso_panel_id_put ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling EnrollmentCustomizationPreviewApi.v1_enrollment_customization_id_sso_panel_id_put"
      end
      # verify the required parameter 'panel_id' is set
      if @api_client.config.client_side_validation && panel_id.nil?
        fail ArgumentError, "Missing the required parameter 'panel_id' when calling EnrollmentCustomizationPreviewApi.v1_enrollment_customization_id_sso_panel_id_put"
      end
      # verify the required parameter 'enrollment_customization_panel_sso_auth' is set
      if @api_client.config.client_side_validation && enrollment_customization_panel_sso_auth.nil?
        fail ArgumentError, "Missing the required parameter 'enrollment_customization_panel_sso_auth' when calling EnrollmentCustomizationPreviewApi.v1_enrollment_customization_id_sso_panel_id_put"
      end
      # resource path
      local_var_path = '/v1/enrollment-customization/{id}/sso/{panel-id}'.sub('{' + 'id' + '}', CGI.escape(id.to_s)).sub('{' + 'panel-id' + '}', CGI.escape(panel_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(enrollment_customization_panel_sso_auth)

      # return_type
      return_type = opts[:debug_return_type] || 'GetEnrollmentCustomizationPanelSsoAuth'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['Bearer']

      new_options = opts.merge(
        :operation => :"EnrollmentCustomizationPreviewApi.v1_enrollment_customization_id_sso_panel_id_put",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PUT, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: EnrollmentCustomizationPreviewApi#v1_enrollment_customization_id_sso_panel_id_put\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Create an SSO Panel for a single Enrollment Customization 
    # Create an SSO panel for a single enrollment customization
    # @param id [Integer] Enrollment Customization identifier
    # @param enrollment_customization_panel_sso_auth [EnrollmentCustomizationPanelSsoAuth] Enrollment Customization Panel to create
    # @param [Hash] opts the optional parameters
    # @return [GetEnrollmentCustomizationPanelSsoAuth]
    def v1_enrollment_customization_id_sso_post(id, enrollment_customization_panel_sso_auth, opts = {})
      data, _status_code, _headers = v1_enrollment_customization_id_sso_post_with_http_info(id, enrollment_customization_panel_sso_auth, opts)
      data
    end

    # Create an SSO Panel for a single Enrollment Customization 
    # Create an SSO panel for a single enrollment customization
    # @param id [Integer] Enrollment Customization identifier
    # @param enrollment_customization_panel_sso_auth [EnrollmentCustomizationPanelSsoAuth] Enrollment Customization Panel to create
    # @param [Hash] opts the optional parameters
    # @return [Array<(GetEnrollmentCustomizationPanelSsoAuth, Integer, Hash)>] GetEnrollmentCustomizationPanelSsoAuth data, response status code and response headers
    def v1_enrollment_customization_id_sso_post_with_http_info(id, enrollment_customization_panel_sso_auth, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: EnrollmentCustomizationPreviewApi.v1_enrollment_customization_id_sso_post ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling EnrollmentCustomizationPreviewApi.v1_enrollment_customization_id_sso_post"
      end
      # verify the required parameter 'enrollment_customization_panel_sso_auth' is set
      if @api_client.config.client_side_validation && enrollment_customization_panel_sso_auth.nil?
        fail ArgumentError, "Missing the required parameter 'enrollment_customization_panel_sso_auth' when calling EnrollmentCustomizationPreviewApi.v1_enrollment_customization_id_sso_post"
      end
      # resource path
      local_var_path = '/v1/enrollment-customization/{id}/sso'.sub('{' + 'id' + '}', CGI.escape(id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(enrollment_customization_panel_sso_auth)

      # return_type
      return_type = opts[:debug_return_type] || 'GetEnrollmentCustomizationPanelSsoAuth'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['Bearer']

      new_options = opts.merge(
        :operation => :"EnrollmentCustomizationPreviewApi.v1_enrollment_customization_id_sso_post",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: EnrollmentCustomizationPreviewApi#v1_enrollment_customization_id_sso_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Delete a Text single Panel from an Enrollment Customization 
    # Delete a Text single panel from an Enrollment Customization
    # @param id [Integer] Enrollment Customization identifier
    # @param panel_id [Integer] Panel object identifier
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def v1_enrollment_customization_id_text_panel_id_delete(id, panel_id, opts = {})
      v1_enrollment_customization_id_text_panel_id_delete_with_http_info(id, panel_id, opts)
      nil
    end

    # Delete a Text single Panel from an Enrollment Customization 
    # Delete a Text single panel from an Enrollment Customization
    # @param id [Integer] Enrollment Customization identifier
    # @param panel_id [Integer] Panel object identifier
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def v1_enrollment_customization_id_text_panel_id_delete_with_http_info(id, panel_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: EnrollmentCustomizationPreviewApi.v1_enrollment_customization_id_text_panel_id_delete ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling EnrollmentCustomizationPreviewApi.v1_enrollment_customization_id_text_panel_id_delete"
      end
      # verify the required parameter 'panel_id' is set
      if @api_client.config.client_side_validation && panel_id.nil?
        fail ArgumentError, "Missing the required parameter 'panel_id' when calling EnrollmentCustomizationPreviewApi.v1_enrollment_customization_id_text_panel_id_delete"
      end
      # resource path
      local_var_path = '/v1/enrollment-customization/{id}/text/{panel-id}'.sub('{' + 'id' + '}', CGI.escape(id.to_s)).sub('{' + 'panel-id' + '}', CGI.escape(panel_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || ['Bearer']

      new_options = opts.merge(
        :operation => :"EnrollmentCustomizationPreviewApi.v1_enrollment_customization_id_text_panel_id_delete",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: EnrollmentCustomizationPreviewApi#v1_enrollment_customization_id_text_panel_id_delete\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get a single Text Panel for a single Enrollment Customization 
    # Get a single Text panel for a single enrollment customization
    # @param id [Integer] Enrollment Customization identifier
    # @param panel_id [Integer] Panel object identifier
    # @param [Hash] opts the optional parameters
    # @return [GetEnrollmentCustomizationPanelText]
    def v1_enrollment_customization_id_text_panel_id_get(id, panel_id, opts = {})
      data, _status_code, _headers = v1_enrollment_customization_id_text_panel_id_get_with_http_info(id, panel_id, opts)
      data
    end

    # Get a single Text Panel for a single Enrollment Customization 
    # Get a single Text panel for a single enrollment customization
    # @param id [Integer] Enrollment Customization identifier
    # @param panel_id [Integer] Panel object identifier
    # @param [Hash] opts the optional parameters
    # @return [Array<(GetEnrollmentCustomizationPanelText, Integer, Hash)>] GetEnrollmentCustomizationPanelText data, response status code and response headers
    def v1_enrollment_customization_id_text_panel_id_get_with_http_info(id, panel_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: EnrollmentCustomizationPreviewApi.v1_enrollment_customization_id_text_panel_id_get ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling EnrollmentCustomizationPreviewApi.v1_enrollment_customization_id_text_panel_id_get"
      end
      # verify the required parameter 'panel_id' is set
      if @api_client.config.client_side_validation && panel_id.nil?
        fail ArgumentError, "Missing the required parameter 'panel_id' when calling EnrollmentCustomizationPreviewApi.v1_enrollment_customization_id_text_panel_id_get"
      end
      # resource path
      local_var_path = '/v1/enrollment-customization/{id}/text/{panel-id}'.sub('{' + 'id' + '}', CGI.escape(id.to_s)).sub('{' + 'panel-id' + '}', CGI.escape(panel_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'GetEnrollmentCustomizationPanelText'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['Bearer']

      new_options = opts.merge(
        :operation => :"EnrollmentCustomizationPreviewApi.v1_enrollment_customization_id_text_panel_id_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: EnrollmentCustomizationPreviewApi#v1_enrollment_customization_id_text_panel_id_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get the markdown output of a single Text Panel for a single Enrollment 
    # Get the markdown output of a single Text panel for a single enrollment customization
    # @param id [Integer] Enrollment Customization identifier
    # @param panel_id [Integer] Panel object identifier
    # @param [Hash] opts the optional parameters
    # @return [Markdown]
    def v1_enrollment_customization_id_text_panel_id_markdown_get(id, panel_id, opts = {})
      data, _status_code, _headers = v1_enrollment_customization_id_text_panel_id_markdown_get_with_http_info(id, panel_id, opts)
      data
    end

    # Get the markdown output of a single Text Panel for a single Enrollment 
    # Get the markdown output of a single Text panel for a single enrollment customization
    # @param id [Integer] Enrollment Customization identifier
    # @param panel_id [Integer] Panel object identifier
    # @param [Hash] opts the optional parameters
    # @return [Array<(Markdown, Integer, Hash)>] Markdown data, response status code and response headers
    def v1_enrollment_customization_id_text_panel_id_markdown_get_with_http_info(id, panel_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: EnrollmentCustomizationPreviewApi.v1_enrollment_customization_id_text_panel_id_markdown_get ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling EnrollmentCustomizationPreviewApi.v1_enrollment_customization_id_text_panel_id_markdown_get"
      end
      # verify the required parameter 'panel_id' is set
      if @api_client.config.client_side_validation && panel_id.nil?
        fail ArgumentError, "Missing the required parameter 'panel_id' when calling EnrollmentCustomizationPreviewApi.v1_enrollment_customization_id_text_panel_id_markdown_get"
      end
      # resource path
      local_var_path = '/v1/enrollment-customization/{id}/text/{panel-id}/markdown'.sub('{' + 'id' + '}', CGI.escape(id.to_s)).sub('{' + 'panel-id' + '}', CGI.escape(panel_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'Markdown'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['Bearer']

      new_options = opts.merge(
        :operation => :"EnrollmentCustomizationPreviewApi.v1_enrollment_customization_id_text_panel_id_markdown_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: EnrollmentCustomizationPreviewApi#v1_enrollment_customization_id_text_panel_id_markdown_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Update a single Text Panel for a single Enrollment Customization 
    # Update a single Text panel for a single enrollment customization
    # @param id [Integer] Enrollment Customization identifier
    # @param panel_id [Integer] Panel object identifier
    # @param enrollment_customization_panel_text [EnrollmentCustomizationPanelText] Enrollment Customization Panel to update
    # @param [Hash] opts the optional parameters
    # @return [GetEnrollmentCustomizationPanelText]
    def v1_enrollment_customization_id_text_panel_id_put(id, panel_id, enrollment_customization_panel_text, opts = {})
      data, _status_code, _headers = v1_enrollment_customization_id_text_panel_id_put_with_http_info(id, panel_id, enrollment_customization_panel_text, opts)
      data
    end

    # Update a single Text Panel for a single Enrollment Customization 
    # Update a single Text panel for a single enrollment customization
    # @param id [Integer] Enrollment Customization identifier
    # @param panel_id [Integer] Panel object identifier
    # @param enrollment_customization_panel_text [EnrollmentCustomizationPanelText] Enrollment Customization Panel to update
    # @param [Hash] opts the optional parameters
    # @return [Array<(GetEnrollmentCustomizationPanelText, Integer, Hash)>] GetEnrollmentCustomizationPanelText data, response status code and response headers
    def v1_enrollment_customization_id_text_panel_id_put_with_http_info(id, panel_id, enrollment_customization_panel_text, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: EnrollmentCustomizationPreviewApi.v1_enrollment_customization_id_text_panel_id_put ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling EnrollmentCustomizationPreviewApi.v1_enrollment_customization_id_text_panel_id_put"
      end
      # verify the required parameter 'panel_id' is set
      if @api_client.config.client_side_validation && panel_id.nil?
        fail ArgumentError, "Missing the required parameter 'panel_id' when calling EnrollmentCustomizationPreviewApi.v1_enrollment_customization_id_text_panel_id_put"
      end
      # verify the required parameter 'enrollment_customization_panel_text' is set
      if @api_client.config.client_side_validation && enrollment_customization_panel_text.nil?
        fail ArgumentError, "Missing the required parameter 'enrollment_customization_panel_text' when calling EnrollmentCustomizationPreviewApi.v1_enrollment_customization_id_text_panel_id_put"
      end
      # resource path
      local_var_path = '/v1/enrollment-customization/{id}/text/{panel-id}'.sub('{' + 'id' + '}', CGI.escape(id.to_s)).sub('{' + 'panel-id' + '}', CGI.escape(panel_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(enrollment_customization_panel_text)

      # return_type
      return_type = opts[:debug_return_type] || 'GetEnrollmentCustomizationPanelText'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['Bearer']

      new_options = opts.merge(
        :operation => :"EnrollmentCustomizationPreviewApi.v1_enrollment_customization_id_text_panel_id_put",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PUT, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: EnrollmentCustomizationPreviewApi#v1_enrollment_customization_id_text_panel_id_put\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Create a Text Panel for a single Enrollment Customization 
    # Create a Text panel for a single enrollment customization
    # @param id [Integer] Enrollment Customization identifier
    # @param enrollment_customization_panel_text [EnrollmentCustomizationPanelText] Enrollment Customization Panel to create
    # @param [Hash] opts the optional parameters
    # @return [GetEnrollmentCustomizationPanelText]
    def v1_enrollment_customization_id_text_post(id, enrollment_customization_panel_text, opts = {})
      data, _status_code, _headers = v1_enrollment_customization_id_text_post_with_http_info(id, enrollment_customization_panel_text, opts)
      data
    end

    # Create a Text Panel for a single Enrollment Customization 
    # Create a Text panel for a single enrollment customization
    # @param id [Integer] Enrollment Customization identifier
    # @param enrollment_customization_panel_text [EnrollmentCustomizationPanelText] Enrollment Customization Panel to create
    # @param [Hash] opts the optional parameters
    # @return [Array<(GetEnrollmentCustomizationPanelText, Integer, Hash)>] GetEnrollmentCustomizationPanelText data, response status code and response headers
    def v1_enrollment_customization_id_text_post_with_http_info(id, enrollment_customization_panel_text, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: EnrollmentCustomizationPreviewApi.v1_enrollment_customization_id_text_post ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling EnrollmentCustomizationPreviewApi.v1_enrollment_customization_id_text_post"
      end
      # verify the required parameter 'enrollment_customization_panel_text' is set
      if @api_client.config.client_side_validation && enrollment_customization_panel_text.nil?
        fail ArgumentError, "Missing the required parameter 'enrollment_customization_panel_text' when calling EnrollmentCustomizationPreviewApi.v1_enrollment_customization_id_text_post"
      end
      # resource path
      local_var_path = '/v1/enrollment-customization/{id}/text'.sub('{' + 'id' + '}', CGI.escape(id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(enrollment_customization_panel_text)

      # return_type
      return_type = opts[:debug_return_type] || 'GetEnrollmentCustomizationPanelText'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['Bearer']

      new_options = opts.merge(
        :operation => :"EnrollmentCustomizationPreviewApi.v1_enrollment_customization_id_text_post",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: EnrollmentCustomizationPreviewApi#v1_enrollment_customization_id_text_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Parse the given string as markdown text and return Html output 
    # Parse the given string as markdown text and return Html output
    # @param markdown [Markdown] Enrollment Customization Panel to create
    # @param [Hash] opts the optional parameters
    # @return [Markdown]
    def v1_enrollment_customization_parse_markdown_post(markdown, opts = {})
      data, _status_code, _headers = v1_enrollment_customization_parse_markdown_post_with_http_info(markdown, opts)
      data
    end

    # Parse the given string as markdown text and return Html output 
    # Parse the given string as markdown text and return Html output
    # @param markdown [Markdown] Enrollment Customization Panel to create
    # @param [Hash] opts the optional parameters
    # @return [Array<(Markdown, Integer, Hash)>] Markdown data, response status code and response headers
    def v1_enrollment_customization_parse_markdown_post_with_http_info(markdown, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: EnrollmentCustomizationPreviewApi.v1_enrollment_customization_parse_markdown_post ...'
      end
      # verify the required parameter 'markdown' is set
      if @api_client.config.client_side_validation && markdown.nil?
        fail ArgumentError, "Missing the required parameter 'markdown' when calling EnrollmentCustomizationPreviewApi.v1_enrollment_customization_parse_markdown_post"
      end
      # resource path
      local_var_path = '/v1/enrollment-customization/parse-markdown'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(markdown)

      # return_type
      return_type = opts[:debug_return_type] || 'Markdown'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['Bearer']

      new_options = opts.merge(
        :operation => :"EnrollmentCustomizationPreviewApi.v1_enrollment_customization_parse_markdown_post",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: EnrollmentCustomizationPreviewApi#v1_enrollment_customization_parse_markdown_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
