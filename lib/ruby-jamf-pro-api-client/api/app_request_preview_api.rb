=begin
#Jamf Pro API

### Overview The Jamf Pro API is a RESTful API for Jamf Pro built to enable consistent and efficient programmatic access to Jamf Pro.<br/><br/> The swagger schema can be found [here](/api/schema/). 

The version of the OpenAPI document: production

Generated by: https://openapi-generator.tech
OpenAPI Generator version: 6.1.0-SNAPSHOT

=end

require 'cgi'

module JamfPro
  class AppRequestPreviewApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Search for Form Input Fields 
    # Search for form input fields
    # @param [Hash] opts the optional parameters
    # @return [AppRequestFormInputFieldSearchResults]
    def v1_app_request_form_input_fields_get(opts = {})
      data, _status_code, _headers = v1_app_request_form_input_fields_get_with_http_info(opts)
      data
    end

    # Search for Form Input Fields 
    # Search for form input fields
    # @param [Hash] opts the optional parameters
    # @return [Array<(AppRequestFormInputFieldSearchResults, Integer, Hash)>] AppRequestFormInputFieldSearchResults data, response status code and response headers
    def v1_app_request_form_input_fields_get_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AppRequestPreviewApi.v1_app_request_form_input_fields_get ...'
      end
      # resource path
      local_var_path = '/v1/app-request/form-input-fields'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'AppRequestFormInputFieldSearchResults'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['Bearer']

      new_options = opts.merge(
        :operation => :"AppRequestPreviewApi.v1_app_request_form_input_fields_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AppRequestPreviewApi#v1_app_request_form_input_fields_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Remove specified Form Input Field record 
    # Removes specified form input field record 
    # @param id [Integer] Instance id of form input field record
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def v1_app_request_form_input_fields_id_delete(id, opts = {})
      v1_app_request_form_input_fields_id_delete_with_http_info(id, opts)
      nil
    end

    # Remove specified Form Input Field record 
    # Removes specified form input field record 
    # @param id [Integer] Instance id of form input field record
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def v1_app_request_form_input_fields_id_delete_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AppRequestPreviewApi.v1_app_request_form_input_fields_id_delete ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling AppRequestPreviewApi.v1_app_request_form_input_fields_id_delete"
      end
      # resource path
      local_var_path = '/v1/app-request/form-input-fields/{id}'.sub('{' + 'id' + '}', CGI.escape(id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || ['Bearer']

      new_options = opts.merge(
        :operation => :"AppRequestPreviewApi.v1_app_request_form_input_fields_id_delete",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AppRequestPreviewApi#v1_app_request_form_input_fields_id_delete\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get specified Form Input Field object 
    # Gets specified form input field object 
    # @param id [Integer] Instance id of form input field record
    # @param [Hash] opts the optional parameters
    # @return [AppRequestFormInputField]
    def v1_app_request_form_input_fields_id_get(id, opts = {})
      data, _status_code, _headers = v1_app_request_form_input_fields_id_get_with_http_info(id, opts)
      data
    end

    # Get specified Form Input Field object 
    # Gets specified form input field object 
    # @param id [Integer] Instance id of form input field record
    # @param [Hash] opts the optional parameters
    # @return [Array<(AppRequestFormInputField, Integer, Hash)>] AppRequestFormInputField data, response status code and response headers
    def v1_app_request_form_input_fields_id_get_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AppRequestPreviewApi.v1_app_request_form_input_fields_id_get ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling AppRequestPreviewApi.v1_app_request_form_input_fields_id_get"
      end
      # resource path
      local_var_path = '/v1/app-request/form-input-fields/{id}'.sub('{' + 'id' + '}', CGI.escape(id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'AppRequestFormInputField'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['Bearer']

      new_options = opts.merge(
        :operation => :"AppRequestPreviewApi.v1_app_request_form_input_fields_id_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AppRequestPreviewApi#v1_app_request_form_input_fields_id_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Update specified Form Input Field object 
    # Update specified form input field object 
    # @param id [Integer] Instance id of form input field record
    # @param app_request_form_input_field [AppRequestFormInputField] form input field object to create. ids defined in this body will be ignored
    # @param [Hash] opts the optional parameters
    # @return [AppRequestFormInputField]
    def v1_app_request_form_input_fields_id_put(id, app_request_form_input_field, opts = {})
      data, _status_code, _headers = v1_app_request_form_input_fields_id_put_with_http_info(id, app_request_form_input_field, opts)
      data
    end

    # Update specified Form Input Field object 
    # Update specified form input field object 
    # @param id [Integer] Instance id of form input field record
    # @param app_request_form_input_field [AppRequestFormInputField] form input field object to create. ids defined in this body will be ignored
    # @param [Hash] opts the optional parameters
    # @return [Array<(AppRequestFormInputField, Integer, Hash)>] AppRequestFormInputField data, response status code and response headers
    def v1_app_request_form_input_fields_id_put_with_http_info(id, app_request_form_input_field, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AppRequestPreviewApi.v1_app_request_form_input_fields_id_put ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling AppRequestPreviewApi.v1_app_request_form_input_fields_id_put"
      end
      # verify the required parameter 'app_request_form_input_field' is set
      if @api_client.config.client_side_validation && app_request_form_input_field.nil?
        fail ArgumentError, "Missing the required parameter 'app_request_form_input_field' when calling AppRequestPreviewApi.v1_app_request_form_input_fields_id_put"
      end
      # resource path
      local_var_path = '/v1/app-request/form-input-fields/{id}'.sub('{' + 'id' + '}', CGI.escape(id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(app_request_form_input_field)

      # return_type
      return_type = opts[:debug_return_type] || 'AppRequestFormInputField'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['Bearer']

      new_options = opts.merge(
        :operation => :"AppRequestPreviewApi.v1_app_request_form_input_fields_id_put",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PUT, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AppRequestPreviewApi#v1_app_request_form_input_fields_id_put\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Create Form Input Field record 
    # Create form input field record 
    # @param app_request_form_input_field [AppRequestFormInputField] form input field object to create. ids defined in this body will be ignored
    # @param [Hash] opts the optional parameters
    # @return [AppRequestFormInputField]
    def v1_app_request_form_input_fields_post(app_request_form_input_field, opts = {})
      data, _status_code, _headers = v1_app_request_form_input_fields_post_with_http_info(app_request_form_input_field, opts)
      data
    end

    # Create Form Input Field record 
    # Create form input field record 
    # @param app_request_form_input_field [AppRequestFormInputField] form input field object to create. ids defined in this body will be ignored
    # @param [Hash] opts the optional parameters
    # @return [Array<(AppRequestFormInputField, Integer, Hash)>] AppRequestFormInputField data, response status code and response headers
    def v1_app_request_form_input_fields_post_with_http_info(app_request_form_input_field, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AppRequestPreviewApi.v1_app_request_form_input_fields_post ...'
      end
      # verify the required parameter 'app_request_form_input_field' is set
      if @api_client.config.client_side_validation && app_request_form_input_field.nil?
        fail ArgumentError, "Missing the required parameter 'app_request_form_input_field' when calling AppRequestPreviewApi.v1_app_request_form_input_fields_post"
      end
      # resource path
      local_var_path = '/v1/app-request/form-input-fields'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(app_request_form_input_field)

      # return_type
      return_type = opts[:debug_return_type] || 'AppRequestFormInputField'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['Bearer']

      new_options = opts.merge(
        :operation => :"AppRequestPreviewApi.v1_app_request_form_input_fields_post",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AppRequestPreviewApi#v1_app_request_form_input_fields_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Replace all Form Input Fields 
    # Replace all form input fields. Will delete, update, and create all input fields accordingly. 
    # @param app_request_form_input_field [Array<AppRequestFormInputField>] list of form input fields to replace all existing fields. Will delete, update, and create all input fields accordingly.
    # @param [Hash] opts the optional parameters
    # @return [Array<AppRequestFormInputField>]
    def v1_app_request_form_input_fields_put(app_request_form_input_field, opts = {})
      data, _status_code, _headers = v1_app_request_form_input_fields_put_with_http_info(app_request_form_input_field, opts)
      data
    end

    # Replace all Form Input Fields 
    # Replace all form input fields. Will delete, update, and create all input fields accordingly. 
    # @param app_request_form_input_field [Array<AppRequestFormInputField>] list of form input fields to replace all existing fields. Will delete, update, and create all input fields accordingly.
    # @param [Hash] opts the optional parameters
    # @return [Array<(Array<AppRequestFormInputField>, Integer, Hash)>] Array<AppRequestFormInputField> data, response status code and response headers
    def v1_app_request_form_input_fields_put_with_http_info(app_request_form_input_field, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AppRequestPreviewApi.v1_app_request_form_input_fields_put ...'
      end
      # verify the required parameter 'app_request_form_input_field' is set
      if @api_client.config.client_side_validation && app_request_form_input_field.nil?
        fail ArgumentError, "Missing the required parameter 'app_request_form_input_field' when calling AppRequestPreviewApi.v1_app_request_form_input_fields_put"
      end
      # resource path
      local_var_path = '/v1/app-request/form-input-fields'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(app_request_form_input_field)

      # return_type
      return_type = opts[:debug_return_type] || 'Array<AppRequestFormInputField>'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['Bearer']

      new_options = opts.merge(
        :operation => :"AppRequestPreviewApi.v1_app_request_form_input_fields_put",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PUT, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AppRequestPreviewApi#v1_app_request_form_input_fields_put\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get Applicastion Request Settings 
    # Get app request settings 
    # @param [Hash] opts the optional parameters
    # @return [AppRequestSettings]
    def v1_app_request_settings_get(opts = {})
      data, _status_code, _headers = v1_app_request_settings_get_with_http_info(opts)
      data
    end

    # Get Applicastion Request Settings 
    # Get app request settings 
    # @param [Hash] opts the optional parameters
    # @return [Array<(AppRequestSettings, Integer, Hash)>] AppRequestSettings data, response status code and response headers
    def v1_app_request_settings_get_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AppRequestPreviewApi.v1_app_request_settings_get ...'
      end
      # resource path
      local_var_path = '/v1/app-request/settings'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'AppRequestSettings'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['Bearer']

      new_options = opts.merge(
        :operation => :"AppRequestPreviewApi.v1_app_request_settings_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AppRequestPreviewApi#v1_app_request_settings_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Update Application Request Settings 
    # Update app request settings 
    # @param app_request_settings [AppRequestSettings] App request settings object
    # @param [Hash] opts the optional parameters
    # @return [AppRequestSettings]
    def v1_app_request_settings_put(app_request_settings, opts = {})
      data, _status_code, _headers = v1_app_request_settings_put_with_http_info(app_request_settings, opts)
      data
    end

    # Update Application Request Settings 
    # Update app request settings 
    # @param app_request_settings [AppRequestSettings] App request settings object
    # @param [Hash] opts the optional parameters
    # @return [Array<(AppRequestSettings, Integer, Hash)>] AppRequestSettings data, response status code and response headers
    def v1_app_request_settings_put_with_http_info(app_request_settings, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AppRequestPreviewApi.v1_app_request_settings_put ...'
      end
      # verify the required parameter 'app_request_settings' is set
      if @api_client.config.client_side_validation && app_request_settings.nil?
        fail ArgumentError, "Missing the required parameter 'app_request_settings' when calling AppRequestPreviewApi.v1_app_request_settings_put"
      end
      # resource path
      local_var_path = '/v1/app-request/settings'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(app_request_settings)

      # return_type
      return_type = opts[:debug_return_type] || 'AppRequestSettings'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['Bearer']

      new_options = opts.merge(
        :operation => :"AppRequestPreviewApi.v1_app_request_settings_put",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PUT, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AppRequestPreviewApi#v1_app_request_settings_put\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
