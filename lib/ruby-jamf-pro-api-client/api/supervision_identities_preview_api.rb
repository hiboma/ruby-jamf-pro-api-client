=begin
#Jamf Pro API

### Overview The Jamf Pro API is a RESTful API for Jamf Pro built to enable consistent and efficient programmatic access to Jamf Pro.<br/><br/> The swagger schema can be found [here](/api/schema/). 

The version of the OpenAPI document: production

Generated by: https://openapi-generator.tech
OpenAPI Generator version: 6.1.0-SNAPSHOT

=end

require 'cgi'

module JamfPro
  class SupervisionIdentitiesPreviewApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Search for sorted and paged Supervision Identities 
    # Search for sorted and paged supervision identities
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :page  (default to 0)
    # @option opts [Integer] :size  (default to 100)
    # @option opts [Integer] :pagesize  (default to 100)
    # @option opts [Integer] :page_size  (default to 100)
    # @option opts [String] :sort Sorting criteria in the format: property:asc/desc. Multiple sort criteria are supported and must be separated with a comma. Example: sort&#x3D;date:desc,name:asc  (default to 'id:asc')
    # @return [SupervisionIdentitySearchResults]
    def v1_supervision_identities_get(opts = {})
      data, _status_code, _headers = v1_supervision_identities_get_with_http_info(opts)
      data
    end

    # Search for sorted and paged Supervision Identities 
    # Search for sorted and paged supervision identities
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :page  (default to 0)
    # @option opts [Integer] :size  (default to 100)
    # @option opts [Integer] :pagesize  (default to 100)
    # @option opts [Integer] :page_size  (default to 100)
    # @option opts [String] :sort Sorting criteria in the format: property:asc/desc. Multiple sort criteria are supported and must be separated with a comma. Example: sort&#x3D;date:desc,name:asc  (default to 'id:asc')
    # @return [Array<(SupervisionIdentitySearchResults, Integer, Hash)>] SupervisionIdentitySearchResults data, response status code and response headers
    def v1_supervision_identities_get_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SupervisionIdentitiesPreviewApi.v1_supervision_identities_get ...'
      end
      # resource path
      local_var_path = '/v1/supervision-identities'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'page'] = opts[:'page'] if !opts[:'page'].nil?
      query_params[:'size'] = opts[:'size'] if !opts[:'size'].nil?
      query_params[:'pagesize'] = opts[:'pagesize'] if !opts[:'pagesize'].nil?
      query_params[:'page-size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'sort'] = opts[:'sort'] if !opts[:'sort'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'SupervisionIdentitySearchResults'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['Bearer']

      new_options = opts.merge(
        :operation => :"SupervisionIdentitiesPreviewApi.v1_supervision_identities_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SupervisionIdentitiesPreviewApi#v1_supervision_identities_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Delete a Supervision Identity with the supplied id 
    # Deletes a Supervision Identity with the supplied id
    # @param id [Integer] Supervision Identity identifier
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def v1_supervision_identities_id_delete(id, opts = {})
      v1_supervision_identities_id_delete_with_http_info(id, opts)
      nil
    end

    # Delete a Supervision Identity with the supplied id 
    # Deletes a Supervision Identity with the supplied id
    # @param id [Integer] Supervision Identity identifier
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def v1_supervision_identities_id_delete_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SupervisionIdentitiesPreviewApi.v1_supervision_identities_id_delete ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling SupervisionIdentitiesPreviewApi.v1_supervision_identities_id_delete"
      end
      # resource path
      local_var_path = '/v1/supervision-identities/{id}'.sub('{' + 'id' + '}', CGI.escape(id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || ['Bearer']

      new_options = opts.merge(
        :operation => :"SupervisionIdentitiesPreviewApi.v1_supervision_identities_id_delete",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SupervisionIdentitiesPreviewApi#v1_supervision_identities_id_delete\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Download the Supervision Identity .p12 file 
    # Download the Supervision Identity .p12 file
    # @param id [Integer] Supervision Identity identifier
    # @param [Hash] opts the optional parameters
    # @return [File]
    def v1_supervision_identities_id_download_get(id, opts = {})
      data, _status_code, _headers = v1_supervision_identities_id_download_get_with_http_info(id, opts)
      data
    end

    # Download the Supervision Identity .p12 file 
    # Download the Supervision Identity .p12 file
    # @param id [Integer] Supervision Identity identifier
    # @param [Hash] opts the optional parameters
    # @return [Array<(File, Integer, Hash)>] File data, response status code and response headers
    def v1_supervision_identities_id_download_get_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SupervisionIdentitiesPreviewApi.v1_supervision_identities_id_download_get ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling SupervisionIdentitiesPreviewApi.v1_supervision_identities_id_download_get"
      end
      # resource path
      local_var_path = '/v1/supervision-identities/{id}/download'.sub('{' + 'id' + '}', CGI.escape(id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/octet-stream', 'application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'File'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['Bearer']

      new_options = opts.merge(
        :operation => :"SupervisionIdentitiesPreviewApi.v1_supervision_identities_id_download_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SupervisionIdentitiesPreviewApi#v1_supervision_identities_id_download_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Retrieve a Supervision Identity with the supplied id 
    # Retrieves a Supervision Identity with the supplied id
    # @param id [Integer] Supervision Identity identifier
    # @param [Hash] opts the optional parameters
    # @return [SupervisionIdentity]
    def v1_supervision_identities_id_get(id, opts = {})
      data, _status_code, _headers = v1_supervision_identities_id_get_with_http_info(id, opts)
      data
    end

    # Retrieve a Supervision Identity with the supplied id 
    # Retrieves a Supervision Identity with the supplied id
    # @param id [Integer] Supervision Identity identifier
    # @param [Hash] opts the optional parameters
    # @return [Array<(SupervisionIdentity, Integer, Hash)>] SupervisionIdentity data, response status code and response headers
    def v1_supervision_identities_id_get_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SupervisionIdentitiesPreviewApi.v1_supervision_identities_id_get ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling SupervisionIdentitiesPreviewApi.v1_supervision_identities_id_get"
      end
      # resource path
      local_var_path = '/v1/supervision-identities/{id}'.sub('{' + 'id' + '}', CGI.escape(id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'SupervisionIdentity'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['Bearer']

      new_options = opts.merge(
        :operation => :"SupervisionIdentitiesPreviewApi.v1_supervision_identities_id_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SupervisionIdentitiesPreviewApi#v1_supervision_identities_id_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Update a Supervision Identity with the supplied information 
    # Updates a Supervision Identity with the supplied information
    # @param id [Integer] Supervision Identity identifier
    # @param supervision_identity_update [SupervisionIdentityUpdate] 
    # @param [Hash] opts the optional parameters
    # @return [SupervisionIdentity]
    def v1_supervision_identities_id_put(id, supervision_identity_update, opts = {})
      data, _status_code, _headers = v1_supervision_identities_id_put_with_http_info(id, supervision_identity_update, opts)
      data
    end

    # Update a Supervision Identity with the supplied information 
    # Updates a Supervision Identity with the supplied information
    # @param id [Integer] Supervision Identity identifier
    # @param supervision_identity_update [SupervisionIdentityUpdate] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(SupervisionIdentity, Integer, Hash)>] SupervisionIdentity data, response status code and response headers
    def v1_supervision_identities_id_put_with_http_info(id, supervision_identity_update, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SupervisionIdentitiesPreviewApi.v1_supervision_identities_id_put ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling SupervisionIdentitiesPreviewApi.v1_supervision_identities_id_put"
      end
      # verify the required parameter 'supervision_identity_update' is set
      if @api_client.config.client_side_validation && supervision_identity_update.nil?
        fail ArgumentError, "Missing the required parameter 'supervision_identity_update' when calling SupervisionIdentitiesPreviewApi.v1_supervision_identities_id_put"
      end
      # resource path
      local_var_path = '/v1/supervision-identities/{id}'.sub('{' + 'id' + '}', CGI.escape(id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(supervision_identity_update)

      # return_type
      return_type = opts[:debug_return_type] || 'SupervisionIdentity'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['Bearer']

      new_options = opts.merge(
        :operation => :"SupervisionIdentitiesPreviewApi.v1_supervision_identities_id_put",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PUT, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SupervisionIdentitiesPreviewApi#v1_supervision_identities_id_put\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Create a Supervision Identity for the supplied information 
    # Creates a Supervision Identity for the supplied information
    # @param supervision_identity_create [SupervisionIdentityCreate] 
    # @param [Hash] opts the optional parameters
    # @return [SupervisionIdentity]
    def v1_supervision_identities_post(supervision_identity_create, opts = {})
      data, _status_code, _headers = v1_supervision_identities_post_with_http_info(supervision_identity_create, opts)
      data
    end

    # Create a Supervision Identity for the supplied information 
    # Creates a Supervision Identity for the supplied information
    # @param supervision_identity_create [SupervisionIdentityCreate] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(SupervisionIdentity, Integer, Hash)>] SupervisionIdentity data, response status code and response headers
    def v1_supervision_identities_post_with_http_info(supervision_identity_create, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SupervisionIdentitiesPreviewApi.v1_supervision_identities_post ...'
      end
      # verify the required parameter 'supervision_identity_create' is set
      if @api_client.config.client_side_validation && supervision_identity_create.nil?
        fail ArgumentError, "Missing the required parameter 'supervision_identity_create' when calling SupervisionIdentitiesPreviewApi.v1_supervision_identities_post"
      end
      # resource path
      local_var_path = '/v1/supervision-identities'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(supervision_identity_create)

      # return_type
      return_type = opts[:debug_return_type] || 'SupervisionIdentity'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['Bearer']

      new_options = opts.merge(
        :operation => :"SupervisionIdentitiesPreviewApi.v1_supervision_identities_post",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SupervisionIdentitiesPreviewApi#v1_supervision_identities_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Upload the Supervision Identity .p12 file 
    # Uploads the Supervision Identity .p12 file
    # @param supervision_identity_certificate_upload [SupervisionIdentityCertificateUpload] The base 64 encoded .p12 file alone with other needed information
    # @param [Hash] opts the optional parameters
    # @return [SupervisionIdentity]
    def v1_supervision_identities_upload_post(supervision_identity_certificate_upload, opts = {})
      data, _status_code, _headers = v1_supervision_identities_upload_post_with_http_info(supervision_identity_certificate_upload, opts)
      data
    end

    # Upload the Supervision Identity .p12 file 
    # Uploads the Supervision Identity .p12 file
    # @param supervision_identity_certificate_upload [SupervisionIdentityCertificateUpload] The base 64 encoded .p12 file alone with other needed information
    # @param [Hash] opts the optional parameters
    # @return [Array<(SupervisionIdentity, Integer, Hash)>] SupervisionIdentity data, response status code and response headers
    def v1_supervision_identities_upload_post_with_http_info(supervision_identity_certificate_upload, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SupervisionIdentitiesPreviewApi.v1_supervision_identities_upload_post ...'
      end
      # verify the required parameter 'supervision_identity_certificate_upload' is set
      if @api_client.config.client_side_validation && supervision_identity_certificate_upload.nil?
        fail ArgumentError, "Missing the required parameter 'supervision_identity_certificate_upload' when calling SupervisionIdentitiesPreviewApi.v1_supervision_identities_upload_post"
      end
      # resource path
      local_var_path = '/v1/supervision-identities/upload'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(supervision_identity_certificate_upload)

      # return_type
      return_type = opts[:debug_return_type] || 'SupervisionIdentity'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['Bearer']

      new_options = opts.merge(
        :operation => :"SupervisionIdentitiesPreviewApi.v1_supervision_identities_upload_post",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SupervisionIdentitiesPreviewApi#v1_supervision_identities_upload_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
