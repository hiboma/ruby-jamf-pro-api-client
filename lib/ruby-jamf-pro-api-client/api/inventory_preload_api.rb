=begin
#Jamf Pro API

### Overview The Jamf Pro API is a RESTful API for Jamf Pro built to enable consistent and efficient programmatic access to Jamf Pro.<br/><br/> The swagger schema can be found [here](/api/schema/). 

The version of the OpenAPI document: production

Generated by: https://openapi-generator.tech
OpenAPI Generator version: 6.1.0-SNAPSHOT

=end

require 'cgi'

module JamfPro
  class InventoryPreloadApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Get the Inventory Preload CSV template 
    # Retrieves the Inventory Preload CSV template.
    # @param [Hash] opts the optional parameters
    # @return [Object]
    def inventory_preload_csv_template_get(opts = {})
      data, _status_code, _headers = inventory_preload_csv_template_get_with_http_info(opts)
      data
    end

    # Get the Inventory Preload CSV template 
    # Retrieves the Inventory Preload CSV template.
    # @param [Hash] opts the optional parameters
    # @return [Array<(Object, Integer, Hash)>] Object data, response status code and response headers
    def inventory_preload_csv_template_get_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: InventoryPreloadApi.inventory_preload_csv_template_get ...'
      end
      # resource path
      local_var_path = '/inventory-preload/csv-template'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['text/csv'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'Object'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['Bearer']

      new_options = opts.merge(
        :operation => :"InventoryPreloadApi.inventory_preload_csv_template_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: InventoryPreloadApi#inventory_preload_csv_template_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Delete all Inventory Preload records 
    # Deletes all Inventory Preload records.
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def inventory_preload_delete(opts = {})
      inventory_preload_delete_with_http_info(opts)
      nil
    end

    # Delete all Inventory Preload records 
    # Deletes all Inventory Preload records.
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def inventory_preload_delete_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: InventoryPreloadApi.inventory_preload_delete ...'
      end
      # resource path
      local_var_path = '/inventory-preload'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || ['Bearer']

      new_options = opts.merge(
        :operation => :"InventoryPreloadApi.inventory_preload_delete",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: InventoryPreloadApi#inventory_preload_delete\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Return all Inventory Preload records 
    # Returns all Inventory Preload records.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :page  (default to 0)
    # @option opts [Integer] :pagesize  (default to 100)
    # @option opts [String] :sort  (default to 'ASC')
    # @option opts [String] :sort_by  (default to 'id')
    # @return [Array<InventoryPreloadRecordSearchResults>]
    def inventory_preload_get(opts = {})
      data, _status_code, _headers = inventory_preload_get_with_http_info(opts)
      data
    end

    # Return all Inventory Preload records 
    # Returns all Inventory Preload records.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :page  (default to 0)
    # @option opts [Integer] :pagesize  (default to 100)
    # @option opts [String] :sort  (default to 'ASC')
    # @option opts [String] :sort_by  (default to 'id')
    # @return [Array<(Array<InventoryPreloadRecordSearchResults>, Integer, Hash)>] Array<InventoryPreloadRecordSearchResults> data, response status code and response headers
    def inventory_preload_get_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: InventoryPreloadApi.inventory_preload_get ...'
      end
      allowable_values = ["ASC", "DESC"]
      if @api_client.config.client_side_validation && opts[:'sort'] && !allowable_values.include?(opts[:'sort'])
        fail ArgumentError, "invalid value for \"sort\", must be one of #{allowable_values}"
      end
      # resource path
      local_var_path = '/inventory-preload'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'page'] = opts[:'page'] if !opts[:'page'].nil?
      query_params[:'pagesize'] = opts[:'pagesize'] if !opts[:'pagesize'].nil?
      query_params[:'sort'] = opts[:'sort'] if !opts[:'sort'].nil?
      query_params[:'sortBy'] = opts[:'sort_by'] if !opts[:'sort_by'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/csv'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'Array<InventoryPreloadRecordSearchResults>'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['Bearer']

      new_options = opts.merge(
        :operation => :"InventoryPreloadApi.inventory_preload_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: InventoryPreloadApi#inventory_preload_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get Inventory Preload history entries 
    # Gets Inventory Preload history entries.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :page  (default to 0)
    # @option opts [Integer] :size  (default to 100)
    # @option opts [Integer] :pagesize  (default to 100)
    # @option opts [Integer] :page_size  (default to 100)
    # @option opts [String] :sort Sorting criteria in the format: property:asc/desc. Default sort is date:desc. Multiple sort criteria are supported and must be separated with a comma. Example: sort&#x3D;date:desc,name:asc  (default to 'date:desc')
    # @return [HistorySearchResults]
    def inventory_preload_history_get(opts = {})
      data, _status_code, _headers = inventory_preload_history_get_with_http_info(opts)
      data
    end

    # Get Inventory Preload history entries 
    # Gets Inventory Preload history entries.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :page  (default to 0)
    # @option opts [Integer] :size  (default to 100)
    # @option opts [Integer] :pagesize  (default to 100)
    # @option opts [Integer] :page_size  (default to 100)
    # @option opts [String] :sort Sorting criteria in the format: property:asc/desc. Default sort is date:desc. Multiple sort criteria are supported and must be separated with a comma. Example: sort&#x3D;date:desc,name:asc  (default to 'date:desc')
    # @return [Array<(HistorySearchResults, Integer, Hash)>] HistorySearchResults data, response status code and response headers
    def inventory_preload_history_get_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: InventoryPreloadApi.inventory_preload_history_get ...'
      end
      # resource path
      local_var_path = '/inventory-preload/history'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'page'] = opts[:'page'] if !opts[:'page'].nil?
      query_params[:'size'] = opts[:'size'] if !opts[:'size'].nil?
      query_params[:'pagesize'] = opts[:'pagesize'] if !opts[:'pagesize'].nil?
      query_params[:'page-size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'sort'] = opts[:'sort'] if !opts[:'sort'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'HistorySearchResults'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['Bearer']

      new_options = opts.merge(
        :operation => :"InventoryPreloadApi.inventory_preload_history_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: InventoryPreloadApi#inventory_preload_history_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Add Inventory Preload history object notes 
    # Adds Inventory Preload history object notes.
    # @param object_history_note [ObjectHistoryNote] History notes to create
    # @param [Hash] opts the optional parameters
    # @return [ObjectHistory]
    def inventory_preload_history_notes_post(object_history_note, opts = {})
      data, _status_code, _headers = inventory_preload_history_notes_post_with_http_info(object_history_note, opts)
      data
    end

    # Add Inventory Preload history object notes 
    # Adds Inventory Preload history object notes.
    # @param object_history_note [ObjectHistoryNote] History notes to create
    # @param [Hash] opts the optional parameters
    # @return [Array<(ObjectHistory, Integer, Hash)>] ObjectHistory data, response status code and response headers
    def inventory_preload_history_notes_post_with_http_info(object_history_note, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: InventoryPreloadApi.inventory_preload_history_notes_post ...'
      end
      # verify the required parameter 'object_history_note' is set
      if @api_client.config.client_side_validation && object_history_note.nil?
        fail ArgumentError, "Missing the required parameter 'object_history_note' when calling InventoryPreloadApi.inventory_preload_history_notes_post"
      end
      # resource path
      local_var_path = '/inventory-preload/history/notes'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(object_history_note)

      # return_type
      return_type = opts[:debug_return_type] || 'ObjectHistory'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['Bearer']

      new_options = opts.merge(
        :operation => :"InventoryPreloadApi.inventory_preload_history_notes_post",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: InventoryPreloadApi#inventory_preload_history_notes_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Delete an Inventory Preload record 
    # Deletes an Inventory Preload record.
    # @param id [Integer] Inventory Preload identifier
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def inventory_preload_id_delete(id, opts = {})
      inventory_preload_id_delete_with_http_info(id, opts)
      nil
    end

    # Delete an Inventory Preload record 
    # Deletes an Inventory Preload record.
    # @param id [Integer] Inventory Preload identifier
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def inventory_preload_id_delete_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: InventoryPreloadApi.inventory_preload_id_delete ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling InventoryPreloadApi.inventory_preload_id_delete"
      end
      # resource path
      local_var_path = '/inventory-preload/{id}'.sub('{' + 'id' + '}', CGI.escape(id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || ['Bearer']

      new_options = opts.merge(
        :operation => :"InventoryPreloadApi.inventory_preload_id_delete",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: InventoryPreloadApi#inventory_preload_id_delete\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get an Inventory Preload record 
    # Retrieves an Inventory Preload record.
    # @param id [Integer] Inventory Preload identifier
    # @param [Hash] opts the optional parameters
    # @return [InventoryPreloadRecord]
    def inventory_preload_id_get(id, opts = {})
      data, _status_code, _headers = inventory_preload_id_get_with_http_info(id, opts)
      data
    end

    # Get an Inventory Preload record 
    # Retrieves an Inventory Preload record.
    # @param id [Integer] Inventory Preload identifier
    # @param [Hash] opts the optional parameters
    # @return [Array<(InventoryPreloadRecord, Integer, Hash)>] InventoryPreloadRecord data, response status code and response headers
    def inventory_preload_id_get_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: InventoryPreloadApi.inventory_preload_id_get ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling InventoryPreloadApi.inventory_preload_id_get"
      end
      # resource path
      local_var_path = '/inventory-preload/{id}'.sub('{' + 'id' + '}', CGI.escape(id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'InventoryPreloadRecord'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['Bearer']

      new_options = opts.merge(
        :operation => :"InventoryPreloadApi.inventory_preload_id_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: InventoryPreloadApi#inventory_preload_id_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Update an Inventory Preload record 
    # Updates an Inventory Preload record.
    # @param id [Integer] Inventory Preload identifier
    # @param inventory_preload_record [InventoryPreloadRecord] Inventory Preload record to update
    # @param [Hash] opts the optional parameters
    # @return [InventoryPreloadRecord]
    def inventory_preload_id_put(id, inventory_preload_record, opts = {})
      data, _status_code, _headers = inventory_preload_id_put_with_http_info(id, inventory_preload_record, opts)
      data
    end

    # Update an Inventory Preload record 
    # Updates an Inventory Preload record.
    # @param id [Integer] Inventory Preload identifier
    # @param inventory_preload_record [InventoryPreloadRecord] Inventory Preload record to update
    # @param [Hash] opts the optional parameters
    # @return [Array<(InventoryPreloadRecord, Integer, Hash)>] InventoryPreloadRecord data, response status code and response headers
    def inventory_preload_id_put_with_http_info(id, inventory_preload_record, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: InventoryPreloadApi.inventory_preload_id_put ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling InventoryPreloadApi.inventory_preload_id_put"
      end
      # verify the required parameter 'inventory_preload_record' is set
      if @api_client.config.client_side_validation && inventory_preload_record.nil?
        fail ArgumentError, "Missing the required parameter 'inventory_preload_record' when calling InventoryPreloadApi.inventory_preload_id_put"
      end
      # resource path
      local_var_path = '/inventory-preload/{id}'.sub('{' + 'id' + '}', CGI.escape(id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(inventory_preload_record)

      # return_type
      return_type = opts[:debug_return_type] || 'InventoryPreloadRecord'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['Bearer']

      new_options = opts.merge(
        :operation => :"InventoryPreloadApi.inventory_preload_id_put",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PUT, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: InventoryPreloadApi#inventory_preload_id_put\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Create a new Inventory Preload record using JSON or CSV 
    # Create a new Inventory Preload record using JSON or CSV. A CSV template can be downloaded from /api/inventory-preload/csv-template. Serial number and device type are required. All other fields are optional. When a matching serial number exists in the Inventory Preload data, the record will be overwritten with the CSV data. If the CSV file contains a new username and an email address is provided, the new user is created in Jamf Pro. If the CSV file contains an existing username, the following user-related fields are updated in Jamf Pro. Full Name, Email Address, Phone Number, Position. This endpoint does not do full validation of each record in the CSV data. To do full validation, use the /inventory-preload/validate-csv endpoint first. 
    # @param inventory_preload_record [InventoryPreloadRecord] Inventory Preload record or records to be created
    # @param [Hash] opts the optional parameters
    # @return [InventoryPreloadRecord]
    def inventory_preload_post(inventory_preload_record, opts = {})
      data, _status_code, _headers = inventory_preload_post_with_http_info(inventory_preload_record, opts)
      data
    end

    # Create a new Inventory Preload record using JSON or CSV 
    # Create a new Inventory Preload record using JSON or CSV. A CSV template can be downloaded from /api/inventory-preload/csv-template. Serial number and device type are required. All other fields are optional. When a matching serial number exists in the Inventory Preload data, the record will be overwritten with the CSV data. If the CSV file contains a new username and an email address is provided, the new user is created in Jamf Pro. If the CSV file contains an existing username, the following user-related fields are updated in Jamf Pro. Full Name, Email Address, Phone Number, Position. This endpoint does not do full validation of each record in the CSV data. To do full validation, use the /inventory-preload/validate-csv endpoint first. 
    # @param inventory_preload_record [InventoryPreloadRecord] Inventory Preload record or records to be created
    # @param [Hash] opts the optional parameters
    # @return [Array<(InventoryPreloadRecord, Integer, Hash)>] InventoryPreloadRecord data, response status code and response headers
    def inventory_preload_post_with_http_info(inventory_preload_record, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: InventoryPreloadApi.inventory_preload_post ...'
      end
      # verify the required parameter 'inventory_preload_record' is set
      if @api_client.config.client_side_validation && inventory_preload_record.nil?
        fail ArgumentError, "Missing the required parameter 'inventory_preload_record' when calling InventoryPreloadApi.inventory_preload_post"
      end
      # resource path
      local_var_path = '/inventory-preload'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json', 'text/csv'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(inventory_preload_record)

      # return_type
      return_type = opts[:debug_return_type] || 'InventoryPreloadRecord'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['Bearer']

      new_options = opts.merge(
        :operation => :"InventoryPreloadApi.inventory_preload_post",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: InventoryPreloadApi#inventory_preload_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Validate a given CSV file 
    # Validate a given CSV file. Serial number and device type are required. All other fields are optional. A CSV template can be downloaded from /api/inventory-preload/csv-template. 
    # @param body [Object] Inventory Preload records to be validated. A CSV template can be downloaded from /api/inventory-preload/csv-template
    # @param [Hash] opts the optional parameters
    # @return [InventoryPreloadCsvValidationSuccess]
    def inventory_preload_validate_csv_post(body, opts = {})
      data, _status_code, _headers = inventory_preload_validate_csv_post_with_http_info(body, opts)
      data
    end

    # Validate a given CSV file 
    # Validate a given CSV file. Serial number and device type are required. All other fields are optional. A CSV template can be downloaded from /api/inventory-preload/csv-template. 
    # @param body [Object] Inventory Preload records to be validated. A CSV template can be downloaded from /api/inventory-preload/csv-template
    # @param [Hash] opts the optional parameters
    # @return [Array<(InventoryPreloadCsvValidationSuccess, Integer, Hash)>] InventoryPreloadCsvValidationSuccess data, response status code and response headers
    def inventory_preload_validate_csv_post_with_http_info(body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: InventoryPreloadApi.inventory_preload_validate_csv_post ...'
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling InventoryPreloadApi.inventory_preload_validate_csv_post"
      end
      # resource path
      local_var_path = '/inventory-preload/validate-csv'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['text/csv'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(body)

      # return_type
      return_type = opts[:debug_return_type] || 'InventoryPreloadCsvValidationSuccess'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['Bearer']

      new_options = opts.merge(
        :operation => :"InventoryPreloadApi.inventory_preload_validate_csv_post",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: InventoryPreloadApi#inventory_preload_validate_csv_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Retrieve the Inventory Preload CSV template 
    # Retrieves the Inventory Preload CSV template.
    # @param [Hash] opts the optional parameters
    # @return [Object]
    def v1_inventory_preload_csv_template_get(opts = {})
      data, _status_code, _headers = v1_inventory_preload_csv_template_get_with_http_info(opts)
      data
    end

    # Retrieve the Inventory Preload CSV template 
    # Retrieves the Inventory Preload CSV template.
    # @param [Hash] opts the optional parameters
    # @return [Array<(Object, Integer, Hash)>] Object data, response status code and response headers
    def v1_inventory_preload_csv_template_get_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: InventoryPreloadApi.v1_inventory_preload_csv_template_get ...'
      end
      # resource path
      local_var_path = '/v1/inventory-preload/csv-template'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['text/csv'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'Object'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['Bearer']

      new_options = opts.merge(
        :operation => :"InventoryPreloadApi.v1_inventory_preload_csv_template_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: InventoryPreloadApi#v1_inventory_preload_csv_template_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Delete all Inventory Preload records 
    # Deletes all Inventory Preload records.
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def v1_inventory_preload_delete(opts = {})
      v1_inventory_preload_delete_with_http_info(opts)
      nil
    end

    # Delete all Inventory Preload records 
    # Deletes all Inventory Preload records.
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def v1_inventory_preload_delete_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: InventoryPreloadApi.v1_inventory_preload_delete ...'
      end
      # resource path
      local_var_path = '/v1/inventory-preload'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || ['Bearer']

      new_options = opts.merge(
        :operation => :"InventoryPreloadApi.v1_inventory_preload_delete",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: InventoryPreloadApi#v1_inventory_preload_delete\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Return all Inventory Preload records 
    # Returns all Inventory Preload records.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :page  (default to 0)
    # @option opts [Integer] :size  (default to 100)
    # @option opts [Integer] :pagesize  (default to 100)
    # @option opts [Integer] :page_size  (default to 100)
    # @option opts [String] :sort Sorting criteria in the format: property:asc/desc. Default sort is id:asc. Multiple sort criteria are supported and must be separated with a comma. Example: sort&#x3D;date:desc,name:asc  (default to 'id:asc')
    # @return [InventoryPreloadRecordSearchResults]
    def v1_inventory_preload_get(opts = {})
      data, _status_code, _headers = v1_inventory_preload_get_with_http_info(opts)
      data
    end

    # Return all Inventory Preload records 
    # Returns all Inventory Preload records.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :page  (default to 0)
    # @option opts [Integer] :size  (default to 100)
    # @option opts [Integer] :pagesize  (default to 100)
    # @option opts [Integer] :page_size  (default to 100)
    # @option opts [String] :sort Sorting criteria in the format: property:asc/desc. Default sort is id:asc. Multiple sort criteria are supported and must be separated with a comma. Example: sort&#x3D;date:desc,name:asc  (default to 'id:asc')
    # @return [Array<(InventoryPreloadRecordSearchResults, Integer, Hash)>] InventoryPreloadRecordSearchResults data, response status code and response headers
    def v1_inventory_preload_get_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: InventoryPreloadApi.v1_inventory_preload_get ...'
      end
      # resource path
      local_var_path = '/v1/inventory-preload'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'page'] = opts[:'page'] if !opts[:'page'].nil?
      query_params[:'size'] = opts[:'size'] if !opts[:'size'].nil?
      query_params[:'pagesize'] = opts[:'pagesize'] if !opts[:'pagesize'].nil?
      query_params[:'page-size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'sort'] = opts[:'sort'] if !opts[:'sort'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/csv'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'InventoryPreloadRecordSearchResults'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['Bearer']

      new_options = opts.merge(
        :operation => :"InventoryPreloadApi.v1_inventory_preload_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: InventoryPreloadApi#v1_inventory_preload_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get Inventory Preload history entries 
    # Gets Inventory Preload history entries.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :page  (default to 0)
    # @option opts [Integer] :size  (default to 100)
    # @option opts [Integer] :pagesize  (default to 100)
    # @option opts [Integer] :page_size  (default to 100)
    # @option opts [String] :sort Sorting criteria in the format: property:asc/desc. Default sort is date:desc. Multiple sort criteria are supported and must be separated with a comma. Example: sort&#x3D;date:desc,name:asc  (default to 'date:desc')
    # @return [HistorySearchResults]
    def v1_inventory_preload_history_get(opts = {})
      data, _status_code, _headers = v1_inventory_preload_history_get_with_http_info(opts)
      data
    end

    # Get Inventory Preload history entries 
    # Gets Inventory Preload history entries.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :page  (default to 0)
    # @option opts [Integer] :size  (default to 100)
    # @option opts [Integer] :pagesize  (default to 100)
    # @option opts [Integer] :page_size  (default to 100)
    # @option opts [String] :sort Sorting criteria in the format: property:asc/desc. Default sort is date:desc. Multiple sort criteria are supported and must be separated with a comma. Example: sort&#x3D;date:desc,name:asc  (default to 'date:desc')
    # @return [Array<(HistorySearchResults, Integer, Hash)>] HistorySearchResults data, response status code and response headers
    def v1_inventory_preload_history_get_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: InventoryPreloadApi.v1_inventory_preload_history_get ...'
      end
      # resource path
      local_var_path = '/v1/inventory-preload/history'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'page'] = opts[:'page'] if !opts[:'page'].nil?
      query_params[:'size'] = opts[:'size'] if !opts[:'size'].nil?
      query_params[:'pagesize'] = opts[:'pagesize'] if !opts[:'pagesize'].nil?
      query_params[:'page-size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'sort'] = opts[:'sort'] if !opts[:'sort'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'HistorySearchResults'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['Bearer']

      new_options = opts.merge(
        :operation => :"InventoryPreloadApi.v1_inventory_preload_history_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: InventoryPreloadApi#v1_inventory_preload_history_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Add Inventory Preload history object notes 
    # Adds Inventory Preload history object notes.
    # @param object_history_note [ObjectHistoryNote] History notes to create
    # @param [Hash] opts the optional parameters
    # @return [ObjectHistory]
    def v1_inventory_preload_history_post(object_history_note, opts = {})
      data, _status_code, _headers = v1_inventory_preload_history_post_with_http_info(object_history_note, opts)
      data
    end

    # Add Inventory Preload history object notes 
    # Adds Inventory Preload history object notes.
    # @param object_history_note [ObjectHistoryNote] History notes to create
    # @param [Hash] opts the optional parameters
    # @return [Array<(ObjectHistory, Integer, Hash)>] ObjectHistory data, response status code and response headers
    def v1_inventory_preload_history_post_with_http_info(object_history_note, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: InventoryPreloadApi.v1_inventory_preload_history_post ...'
      end
      # verify the required parameter 'object_history_note' is set
      if @api_client.config.client_side_validation && object_history_note.nil?
        fail ArgumentError, "Missing the required parameter 'object_history_note' when calling InventoryPreloadApi.v1_inventory_preload_history_post"
      end
      # resource path
      local_var_path = '/v1/inventory-preload/history'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(object_history_note)

      # return_type
      return_type = opts[:debug_return_type] || 'ObjectHistory'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['Bearer']

      new_options = opts.merge(
        :operation => :"InventoryPreloadApi.v1_inventory_preload_history_post",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: InventoryPreloadApi#v1_inventory_preload_history_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Delete an Inventory Preload record 
    # Deletes an Inventory Preload record.
    # @param id [Integer] Inventory Preload identifier
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def v1_inventory_preload_id_delete(id, opts = {})
      v1_inventory_preload_id_delete_with_http_info(id, opts)
      nil
    end

    # Delete an Inventory Preload record 
    # Deletes an Inventory Preload record.
    # @param id [Integer] Inventory Preload identifier
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def v1_inventory_preload_id_delete_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: InventoryPreloadApi.v1_inventory_preload_id_delete ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling InventoryPreloadApi.v1_inventory_preload_id_delete"
      end
      # resource path
      local_var_path = '/v1/inventory-preload/{id}'.sub('{' + 'id' + '}', CGI.escape(id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || ['Bearer']

      new_options = opts.merge(
        :operation => :"InventoryPreloadApi.v1_inventory_preload_id_delete",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: InventoryPreloadApi#v1_inventory_preload_id_delete\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get an Inventory Preload record 
    # Retrieves an Inventory Preload record.
    # @param id [Integer] Inventory Preload identifier
    # @param [Hash] opts the optional parameters
    # @return [InventoryPreloadRecord]
    def v1_inventory_preload_id_get(id, opts = {})
      data, _status_code, _headers = v1_inventory_preload_id_get_with_http_info(id, opts)
      data
    end

    # Get an Inventory Preload record 
    # Retrieves an Inventory Preload record.
    # @param id [Integer] Inventory Preload identifier
    # @param [Hash] opts the optional parameters
    # @return [Array<(InventoryPreloadRecord, Integer, Hash)>] InventoryPreloadRecord data, response status code and response headers
    def v1_inventory_preload_id_get_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: InventoryPreloadApi.v1_inventory_preload_id_get ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling InventoryPreloadApi.v1_inventory_preload_id_get"
      end
      # resource path
      local_var_path = '/v1/inventory-preload/{id}'.sub('{' + 'id' + '}', CGI.escape(id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'InventoryPreloadRecord'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['Bearer']

      new_options = opts.merge(
        :operation => :"InventoryPreloadApi.v1_inventory_preload_id_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: InventoryPreloadApi#v1_inventory_preload_id_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Update an Inventory Preload record 
    # Updates an Inventory Preload record.
    # @param id [Integer] Inventory Preload identifier
    # @param inventory_preload_record [InventoryPreloadRecord] Inventory Preload record to update
    # @param [Hash] opts the optional parameters
    # @return [InventoryPreloadRecord]
    def v1_inventory_preload_id_put(id, inventory_preload_record, opts = {})
      data, _status_code, _headers = v1_inventory_preload_id_put_with_http_info(id, inventory_preload_record, opts)
      data
    end

    # Update an Inventory Preload record 
    # Updates an Inventory Preload record.
    # @param id [Integer] Inventory Preload identifier
    # @param inventory_preload_record [InventoryPreloadRecord] Inventory Preload record to update
    # @param [Hash] opts the optional parameters
    # @return [Array<(InventoryPreloadRecord, Integer, Hash)>] InventoryPreloadRecord data, response status code and response headers
    def v1_inventory_preload_id_put_with_http_info(id, inventory_preload_record, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: InventoryPreloadApi.v1_inventory_preload_id_put ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling InventoryPreloadApi.v1_inventory_preload_id_put"
      end
      # verify the required parameter 'inventory_preload_record' is set
      if @api_client.config.client_side_validation && inventory_preload_record.nil?
        fail ArgumentError, "Missing the required parameter 'inventory_preload_record' when calling InventoryPreloadApi.v1_inventory_preload_id_put"
      end
      # resource path
      local_var_path = '/v1/inventory-preload/{id}'.sub('{' + 'id' + '}', CGI.escape(id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(inventory_preload_record)

      # return_type
      return_type = opts[:debug_return_type] || 'InventoryPreloadRecord'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['Bearer']

      new_options = opts.merge(
        :operation => :"InventoryPreloadApi.v1_inventory_preload_id_put",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PUT, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: InventoryPreloadApi#v1_inventory_preload_id_put\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Create a new Inventory Preload record using JSON or CSV 
    # Create a new Inventory Preload record using JSON or CSV. A CSV template can be downloaded from /api/inventory-preload/csv-template. Serial number and device type are required. All other fields are optional. When a matching serial number exists in the Inventory Preload data, the record will be overwritten with the CSV data. If the CSV file contains a new username and an email address is provided, the new user is created in Jamf Pro. If the CSV file contains an existing username, the following user-related fields are updated in Jamf Pro. Full Name, Email Address, Phone Number, Position. This endpoint does not do full validation of each record in the CSV data. To do full validation, use the /inventory-preload/validate-csv endpoint first. 
    # @param inventory_preload_record [InventoryPreloadRecord] Inventory Preload record or records to be created
    # @param [Hash] opts the optional parameters
    # @return [InventoryPreloadRecord]
    def v1_inventory_preload_post(inventory_preload_record, opts = {})
      data, _status_code, _headers = v1_inventory_preload_post_with_http_info(inventory_preload_record, opts)
      data
    end

    # Create a new Inventory Preload record using JSON or CSV 
    # Create a new Inventory Preload record using JSON or CSV. A CSV template can be downloaded from /api/inventory-preload/csv-template. Serial number and device type are required. All other fields are optional. When a matching serial number exists in the Inventory Preload data, the record will be overwritten with the CSV data. If the CSV file contains a new username and an email address is provided, the new user is created in Jamf Pro. If the CSV file contains an existing username, the following user-related fields are updated in Jamf Pro. Full Name, Email Address, Phone Number, Position. This endpoint does not do full validation of each record in the CSV data. To do full validation, use the /inventory-preload/validate-csv endpoint first. 
    # @param inventory_preload_record [InventoryPreloadRecord] Inventory Preload record or records to be created
    # @param [Hash] opts the optional parameters
    # @return [Array<(InventoryPreloadRecord, Integer, Hash)>] InventoryPreloadRecord data, response status code and response headers
    def v1_inventory_preload_post_with_http_info(inventory_preload_record, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: InventoryPreloadApi.v1_inventory_preload_post ...'
      end
      # verify the required parameter 'inventory_preload_record' is set
      if @api_client.config.client_side_validation && inventory_preload_record.nil?
        fail ArgumentError, "Missing the required parameter 'inventory_preload_record' when calling InventoryPreloadApi.v1_inventory_preload_post"
      end
      # resource path
      local_var_path = '/v1/inventory-preload'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json', 'text/csv'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(inventory_preload_record)

      # return_type
      return_type = opts[:debug_return_type] || 'InventoryPreloadRecord'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['Bearer']

      new_options = opts.merge(
        :operation => :"InventoryPreloadApi.v1_inventory_preload_post",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: InventoryPreloadApi#v1_inventory_preload_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Validate a given CSV file 
    # Validate a given CSV file. Serial number and device type are required. All other fields are optional. A CSV template can be downloaded from /api/inventory-preload/csv-template. 
    # @param body [Object] Inventory Preload records to be validated. A CSV template can be downloaded from /api/inventory-preload/csv-template
    # @param [Hash] opts the optional parameters
    # @return [InventoryPreloadCsvValidationSuccess]
    def v1_inventory_preload_validate_csv_post(body, opts = {})
      data, _status_code, _headers = v1_inventory_preload_validate_csv_post_with_http_info(body, opts)
      data
    end

    # Validate a given CSV file 
    # Validate a given CSV file. Serial number and device type are required. All other fields are optional. A CSV template can be downloaded from /api/inventory-preload/csv-template. 
    # @param body [Object] Inventory Preload records to be validated. A CSV template can be downloaded from /api/inventory-preload/csv-template
    # @param [Hash] opts the optional parameters
    # @return [Array<(InventoryPreloadCsvValidationSuccess, Integer, Hash)>] InventoryPreloadCsvValidationSuccess data, response status code and response headers
    def v1_inventory_preload_validate_csv_post_with_http_info(body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: InventoryPreloadApi.v1_inventory_preload_validate_csv_post ...'
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling InventoryPreloadApi.v1_inventory_preload_validate_csv_post"
      end
      # resource path
      local_var_path = '/v1/inventory-preload/validate-csv'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['text/csv'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(body)

      # return_type
      return_type = opts[:debug_return_type] || 'InventoryPreloadCsvValidationSuccess'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['Bearer']

      new_options = opts.merge(
        :operation => :"InventoryPreloadApi.v1_inventory_preload_validate_csv_post",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: InventoryPreloadApi#v1_inventory_preload_validate_csv_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Download all Inventory Preload records
    # Returns all Inventory Preload records as a CSV file.
    # @param [Hash] opts the optional parameters
    # @return [String]
    def v2_inventory_preload_csv_get(opts = {})
      data, _status_code, _headers = v2_inventory_preload_csv_get_with_http_info(opts)
      data
    end

    # Download all Inventory Preload records
    # Returns all Inventory Preload records as a CSV file.
    # @param [Hash] opts the optional parameters
    # @return [Array<(String, Integer, Hash)>] String data, response status code and response headers
    def v2_inventory_preload_csv_get_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: InventoryPreloadApi.v2_inventory_preload_csv_get ...'
      end
      # resource path
      local_var_path = '/v2/inventory-preload/csv'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['text/csv'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'String'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['Bearer']

      new_options = opts.merge(
        :operation => :"InventoryPreloadApi.v2_inventory_preload_csv_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: InventoryPreloadApi#v2_inventory_preload_csv_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Create one or more new Inventory Preload records using CSV 
    # Create one or more new Inventory Preload records using CSV. A CSV template can be downloaded from /v2/inventory-preload/csv-template. Serial number and device type are required. All other fields are optional. When a matching serial number exists in the Inventory Preload data, the record will be overwritten with the CSV data. If the CSV file contains a new username and an email address is provided, the new user is created in Jamf Pro. If the CSV file contains an existing username, the following user-related fields are updated in Jamf Pro. Full Name, Email Address, Phone Number, Position. This endpoint does not do full validation of each record in the CSV data. To do full validation, use the `/v2/inventory-preload/csv-validate` endpoint first. 
    # @param file [String] The CSV file to upload
    # @param [Hash] opts the optional parameters
    # @return [Array<HrefResponse>]
    def v2_inventory_preload_csv_post(file, opts = {})
      data, _status_code, _headers = v2_inventory_preload_csv_post_with_http_info(file, opts)
      data
    end

    # Create one or more new Inventory Preload records using CSV 
    # Create one or more new Inventory Preload records using CSV. A CSV template can be downloaded from /v2/inventory-preload/csv-template. Serial number and device type are required. All other fields are optional. When a matching serial number exists in the Inventory Preload data, the record will be overwritten with the CSV data. If the CSV file contains a new username and an email address is provided, the new user is created in Jamf Pro. If the CSV file contains an existing username, the following user-related fields are updated in Jamf Pro. Full Name, Email Address, Phone Number, Position. This endpoint does not do full validation of each record in the CSV data. To do full validation, use the &#x60;/v2/inventory-preload/csv-validate&#x60; endpoint first. 
    # @param file [String] The CSV file to upload
    # @param [Hash] opts the optional parameters
    # @return [Array<(Array<HrefResponse>, Integer, Hash)>] Array<HrefResponse> data, response status code and response headers
    def v2_inventory_preload_csv_post_with_http_info(file, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: InventoryPreloadApi.v2_inventory_preload_csv_post ...'
      end
      # verify the required parameter 'file' is set
      if @api_client.config.client_side_validation && file.nil?
        fail ArgumentError, "Missing the required parameter 'file' when calling InventoryPreloadApi.v2_inventory_preload_csv_post"
      end
      # resource path
      local_var_path = '/v2/inventory-preload/csv'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['multipart/form-data'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}
      form_params['file'] = file

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'Array<HrefResponse>'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['Bearer']

      new_options = opts.merge(
        :operation => :"InventoryPreloadApi.v2_inventory_preload_csv_post",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: InventoryPreloadApi#v2_inventory_preload_csv_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Download the Inventory Preload CSV template
    # Retrieves the Inventory Preload CSV file template.
    # @param [Hash] opts the optional parameters
    # @return [String]
    def v2_inventory_preload_csv_template_get(opts = {})
      data, _status_code, _headers = v2_inventory_preload_csv_template_get_with_http_info(opts)
      data
    end

    # Download the Inventory Preload CSV template
    # Retrieves the Inventory Preload CSV file template.
    # @param [Hash] opts the optional parameters
    # @return [Array<(String, Integer, Hash)>] String data, response status code and response headers
    def v2_inventory_preload_csv_template_get_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: InventoryPreloadApi.v2_inventory_preload_csv_template_get ...'
      end
      # resource path
      local_var_path = '/v2/inventory-preload/csv-template'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['text/csv'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'String'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['Bearer']

      new_options = opts.merge(
        :operation => :"InventoryPreloadApi.v2_inventory_preload_csv_template_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: InventoryPreloadApi#v2_inventory_preload_csv_template_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Validate a given CSV file 
    # Validate a given CSV file. Serial number and device type are required. All other fields are optional. A CSV template can be downloaded from `/v2/inventory-preload/csv-template`. 
    # @param file [String] The CSV file to upload
    # @param [Hash] opts the optional parameters
    # @return [InventoryPreloadCsvValidationSuccess]
    def v2_inventory_preload_csv_validate_post(file, opts = {})
      data, _status_code, _headers = v2_inventory_preload_csv_validate_post_with_http_info(file, opts)
      data
    end

    # Validate a given CSV file 
    # Validate a given CSV file. Serial number and device type are required. All other fields are optional. A CSV template can be downloaded from &#x60;/v2/inventory-preload/csv-template&#x60;. 
    # @param file [String] The CSV file to upload
    # @param [Hash] opts the optional parameters
    # @return [Array<(InventoryPreloadCsvValidationSuccess, Integer, Hash)>] InventoryPreloadCsvValidationSuccess data, response status code and response headers
    def v2_inventory_preload_csv_validate_post_with_http_info(file, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: InventoryPreloadApi.v2_inventory_preload_csv_validate_post ...'
      end
      # verify the required parameter 'file' is set
      if @api_client.config.client_side_validation && file.nil?
        fail ArgumentError, "Missing the required parameter 'file' when calling InventoryPreloadApi.v2_inventory_preload_csv_validate_post"
      end
      # resource path
      local_var_path = '/v2/inventory-preload/csv-validate'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['multipart/form-data'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}
      form_params['file'] = file

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'InventoryPreloadCsvValidationSuccess'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['Bearer']

      new_options = opts.merge(
        :operation => :"InventoryPreloadApi.v2_inventory_preload_csv_validate_post",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: InventoryPreloadApi#v2_inventory_preload_csv_validate_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Retrieve a list of extension attribute columns 
    # Retrieve a list of extension attribute columns currently associated with inventory preload records 
    # @param [Hash] opts the optional parameters
    # @return [InventoryPreloadExtensionAttributeColumnResult]
    def v2_inventory_preload_ea_columns_get(opts = {})
      data, _status_code, _headers = v2_inventory_preload_ea_columns_get_with_http_info(opts)
      data
    end

    # Retrieve a list of extension attribute columns 
    # Retrieve a list of extension attribute columns currently associated with inventory preload records 
    # @param [Hash] opts the optional parameters
    # @return [Array<(InventoryPreloadExtensionAttributeColumnResult, Integer, Hash)>] InventoryPreloadExtensionAttributeColumnResult data, response status code and response headers
    def v2_inventory_preload_ea_columns_get_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: InventoryPreloadApi.v2_inventory_preload_ea_columns_get ...'
      end
      # resource path
      local_var_path = '/v2/inventory-preload/ea-columns'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'InventoryPreloadExtensionAttributeColumnResult'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['Bearer']

      new_options = opts.merge(
        :operation => :"InventoryPreloadApi.v2_inventory_preload_ea_columns_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: InventoryPreloadApi#v2_inventory_preload_ea_columns_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Export a collection of inventory preload records 
    # Export a collection of inventory preload records 
    # @param [Hash] opts the optional parameters
    # @option opts [Array<String>] :export_fields Export fields parameter, used to change default order or ignore some of the response properties. Default is empty array, which means that all fields of the response entity will be serialized. Example: export-fields&#x3D;id,username
    # @option opts [Array<String>] :export_labels Export labels parameter, used to customize fieldnames/columns in the exported file. Default is empty array, which means that response properties names will be used. Number of the provided labels must match the number of export-fields Example: export-labels&#x3D;identifier,name with matching: export-fields&#x3D;id,username
    # @option opts [Integer] :page  (default to 0)
    # @option opts [Integer] :page_size  (default to 100)
    # @option opts [Array<String>] :sort Sorting criteria in the format: &#x60;property:asc/desc&#x60;. Default sort is &#x60;id:asc&#x60;. Multiple sort criteria are supported and must be separated with a comma. All inventory preload fields are supported, however fields added by extension attributes are not supported. If sorting by deviceType, use &#x60;0&#x60; for Computer and &#x60;1&#x60; for Mobile Device.  Example: &#x60;sort&#x3D;date:desc,name:asc&#x60;. 
    # @option opts [String] :filter Allowing to filter inventory preload records. Default search is empty query - returning all results for the requested page. All inventory preload fields are supported, however fields added by extension attributes are not supported. If filtering by deviceType, use &#x60;0&#x60; for Computer and &#x60;1&#x60; for Mobile Device.  Query in the RSQL format, allowing &#x60;&#x3D;&#x3D;&#x60;, &#x60;!&#x3D;&#x60;, &#x60;&gt;&#x60;, &#x60;&lt;&#x60;, and &#x60;&#x3D;in&#x3D;&#x60;.  Example: &#x60;filter&#x3D;categoryName&#x3D;&#x3D;\&quot;Category\&quot;&#x60;  (default to '')
    # @option opts [ExportParameters] :export_parameters Optional. Override query parameters since they can make URI exceed 2,000 character limit.
    # @return [Object]
    def v2_inventory_preload_export_post(opts = {})
      data, _status_code, _headers = v2_inventory_preload_export_post_with_http_info(opts)
      data
    end

    # Export a collection of inventory preload records 
    # Export a collection of inventory preload records 
    # @param [Hash] opts the optional parameters
    # @option opts [Array<String>] :export_fields Export fields parameter, used to change default order or ignore some of the response properties. Default is empty array, which means that all fields of the response entity will be serialized. Example: export-fields&#x3D;id,username
    # @option opts [Array<String>] :export_labels Export labels parameter, used to customize fieldnames/columns in the exported file. Default is empty array, which means that response properties names will be used. Number of the provided labels must match the number of export-fields Example: export-labels&#x3D;identifier,name with matching: export-fields&#x3D;id,username
    # @option opts [Integer] :page  (default to 0)
    # @option opts [Integer] :page_size  (default to 100)
    # @option opts [Array<String>] :sort Sorting criteria in the format: &#x60;property:asc/desc&#x60;. Default sort is &#x60;id:asc&#x60;. Multiple sort criteria are supported and must be separated with a comma. All inventory preload fields are supported, however fields added by extension attributes are not supported. If sorting by deviceType, use &#x60;0&#x60; for Computer and &#x60;1&#x60; for Mobile Device.  Example: &#x60;sort&#x3D;date:desc,name:asc&#x60;. 
    # @option opts [String] :filter Allowing to filter inventory preload records. Default search is empty query - returning all results for the requested page. All inventory preload fields are supported, however fields added by extension attributes are not supported. If filtering by deviceType, use &#x60;0&#x60; for Computer and &#x60;1&#x60; for Mobile Device.  Query in the RSQL format, allowing &#x60;&#x3D;&#x3D;&#x60;, &#x60;!&#x3D;&#x60;, &#x60;&gt;&#x60;, &#x60;&lt;&#x60;, and &#x60;&#x3D;in&#x3D;&#x60;.  Example: &#x60;filter&#x3D;categoryName&#x3D;&#x3D;\&quot;Category\&quot;&#x60;  (default to '')
    # @option opts [ExportParameters] :export_parameters Optional. Override query parameters since they can make URI exceed 2,000 character limit.
    # @return [Array<(Object, Integer, Hash)>] Object data, response status code and response headers
    def v2_inventory_preload_export_post_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: InventoryPreloadApi.v2_inventory_preload_export_post ...'
      end
      # resource path
      local_var_path = '/v2/inventory-preload/export'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'export-fields'] = @api_client.build_collection_param(opts[:'export_fields'], :multi) if !opts[:'export_fields'].nil?
      query_params[:'export-labels'] = @api_client.build_collection_param(opts[:'export_labels'], :multi) if !opts[:'export_labels'].nil?
      query_params[:'page'] = opts[:'page'] if !opts[:'page'].nil?
      query_params[:'page-size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'sort'] = @api_client.build_collection_param(opts[:'sort'], :multi) if !opts[:'sort'].nil?
      query_params[:'filter'] = opts[:'filter'] if !opts[:'filter'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['text/csv', 'application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(opts[:'export_parameters'])

      # return_type
      return_type = opts[:debug_return_type] || 'Object'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['Bearer']

      new_options = opts.merge(
        :operation => :"InventoryPreloadApi.v2_inventory_preload_export_post",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: InventoryPreloadApi#v2_inventory_preload_export_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get Inventory Preload history entries 
    # Gets Inventory Preload history entries.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :page  (default to 0)
    # @option opts [Integer] :page_size  (default to 100)
    # @option opts [Array<String>] :sort Sorting criteria in the format: &#x60;property:asc/desc&#x60;. Default sort is &#x60;date:desc&#x60;. Multiple sort criteria are supported and must be separated with a comma.  Example: &#x60;sort&#x3D;date:desc,name:asc&#x60;. 
    # @option opts [String] :filter Allows filtering inventory preload history records. Default search is empty query - returning all results for the requested page. All inventory preload history fields are supported.  Query in the RSQL format, allowing &#x60;&#x3D;&#x3D;&#x60;, &#x60;!&#x3D;&#x60;, &#x60;&gt;&#x60;, &#x60;&lt;&#x60;, and &#x60;&#x3D;in&#x3D;&#x60;.  Example: &#x60;filter&#x3D;username&#x3D;&#x3D;\&quot;admin\&quot;&#x60;  (default to '')
    # @return [HistorySearchResults]
    def v2_inventory_preload_history_get(opts = {})
      data, _status_code, _headers = v2_inventory_preload_history_get_with_http_info(opts)
      data
    end

    # Get Inventory Preload history entries 
    # Gets Inventory Preload history entries.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :page  (default to 0)
    # @option opts [Integer] :page_size  (default to 100)
    # @option opts [Array<String>] :sort Sorting criteria in the format: &#x60;property:asc/desc&#x60;. Default sort is &#x60;date:desc&#x60;. Multiple sort criteria are supported and must be separated with a comma.  Example: &#x60;sort&#x3D;date:desc,name:asc&#x60;. 
    # @option opts [String] :filter Allows filtering inventory preload history records. Default search is empty query - returning all results for the requested page. All inventory preload history fields are supported.  Query in the RSQL format, allowing &#x60;&#x3D;&#x3D;&#x60;, &#x60;!&#x3D;&#x60;, &#x60;&gt;&#x60;, &#x60;&lt;&#x60;, and &#x60;&#x3D;in&#x3D;&#x60;.  Example: &#x60;filter&#x3D;username&#x3D;&#x3D;\&quot;admin\&quot;&#x60;  (default to '')
    # @return [Array<(HistorySearchResults, Integer, Hash)>] HistorySearchResults data, response status code and response headers
    def v2_inventory_preload_history_get_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: InventoryPreloadApi.v2_inventory_preload_history_get ...'
      end
      # resource path
      local_var_path = '/v2/inventory-preload/history'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'page'] = opts[:'page'] if !opts[:'page'].nil?
      query_params[:'page-size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'sort'] = @api_client.build_collection_param(opts[:'sort'], :multi) if !opts[:'sort'].nil?
      query_params[:'filter'] = opts[:'filter'] if !opts[:'filter'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'HistorySearchResults'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['Bearer']

      new_options = opts.merge(
        :operation => :"InventoryPreloadApi.v2_inventory_preload_history_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: InventoryPreloadApi#v2_inventory_preload_history_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Add Inventory Preload history object notes
    # Adds Inventory Preload history object notes.
    # @param object_history_note [ObjectHistoryNote] History notes to create
    # @param [Hash] opts the optional parameters
    # @return [HrefResponse]
    def v2_inventory_preload_history_post(object_history_note, opts = {})
      data, _status_code, _headers = v2_inventory_preload_history_post_with_http_info(object_history_note, opts)
      data
    end

    # Add Inventory Preload history object notes
    # Adds Inventory Preload history object notes.
    # @param object_history_note [ObjectHistoryNote] History notes to create
    # @param [Hash] opts the optional parameters
    # @return [Array<(HrefResponse, Integer, Hash)>] HrefResponse data, response status code and response headers
    def v2_inventory_preload_history_post_with_http_info(object_history_note, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: InventoryPreloadApi.v2_inventory_preload_history_post ...'
      end
      # verify the required parameter 'object_history_note' is set
      if @api_client.config.client_side_validation && object_history_note.nil?
        fail ArgumentError, "Missing the required parameter 'object_history_note' when calling InventoryPreloadApi.v2_inventory_preload_history_post"
      end
      # resource path
      local_var_path = '/v2/inventory-preload/history'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(object_history_note)

      # return_type
      return_type = opts[:debug_return_type] || 'HrefResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['Bearer']

      new_options = opts.merge(
        :operation => :"InventoryPreloadApi.v2_inventory_preload_history_post",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: InventoryPreloadApi#v2_inventory_preload_history_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Delete all Inventory Preload records 
    # Deletes all Inventory Preload records.
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def v2_inventory_preload_records_delete_all_post(opts = {})
      v2_inventory_preload_records_delete_all_post_with_http_info(opts)
      nil
    end

    # Delete all Inventory Preload records 
    # Deletes all Inventory Preload records.
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def v2_inventory_preload_records_delete_all_post_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: InventoryPreloadApi.v2_inventory_preload_records_delete_all_post ...'
      end
      # resource path
      local_var_path = '/v2/inventory-preload/records/delete-all'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || ['Bearer']

      new_options = opts.merge(
        :operation => :"InventoryPreloadApi.v2_inventory_preload_records_delete_all_post",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: InventoryPreloadApi#v2_inventory_preload_records_delete_all_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Return all Inventory Preload records
    # Returns all Inventory Preload records.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :page  (default to 0)
    # @option opts [Integer] :page_size  (default to 100)
    # @option opts [Array<String>] :sort Sorting criteria in the format: &#x60;property:asc/desc&#x60;. Default sort is &#x60;id:asc&#x60;. Multiple sort criteria are supported and must be separated with a comma. All inventory preload fields are supported, however fields added by extension attributes are not supported. If sorting by deviceType, use &#x60;0&#x60; for Computer and &#x60;1&#x60; for Mobile Device.  Example: &#x60;sort&#x3D;date:desc,name:asc&#x60;. 
    # @option opts [String] :filter Allowing to filter inventory preload records. Default search is empty query - returning all results for the requested page. All inventory preload fields are supported, however fields added by extension attributes are not supported. If filtering by deviceType, use &#x60;0&#x60; for Computer and &#x60;1&#x60; for Mobile Device.  Query in the RSQL format, allowing &#x60;&#x3D;&#x3D;&#x60;, &#x60;!&#x3D;&#x60;, &#x60;&gt;&#x60;, &#x60;&lt;&#x60;, and &#x60;&#x3D;in&#x3D;&#x60;.  Example: &#x60;filter&#x3D;categoryName&#x3D;&#x3D;\&quot;Category\&quot;&#x60;  (default to '')
    # @return [InventoryPreloadRecordSearchResultsV2]
    def v2_inventory_preload_records_get(opts = {})
      data, _status_code, _headers = v2_inventory_preload_records_get_with_http_info(opts)
      data
    end

    # Return all Inventory Preload records
    # Returns all Inventory Preload records.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :page  (default to 0)
    # @option opts [Integer] :page_size  (default to 100)
    # @option opts [Array<String>] :sort Sorting criteria in the format: &#x60;property:asc/desc&#x60;. Default sort is &#x60;id:asc&#x60;. Multiple sort criteria are supported and must be separated with a comma. All inventory preload fields are supported, however fields added by extension attributes are not supported. If sorting by deviceType, use &#x60;0&#x60; for Computer and &#x60;1&#x60; for Mobile Device.  Example: &#x60;sort&#x3D;date:desc,name:asc&#x60;. 
    # @option opts [String] :filter Allowing to filter inventory preload records. Default search is empty query - returning all results for the requested page. All inventory preload fields are supported, however fields added by extension attributes are not supported. If filtering by deviceType, use &#x60;0&#x60; for Computer and &#x60;1&#x60; for Mobile Device.  Query in the RSQL format, allowing &#x60;&#x3D;&#x3D;&#x60;, &#x60;!&#x3D;&#x60;, &#x60;&gt;&#x60;, &#x60;&lt;&#x60;, and &#x60;&#x3D;in&#x3D;&#x60;.  Example: &#x60;filter&#x3D;categoryName&#x3D;&#x3D;\&quot;Category\&quot;&#x60;  (default to '')
    # @return [Array<(InventoryPreloadRecordSearchResultsV2, Integer, Hash)>] InventoryPreloadRecordSearchResultsV2 data, response status code and response headers
    def v2_inventory_preload_records_get_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: InventoryPreloadApi.v2_inventory_preload_records_get ...'
      end
      # resource path
      local_var_path = '/v2/inventory-preload/records'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'page'] = opts[:'page'] if !opts[:'page'].nil?
      query_params[:'page-size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'sort'] = @api_client.build_collection_param(opts[:'sort'], :multi) if !opts[:'sort'].nil?
      query_params[:'filter'] = opts[:'filter'] if !opts[:'filter'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'InventoryPreloadRecordSearchResultsV2'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['Bearer']

      new_options = opts.merge(
        :operation => :"InventoryPreloadApi.v2_inventory_preload_records_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: InventoryPreloadApi#v2_inventory_preload_records_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Delete an Inventory Preload record 
    # Deletes an Inventory Preload record.
    # @param id [String] Inventory Preload identifier
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def v2_inventory_preload_records_id_delete(id, opts = {})
      v2_inventory_preload_records_id_delete_with_http_info(id, opts)
      nil
    end

    # Delete an Inventory Preload record 
    # Deletes an Inventory Preload record.
    # @param id [String] Inventory Preload identifier
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def v2_inventory_preload_records_id_delete_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: InventoryPreloadApi.v2_inventory_preload_records_id_delete ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling InventoryPreloadApi.v2_inventory_preload_records_id_delete"
      end
      # resource path
      local_var_path = '/v2/inventory-preload/records/{id}'.sub('{' + 'id' + '}', CGI.escape(id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || ['Bearer']

      new_options = opts.merge(
        :operation => :"InventoryPreloadApi.v2_inventory_preload_records_id_delete",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: InventoryPreloadApi#v2_inventory_preload_records_id_delete\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get an Inventory Preload record
    # Retrieves an Inventory Preload record.
    # @param id [String] Inventory Preload identifier
    # @param [Hash] opts the optional parameters
    # @return [InventoryPreloadRecordV2]
    def v2_inventory_preload_records_id_get(id, opts = {})
      data, _status_code, _headers = v2_inventory_preload_records_id_get_with_http_info(id, opts)
      data
    end

    # Get an Inventory Preload record
    # Retrieves an Inventory Preload record.
    # @param id [String] Inventory Preload identifier
    # @param [Hash] opts the optional parameters
    # @return [Array<(InventoryPreloadRecordV2, Integer, Hash)>] InventoryPreloadRecordV2 data, response status code and response headers
    def v2_inventory_preload_records_id_get_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: InventoryPreloadApi.v2_inventory_preload_records_id_get ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling InventoryPreloadApi.v2_inventory_preload_records_id_get"
      end
      # resource path
      local_var_path = '/v2/inventory-preload/records/{id}'.sub('{' + 'id' + '}', CGI.escape(id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'InventoryPreloadRecordV2'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['Bearer']

      new_options = opts.merge(
        :operation => :"InventoryPreloadApi.v2_inventory_preload_records_id_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: InventoryPreloadApi#v2_inventory_preload_records_id_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Update an Inventory Preload record
    # Updates an Inventory Preload record.
    # @param id [String] Inventory Preload identifier
    # @param inventory_preload_record_v2 [InventoryPreloadRecordV2] Inventory Preload record to update
    # @param [Hash] opts the optional parameters
    # @return [InventoryPreloadRecordV2]
    def v2_inventory_preload_records_id_put(id, inventory_preload_record_v2, opts = {})
      data, _status_code, _headers = v2_inventory_preload_records_id_put_with_http_info(id, inventory_preload_record_v2, opts)
      data
    end

    # Update an Inventory Preload record
    # Updates an Inventory Preload record.
    # @param id [String] Inventory Preload identifier
    # @param inventory_preload_record_v2 [InventoryPreloadRecordV2] Inventory Preload record to update
    # @param [Hash] opts the optional parameters
    # @return [Array<(InventoryPreloadRecordV2, Integer, Hash)>] InventoryPreloadRecordV2 data, response status code and response headers
    def v2_inventory_preload_records_id_put_with_http_info(id, inventory_preload_record_v2, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: InventoryPreloadApi.v2_inventory_preload_records_id_put ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling InventoryPreloadApi.v2_inventory_preload_records_id_put"
      end
      # verify the required parameter 'inventory_preload_record_v2' is set
      if @api_client.config.client_side_validation && inventory_preload_record_v2.nil?
        fail ArgumentError, "Missing the required parameter 'inventory_preload_record_v2' when calling InventoryPreloadApi.v2_inventory_preload_records_id_put"
      end
      # resource path
      local_var_path = '/v2/inventory-preload/records/{id}'.sub('{' + 'id' + '}', CGI.escape(id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(inventory_preload_record_v2)

      # return_type
      return_type = opts[:debug_return_type] || 'InventoryPreloadRecordV2'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['Bearer']

      new_options = opts.merge(
        :operation => :"InventoryPreloadApi.v2_inventory_preload_records_id_put",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PUT, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: InventoryPreloadApi#v2_inventory_preload_records_id_put\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Create a new Inventory Preload record using JSON
    # Create a new Inventory Preload record using JSON.
    # @param inventory_preload_record_v2 [InventoryPreloadRecordV2] Inventory Preload record to be created.
    # @param [Hash] opts the optional parameters
    # @return [HrefResponse]
    def v2_inventory_preload_records_post(inventory_preload_record_v2, opts = {})
      data, _status_code, _headers = v2_inventory_preload_records_post_with_http_info(inventory_preload_record_v2, opts)
      data
    end

    # Create a new Inventory Preload record using JSON
    # Create a new Inventory Preload record using JSON.
    # @param inventory_preload_record_v2 [InventoryPreloadRecordV2] Inventory Preload record to be created.
    # @param [Hash] opts the optional parameters
    # @return [Array<(HrefResponse, Integer, Hash)>] HrefResponse data, response status code and response headers
    def v2_inventory_preload_records_post_with_http_info(inventory_preload_record_v2, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: InventoryPreloadApi.v2_inventory_preload_records_post ...'
      end
      # verify the required parameter 'inventory_preload_record_v2' is set
      if @api_client.config.client_side_validation && inventory_preload_record_v2.nil?
        fail ArgumentError, "Missing the required parameter 'inventory_preload_record_v2' when calling InventoryPreloadApi.v2_inventory_preload_records_post"
      end
      # resource path
      local_var_path = '/v2/inventory-preload/records'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(inventory_preload_record_v2)

      # return_type
      return_type = opts[:debug_return_type] || 'HrefResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['Bearer']

      new_options = opts.merge(
        :operation => :"InventoryPreloadApi.v2_inventory_preload_records_post",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: InventoryPreloadApi#v2_inventory_preload_records_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
