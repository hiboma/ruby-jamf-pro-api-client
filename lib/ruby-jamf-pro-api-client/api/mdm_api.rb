=begin
#Jamf Pro API

### Overview The Jamf Pro API is a RESTful API for Jamf Pro built to enable consistent and efficient programmatic access to Jamf Pro.<br/><br/> The swagger schema can be found [here](/api/schema/). 

The version of the OpenAPI document: production

Generated by: https://openapi-generator.tech
OpenAPI Generator version: 6.1.0-SNAPSHOT

=end

require 'cgi'

module JamfPro
  class MdmApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Post a command for creation and queuing 
    # Provided an MDM command type and appropriate information, will create and then queue said command.
    # @param [Hash] opts the optional parameters
    # @option opts [MdmCommandRequest] :mdm_command_request The mdm command object to create and queue
    # @return [Array<HrefResponse>]
    def preview_mdm_commands_post(opts = {})
      data, _status_code, _headers = preview_mdm_commands_post_with_http_info(opts)
      data
    end

    # Post a command for creation and queuing 
    # Provided an MDM command type and appropriate information, will create and then queue said command.
    # @param [Hash] opts the optional parameters
    # @option opts [MdmCommandRequest] :mdm_command_request The mdm command object to create and queue
    # @return [Array<(Array<HrefResponse>, Integer, Hash)>] Array<HrefResponse> data, response status code and response headers
    def preview_mdm_commands_post_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: MdmApi.preview_mdm_commands_post ...'
      end
      # resource path
      local_var_path = '/preview/mdm/commands'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(opts[:'mdm_command_request'])

      # return_type
      return_type = opts[:debug_return_type] || 'Array<HrefResponse>'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['Bearer']

      new_options = opts.merge(
        :operation => :"MdmApi.preview_mdm_commands_post",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: MdmApi#preview_mdm_commands_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Deploy packages using MDM
    # Deploys packages to macOS devices using the InstallEnterpriseApplication MDM command.
    # @param install_package [InstallPackage] 
    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :verbose Enables the &#39;verbose&#39; response, which includes information about the commands queued as well as information about commands that failed to queue. (default to false)
    # @return [VerbosePackageDeploymentResponse]
    def v1_deploy_package_post(install_package, opts = {})
      data, _status_code, _headers = v1_deploy_package_post_with_http_info(install_package, opts)
      data
    end

    # Deploy packages using MDM
    # Deploys packages to macOS devices using the InstallEnterpriseApplication MDM command.
    # @param install_package [InstallPackage] 
    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :verbose Enables the &#39;verbose&#39; response, which includes information about the commands queued as well as information about commands that failed to queue. (default to false)
    # @return [Array<(VerbosePackageDeploymentResponse, Integer, Hash)>] VerbosePackageDeploymentResponse data, response status code and response headers
    def v1_deploy_package_post_with_http_info(install_package, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: MdmApi.v1_deploy_package_post ...'
      end
      # verify the required parameter 'install_package' is set
      if @api_client.config.client_side_validation && install_package.nil?
        fail ArgumentError, "Missing the required parameter 'install_package' when calling MdmApi.v1_deploy_package_post"
      end
      # resource path
      local_var_path = '/v1/deploy-package'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'verbose'] = opts[:'verbose'] if !opts[:'verbose'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(install_package)

      # return_type
      return_type = opts[:debug_return_type] || 'VerbosePackageDeploymentResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['Bearer']

      new_options = opts.merge(
        :operation => :"MdmApi.v1_deploy_package_post",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: MdmApi#v1_deploy_package_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get information about mdm commands made by Jamf Pro. 
    # Get information about mdm commands made by Jamf Pro.
    # @param [Hash] opts the optional parameters
    # @option opts [Array<String>] :uuids A list of the UUIDs of the commands being searched for.  Limited to 40 UUIDs in length. Choose one of two parameters, but not both.
    # @option opts [String] :client_management_id The client management id used to search for a list of commands. Choose one of two parameters, but not both.
    # @return [Array<MdmCommand>]
    def v1_mdm_commands_get(opts = {})
      data, _status_code, _headers = v1_mdm_commands_get_with_http_info(opts)
      data
    end

    # Get information about mdm commands made by Jamf Pro. 
    # Get information about mdm commands made by Jamf Pro.
    # @param [Hash] opts the optional parameters
    # @option opts [Array<String>] :uuids A list of the UUIDs of the commands being searched for.  Limited to 40 UUIDs in length. Choose one of two parameters, but not both.
    # @option opts [String] :client_management_id The client management id used to search for a list of commands. Choose one of two parameters, but not both.
    # @return [Array<(Array<MdmCommand>, Integer, Hash)>] Array<MdmCommand> data, response status code and response headers
    def v1_mdm_commands_get_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: MdmApi.v1_mdm_commands_get ...'
      end
      # resource path
      local_var_path = '/v1/mdm/commands'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'uuids'] = @api_client.build_collection_param(opts[:'uuids'], :multi) if !opts[:'uuids'].nil?
      query_params[:'client-management-id'] = opts[:'client_management_id'] if !opts[:'client_management_id'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'Array<MdmCommand>'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['Bearer']

      new_options = opts.merge(
        :operation => :"MdmApi.v1_mdm_commands_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: MdmApi#v1_mdm_commands_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Renew MDM Profile 
    # Renews the device's MDM Profile, including the device identity certificate within the MDM Profile. 
    # @param udids [Udids] List of devices&#39; UDIDs to perform MDM profile renewal
    # @param [Hash] opts the optional parameters
    # @return [RenewMdmProfileResponse]
    def v1_mdm_renew_profile_post(udids, opts = {})
      data, _status_code, _headers = v1_mdm_renew_profile_post_with_http_info(udids, opts)
      data
    end

    # Renew MDM Profile 
    # Renews the device&#39;s MDM Profile, including the device identity certificate within the MDM Profile. 
    # @param udids [Udids] List of devices&#39; UDIDs to perform MDM profile renewal
    # @param [Hash] opts the optional parameters
    # @return [Array<(RenewMdmProfileResponse, Integer, Hash)>] RenewMdmProfileResponse data, response status code and response headers
    def v1_mdm_renew_profile_post_with_http_info(udids, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: MdmApi.v1_mdm_renew_profile_post ...'
      end
      # verify the required parameter 'udids' is set
      if @api_client.config.client_side_validation && udids.nil?
        fail ArgumentError, "Missing the required parameter 'udids' when calling MdmApi.v1_mdm_renew_profile_post"
      end
      # resource path
      local_var_path = '/v1/mdm/renew-profile'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(udids)

      # return_type
      return_type = opts[:debug_return_type] || 'RenewMdmProfileResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['Bearer']

      new_options = opts.merge(
        :operation => :"MdmApi.v1_mdm_renew_profile_post",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: MdmApi#v1_mdm_renew_profile_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
