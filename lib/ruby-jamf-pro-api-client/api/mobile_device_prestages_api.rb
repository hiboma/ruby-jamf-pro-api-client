=begin
#Jamf Pro API

### Overview The Jamf Pro API is a RESTful API for Jamf Pro built to enable consistent and efficient programmatic access to Jamf Pro.<br/><br/> The swagger schema can be found [here](/api/schema/). 

The version of the OpenAPI document: production

Generated by: https://openapi-generator.tech
OpenAPI Generator version: 6.1.0-SNAPSHOT

=end

require 'cgi'

module JamfPro
  class MobileDevicePrestagesApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Search for sorted and paged Mobile Device Prestages 
    # Search for sorted and paged mobile device prestages
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :page  (default to 0)
    # @option opts [Integer] :size  (default to 100)
    # @option opts [Integer] :pagesize  (default to 100)
    # @option opts [Integer] :page_size  (default to 100)
    # @option opts [String] :sort Sorting criteria in the format: property:asc/desc. Multiple sort criteria are supported and must be separated with a comma. Example: sort&#x3D;date:desc,name:asc  (default to 'id:asc')
    # @return [MobileDevicePrestageSearchResults]
    def v1_mobile_device_prestages_get(opts = {})
      data, _status_code, _headers = v1_mobile_device_prestages_get_with_http_info(opts)
      data
    end

    # Search for sorted and paged Mobile Device Prestages 
    # Search for sorted and paged mobile device prestages
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :page  (default to 0)
    # @option opts [Integer] :size  (default to 100)
    # @option opts [Integer] :pagesize  (default to 100)
    # @option opts [Integer] :page_size  (default to 100)
    # @option opts [String] :sort Sorting criteria in the format: property:asc/desc. Multiple sort criteria are supported and must be separated with a comma. Example: sort&#x3D;date:desc,name:asc  (default to 'id:asc')
    # @return [Array<(MobileDevicePrestageSearchResults, Integer, Hash)>] MobileDevicePrestageSearchResults data, response status code and response headers
    def v1_mobile_device_prestages_get_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: MobileDevicePrestagesApi.v1_mobile_device_prestages_get ...'
      end
      # resource path
      local_var_path = '/v1/mobile-device-prestages'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'page'] = opts[:'page'] if !opts[:'page'].nil?
      query_params[:'size'] = opts[:'size'] if !opts[:'size'].nil?
      query_params[:'pagesize'] = opts[:'pagesize'] if !opts[:'pagesize'].nil?
      query_params[:'page-size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'sort'] = opts[:'sort'] if !opts[:'sort'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'MobileDevicePrestageSearchResults'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['Bearer']

      new_options = opts.merge(
        :operation => :"MobileDevicePrestagesApi.v1_mobile_device_prestages_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: MobileDevicePrestagesApi#v1_mobile_device_prestages_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Remove an attachment for a Mobile Device Prestage 
    # Remove an attachment for a Mobile Device Prestage
    # @param id [Integer] Mobile Device Prestage identifier
    # @param file_attachment_delete [FileAttachmentDelete] 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def v1_mobile_device_prestages_id_attachments_delete(id, file_attachment_delete, opts = {})
      v1_mobile_device_prestages_id_attachments_delete_with_http_info(id, file_attachment_delete, opts)
      nil
    end

    # Remove an attachment for a Mobile Device Prestage 
    # Remove an attachment for a Mobile Device Prestage
    # @param id [Integer] Mobile Device Prestage identifier
    # @param file_attachment_delete [FileAttachmentDelete] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def v1_mobile_device_prestages_id_attachments_delete_with_http_info(id, file_attachment_delete, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: MobileDevicePrestagesApi.v1_mobile_device_prestages_id_attachments_delete ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling MobileDevicePrestagesApi.v1_mobile_device_prestages_id_attachments_delete"
      end
      # verify the required parameter 'file_attachment_delete' is set
      if @api_client.config.client_side_validation && file_attachment_delete.nil?
        fail ArgumentError, "Missing the required parameter 'file_attachment_delete' when calling MobileDevicePrestagesApi.v1_mobile_device_prestages_id_attachments_delete"
      end
      # resource path
      local_var_path = '/v1/mobile-device-prestages/{id}/attachments'.sub('{' + 'id' + '}', CGI.escape(id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(file_attachment_delete)

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || ['Bearer']

      new_options = opts.merge(
        :operation => :"MobileDevicePrestagesApi.v1_mobile_device_prestages_id_attachments_delete",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: MobileDevicePrestagesApi#v1_mobile_device_prestages_id_attachments_delete\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get attachments for a Mobile Device Prestage 
    # Get attachments for a Mobile Device Prestage
    # @param id [Integer] Mobile Device Prestage identifier
    # @param [Hash] opts the optional parameters
    # @return [Array<FileAttachment>]
    def v1_mobile_device_prestages_id_attachments_get(id, opts = {})
      data, _status_code, _headers = v1_mobile_device_prestages_id_attachments_get_with_http_info(id, opts)
      data
    end

    # Get attachments for a Mobile Device Prestage 
    # Get attachments for a Mobile Device Prestage
    # @param id [Integer] Mobile Device Prestage identifier
    # @param [Hash] opts the optional parameters
    # @return [Array<(Array<FileAttachment>, Integer, Hash)>] Array<FileAttachment> data, response status code and response headers
    def v1_mobile_device_prestages_id_attachments_get_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: MobileDevicePrestagesApi.v1_mobile_device_prestages_id_attachments_get ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling MobileDevicePrestagesApi.v1_mobile_device_prestages_id_attachments_get"
      end
      # resource path
      local_var_path = '/v1/mobile-device-prestages/{id}/attachments'.sub('{' + 'id' + '}', CGI.escape(id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'Array<FileAttachment>'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['Bearer']

      new_options = opts.merge(
        :operation => :"MobileDevicePrestagesApi.v1_mobile_device_prestages_id_attachments_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: MobileDevicePrestagesApi#v1_mobile_device_prestages_id_attachments_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Add an attachment to a Mobile Device Prestage 
    # Add an attachment to a Mobile Device prestage
    # @param id [Integer] Identifier of the Mobile Device Prestage the attachment should be assigned to
    # @param file [File] The file to upload
    # @param [Hash] opts the optional parameters
    # @return [PrestageFileAttachment]
    def v1_mobile_device_prestages_id_attachments_post(id, file, opts = {})
      data, _status_code, _headers = v1_mobile_device_prestages_id_attachments_post_with_http_info(id, file, opts)
      data
    end

    # Add an attachment to a Mobile Device Prestage 
    # Add an attachment to a Mobile Device prestage
    # @param id [Integer] Identifier of the Mobile Device Prestage the attachment should be assigned to
    # @param file [File] The file to upload
    # @param [Hash] opts the optional parameters
    # @return [Array<(PrestageFileAttachment, Integer, Hash)>] PrestageFileAttachment data, response status code and response headers
    def v1_mobile_device_prestages_id_attachments_post_with_http_info(id, file, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: MobileDevicePrestagesApi.v1_mobile_device_prestages_id_attachments_post ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling MobileDevicePrestagesApi.v1_mobile_device_prestages_id_attachments_post"
      end
      # verify the required parameter 'file' is set
      if @api_client.config.client_side_validation && file.nil?
        fail ArgumentError, "Missing the required parameter 'file' when calling MobileDevicePrestagesApi.v1_mobile_device_prestages_id_attachments_post"
      end
      # resource path
      local_var_path = '/v1/mobile-device-prestages/{id}/attachments'.sub('{' + 'id' + '}', CGI.escape(id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['multipart/form-data'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}
      form_params['file'] = file

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'PrestageFileAttachment'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['Bearer']

      new_options = opts.merge(
        :operation => :"MobileDevicePrestagesApi.v1_mobile_device_prestages_id_attachments_post",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: MobileDevicePrestagesApi#v1_mobile_device_prestages_id_attachments_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Delete a Mobile Device Prestage with the supplied id 
    # Deletes a Mobile Device Prestage with the supplied id
    # @param id [Integer] Mobile Device Prestage identifier
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def v1_mobile_device_prestages_id_delete(id, opts = {})
      v1_mobile_device_prestages_id_delete_with_http_info(id, opts)
      nil
    end

    # Delete a Mobile Device Prestage with the supplied id 
    # Deletes a Mobile Device Prestage with the supplied id
    # @param id [Integer] Mobile Device Prestage identifier
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def v1_mobile_device_prestages_id_delete_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: MobileDevicePrestagesApi.v1_mobile_device_prestages_id_delete ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling MobileDevicePrestagesApi.v1_mobile_device_prestages_id_delete"
      end
      # resource path
      local_var_path = '/v1/mobile-device-prestages/{id}'.sub('{' + 'id' + '}', CGI.escape(id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || ['Bearer']

      new_options = opts.merge(
        :operation => :"MobileDevicePrestagesApi.v1_mobile_device_prestages_id_delete",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: MobileDevicePrestagesApi#v1_mobile_device_prestages_id_delete\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Retrieve a Mobile Device Prestage with the supplied id 
    # Retrieves a Mobile Device Prestage with the supplied id
    # @param id [Integer] Mobile Device Prestage identifier
    # @param [Hash] opts the optional parameters
    # @return [GetMobileDevicePrestage]
    def v1_mobile_device_prestages_id_get(id, opts = {})
      data, _status_code, _headers = v1_mobile_device_prestages_id_get_with_http_info(id, opts)
      data
    end

    # Retrieve a Mobile Device Prestage with the supplied id 
    # Retrieves a Mobile Device Prestage with the supplied id
    # @param id [Integer] Mobile Device Prestage identifier
    # @param [Hash] opts the optional parameters
    # @return [Array<(GetMobileDevicePrestage, Integer, Hash)>] GetMobileDevicePrestage data, response status code and response headers
    def v1_mobile_device_prestages_id_get_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: MobileDevicePrestagesApi.v1_mobile_device_prestages_id_get ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling MobileDevicePrestagesApi.v1_mobile_device_prestages_id_get"
      end
      # resource path
      local_var_path = '/v1/mobile-device-prestages/{id}'.sub('{' + 'id' + '}', CGI.escape(id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'GetMobileDevicePrestage'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['Bearer']

      new_options = opts.merge(
        :operation => :"MobileDevicePrestagesApi.v1_mobile_device_prestages_id_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: MobileDevicePrestagesApi#v1_mobile_device_prestages_id_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get sorted and paged Mobile Device Prestage history objects 
    # Gets sorted and paged mobile device prestage history objects
    # @param id [Integer] Mobile Device Prestage identifier
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :page  (default to 0)
    # @option opts [Integer] :size  (default to 100)
    # @option opts [Integer] :pagesize  (default to 100)
    # @option opts [Integer] :page_size  (default to 100)
    # @option opts [Array<String>] :sort Sorting criteria in the format: property,asc/desc. Default sort order is descending. Multiple sort criteria are supported and must be entered on separate lines in Swagger UI. In the URI the &#39;sort&#39; query param is duplicated for each sort criterion, e.g., ...&amp;sort&#x3D;name%2Casc&amp;sort&#x3D;date%2Cdesc
    # @return [HistorySearchResults]
    def v1_mobile_device_prestages_id_history_get(id, opts = {})
      data, _status_code, _headers = v1_mobile_device_prestages_id_history_get_with_http_info(id, opts)
      data
    end

    # Get sorted and paged Mobile Device Prestage history objects 
    # Gets sorted and paged mobile device prestage history objects
    # @param id [Integer] Mobile Device Prestage identifier
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :page  (default to 0)
    # @option opts [Integer] :size  (default to 100)
    # @option opts [Integer] :pagesize  (default to 100)
    # @option opts [Integer] :page_size  (default to 100)
    # @option opts [Array<String>] :sort Sorting criteria in the format: property,asc/desc. Default sort order is descending. Multiple sort criteria are supported and must be entered on separate lines in Swagger UI. In the URI the &#39;sort&#39; query param is duplicated for each sort criterion, e.g., ...&amp;sort&#x3D;name%2Casc&amp;sort&#x3D;date%2Cdesc
    # @return [Array<(HistorySearchResults, Integer, Hash)>] HistorySearchResults data, response status code and response headers
    def v1_mobile_device_prestages_id_history_get_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: MobileDevicePrestagesApi.v1_mobile_device_prestages_id_history_get ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling MobileDevicePrestagesApi.v1_mobile_device_prestages_id_history_get"
      end
      # resource path
      local_var_path = '/v1/mobile-device-prestages/{id}/history'.sub('{' + 'id' + '}', CGI.escape(id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'page'] = opts[:'page'] if !opts[:'page'].nil?
      query_params[:'size'] = opts[:'size'] if !opts[:'size'].nil?
      query_params[:'pagesize'] = opts[:'pagesize'] if !opts[:'pagesize'].nil?
      query_params[:'page-size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'sort'] = @api_client.build_collection_param(opts[:'sort'], :multi) if !opts[:'sort'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'HistorySearchResults'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['Bearer']

      new_options = opts.merge(
        :operation => :"MobileDevicePrestagesApi.v1_mobile_device_prestages_id_history_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: MobileDevicePrestagesApi#v1_mobile_device_prestages_id_history_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Add Mobile Device Prestage history object notes 
    # Adds mobile device prestage history object notes
    # @param id [Integer] Mobile Device Prestage identifier
    # @param object_history_note [ObjectHistoryNote] History notes to create
    # @param [Hash] opts the optional parameters
    # @return [ObjectHistory]
    def v1_mobile_device_prestages_id_history_post(id, object_history_note, opts = {})
      data, _status_code, _headers = v1_mobile_device_prestages_id_history_post_with_http_info(id, object_history_note, opts)
      data
    end

    # Add Mobile Device Prestage history object notes 
    # Adds mobile device prestage history object notes
    # @param id [Integer] Mobile Device Prestage identifier
    # @param object_history_note [ObjectHistoryNote] History notes to create
    # @param [Hash] opts the optional parameters
    # @return [Array<(ObjectHistory, Integer, Hash)>] ObjectHistory data, response status code and response headers
    def v1_mobile_device_prestages_id_history_post_with_http_info(id, object_history_note, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: MobileDevicePrestagesApi.v1_mobile_device_prestages_id_history_post ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling MobileDevicePrestagesApi.v1_mobile_device_prestages_id_history_post"
      end
      # verify the required parameter 'object_history_note' is set
      if @api_client.config.client_side_validation && object_history_note.nil?
        fail ArgumentError, "Missing the required parameter 'object_history_note' when calling MobileDevicePrestagesApi.v1_mobile_device_prestages_id_history_post"
      end
      # resource path
      local_var_path = '/v1/mobile-device-prestages/{id}/history'.sub('{' + 'id' + '}', CGI.escape(id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(object_history_note)

      # return_type
      return_type = opts[:debug_return_type] || 'ObjectHistory'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['Bearer']

      new_options = opts.merge(
        :operation => :"MobileDevicePrestagesApi.v1_mobile_device_prestages_id_history_post",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: MobileDevicePrestagesApi#v1_mobile_device_prestages_id_history_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Update a Mobile Device Prestage 
    # Updates a Mobile Device Prestage
    # @param id [Integer] Mobile Device Prestage identifier
    # @param put_mobile_device_prestage [PutMobileDevicePrestage] Mobile Device Prestage to update
    # @param [Hash] opts the optional parameters
    # @return [GetMobileDevicePrestage]
    def v1_mobile_device_prestages_id_put(id, put_mobile_device_prestage, opts = {})
      data, _status_code, _headers = v1_mobile_device_prestages_id_put_with_http_info(id, put_mobile_device_prestage, opts)
      data
    end

    # Update a Mobile Device Prestage 
    # Updates a Mobile Device Prestage
    # @param id [Integer] Mobile Device Prestage identifier
    # @param put_mobile_device_prestage [PutMobileDevicePrestage] Mobile Device Prestage to update
    # @param [Hash] opts the optional parameters
    # @return [Array<(GetMobileDevicePrestage, Integer, Hash)>] GetMobileDevicePrestage data, response status code and response headers
    def v1_mobile_device_prestages_id_put_with_http_info(id, put_mobile_device_prestage, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: MobileDevicePrestagesApi.v1_mobile_device_prestages_id_put ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling MobileDevicePrestagesApi.v1_mobile_device_prestages_id_put"
      end
      # verify the required parameter 'put_mobile_device_prestage' is set
      if @api_client.config.client_side_validation && put_mobile_device_prestage.nil?
        fail ArgumentError, "Missing the required parameter 'put_mobile_device_prestage' when calling MobileDevicePrestagesApi.v1_mobile_device_prestages_id_put"
      end
      # resource path
      local_var_path = '/v1/mobile-device-prestages/{id}'.sub('{' + 'id' + '}', CGI.escape(id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(put_mobile_device_prestage)

      # return_type
      return_type = opts[:debug_return_type] || 'GetMobileDevicePrestage'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['Bearer']

      new_options = opts.merge(
        :operation => :"MobileDevicePrestagesApi.v1_mobile_device_prestages_id_put",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PUT, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: MobileDevicePrestagesApi#v1_mobile_device_prestages_id_put\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Remove Device Scope for a specific Mobile Device Prestage 
    # Remove device scope for a specific mobile device prestage
    # @param id [Integer] Mobile Device Prestage identifier
    # @param prestage_scope_update [PrestageScopeUpdate] Serial Numbers to remove from scope
    # @param [Hash] opts the optional parameters
    # @return [PrestageScopeResponse]
    def v1_mobile_device_prestages_id_scope_delete(id, prestage_scope_update, opts = {})
      data, _status_code, _headers = v1_mobile_device_prestages_id_scope_delete_with_http_info(id, prestage_scope_update, opts)
      data
    end

    # Remove Device Scope for a specific Mobile Device Prestage 
    # Remove device scope for a specific mobile device prestage
    # @param id [Integer] Mobile Device Prestage identifier
    # @param prestage_scope_update [PrestageScopeUpdate] Serial Numbers to remove from scope
    # @param [Hash] opts the optional parameters
    # @return [Array<(PrestageScopeResponse, Integer, Hash)>] PrestageScopeResponse data, response status code and response headers
    def v1_mobile_device_prestages_id_scope_delete_with_http_info(id, prestage_scope_update, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: MobileDevicePrestagesApi.v1_mobile_device_prestages_id_scope_delete ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling MobileDevicePrestagesApi.v1_mobile_device_prestages_id_scope_delete"
      end
      # verify the required parameter 'prestage_scope_update' is set
      if @api_client.config.client_side_validation && prestage_scope_update.nil?
        fail ArgumentError, "Missing the required parameter 'prestage_scope_update' when calling MobileDevicePrestagesApi.v1_mobile_device_prestages_id_scope_delete"
      end
      # resource path
      local_var_path = '/v1/mobile-device-prestages/{id}/scope'.sub('{' + 'id' + '}', CGI.escape(id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(prestage_scope_update)

      # return_type
      return_type = opts[:debug_return_type] || 'PrestageScopeResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['Bearer']

      new_options = opts.merge(
        :operation => :"MobileDevicePrestagesApi.v1_mobile_device_prestages_id_scope_delete",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: MobileDevicePrestagesApi#v1_mobile_device_prestages_id_scope_delete\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get Device Scope for a specific Mobile Device Prestage 
    # Get device scope for a specific mobile device prestage
    # @param id [Integer] Mobile Device Prestage identifier
    # @param [Hash] opts the optional parameters
    # @return [PrestageScopeResponse]
    def v1_mobile_device_prestages_id_scope_get(id, opts = {})
      data, _status_code, _headers = v1_mobile_device_prestages_id_scope_get_with_http_info(id, opts)
      data
    end

    # Get Device Scope for a specific Mobile Device Prestage 
    # Get device scope for a specific mobile device prestage
    # @param id [Integer] Mobile Device Prestage identifier
    # @param [Hash] opts the optional parameters
    # @return [Array<(PrestageScopeResponse, Integer, Hash)>] PrestageScopeResponse data, response status code and response headers
    def v1_mobile_device_prestages_id_scope_get_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: MobileDevicePrestagesApi.v1_mobile_device_prestages_id_scope_get ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling MobileDevicePrestagesApi.v1_mobile_device_prestages_id_scope_get"
      end
      # resource path
      local_var_path = '/v1/mobile-device-prestages/{id}/scope'.sub('{' + 'id' + '}', CGI.escape(id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'PrestageScopeResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['Bearer']

      new_options = opts.merge(
        :operation => :"MobileDevicePrestagesApi.v1_mobile_device_prestages_id_scope_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: MobileDevicePrestagesApi#v1_mobile_device_prestages_id_scope_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Add Device Scope for a specific Mobile Device Prestage 
    # Add device scope for a specific mobile device prestage
    # @param id [Integer] Mobile Device Prestage identifier
    # @param prestage_scope_update [PrestageScopeUpdate] Serial Numbers to scope
    # @param [Hash] opts the optional parameters
    # @return [PrestageScopeResponse]
    def v1_mobile_device_prestages_id_scope_post(id, prestage_scope_update, opts = {})
      data, _status_code, _headers = v1_mobile_device_prestages_id_scope_post_with_http_info(id, prestage_scope_update, opts)
      data
    end

    # Add Device Scope for a specific Mobile Device Prestage 
    # Add device scope for a specific mobile device prestage
    # @param id [Integer] Mobile Device Prestage identifier
    # @param prestage_scope_update [PrestageScopeUpdate] Serial Numbers to scope
    # @param [Hash] opts the optional parameters
    # @return [Array<(PrestageScopeResponse, Integer, Hash)>] PrestageScopeResponse data, response status code and response headers
    def v1_mobile_device_prestages_id_scope_post_with_http_info(id, prestage_scope_update, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: MobileDevicePrestagesApi.v1_mobile_device_prestages_id_scope_post ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling MobileDevicePrestagesApi.v1_mobile_device_prestages_id_scope_post"
      end
      # verify the required parameter 'prestage_scope_update' is set
      if @api_client.config.client_side_validation && prestage_scope_update.nil?
        fail ArgumentError, "Missing the required parameter 'prestage_scope_update' when calling MobileDevicePrestagesApi.v1_mobile_device_prestages_id_scope_post"
      end
      # resource path
      local_var_path = '/v1/mobile-device-prestages/{id}/scope'.sub('{' + 'id' + '}', CGI.escape(id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(prestage_scope_update)

      # return_type
      return_type = opts[:debug_return_type] || 'PrestageScopeResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['Bearer']

      new_options = opts.merge(
        :operation => :"MobileDevicePrestagesApi.v1_mobile_device_prestages_id_scope_post",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: MobileDevicePrestagesApi#v1_mobile_device_prestages_id_scope_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Replace Device Scope for a specific Mobile Device Prestage 
    # Replace device scope for a specific mobile device prestage
    # @param id [Integer] Mobile Device Prestage identifier
    # @param prestage_scope_update [PrestageScopeUpdate] Serial Numbers to scope
    # @param [Hash] opts the optional parameters
    # @return [PrestageScopeResponse]
    def v1_mobile_device_prestages_id_scope_put(id, prestage_scope_update, opts = {})
      data, _status_code, _headers = v1_mobile_device_prestages_id_scope_put_with_http_info(id, prestage_scope_update, opts)
      data
    end

    # Replace Device Scope for a specific Mobile Device Prestage 
    # Replace device scope for a specific mobile device prestage
    # @param id [Integer] Mobile Device Prestage identifier
    # @param prestage_scope_update [PrestageScopeUpdate] Serial Numbers to scope
    # @param [Hash] opts the optional parameters
    # @return [Array<(PrestageScopeResponse, Integer, Hash)>] PrestageScopeResponse data, response status code and response headers
    def v1_mobile_device_prestages_id_scope_put_with_http_info(id, prestage_scope_update, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: MobileDevicePrestagesApi.v1_mobile_device_prestages_id_scope_put ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling MobileDevicePrestagesApi.v1_mobile_device_prestages_id_scope_put"
      end
      # verify the required parameter 'prestage_scope_update' is set
      if @api_client.config.client_side_validation && prestage_scope_update.nil?
        fail ArgumentError, "Missing the required parameter 'prestage_scope_update' when calling MobileDevicePrestagesApi.v1_mobile_device_prestages_id_scope_put"
      end
      # resource path
      local_var_path = '/v1/mobile-device-prestages/{id}/scope'.sub('{' + 'id' + '}', CGI.escape(id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(prestage_scope_update)

      # return_type
      return_type = opts[:debug_return_type] || 'PrestageScopeResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['Bearer']

      new_options = opts.merge(
        :operation => :"MobileDevicePrestagesApi.v1_mobile_device_prestages_id_scope_put",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PUT, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: MobileDevicePrestagesApi#v1_mobile_device_prestages_id_scope_put\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Create a Mobile Device Prestage 
    # Create a mobile device prestage
    # @param mobile_device_prestage [MobileDevicePrestage] Mobile Device Prestage to create. ids defined in this body will be ignored
    # @param [Hash] opts the optional parameters
    # @return [GetMobileDevicePrestage]
    def v1_mobile_device_prestages_post(mobile_device_prestage, opts = {})
      data, _status_code, _headers = v1_mobile_device_prestages_post_with_http_info(mobile_device_prestage, opts)
      data
    end

    # Create a Mobile Device Prestage 
    # Create a mobile device prestage
    # @param mobile_device_prestage [MobileDevicePrestage] Mobile Device Prestage to create. ids defined in this body will be ignored
    # @param [Hash] opts the optional parameters
    # @return [Array<(GetMobileDevicePrestage, Integer, Hash)>] GetMobileDevicePrestage data, response status code and response headers
    def v1_mobile_device_prestages_post_with_http_info(mobile_device_prestage, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: MobileDevicePrestagesApi.v1_mobile_device_prestages_post ...'
      end
      # verify the required parameter 'mobile_device_prestage' is set
      if @api_client.config.client_side_validation && mobile_device_prestage.nil?
        fail ArgumentError, "Missing the required parameter 'mobile_device_prestage' when calling MobileDevicePrestagesApi.v1_mobile_device_prestages_post"
      end
      # resource path
      local_var_path = '/v1/mobile-device-prestages'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(mobile_device_prestage)

      # return_type
      return_type = opts[:debug_return_type] || 'GetMobileDevicePrestage'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['Bearer']

      new_options = opts.merge(
        :operation => :"MobileDevicePrestagesApi.v1_mobile_device_prestages_post",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: MobileDevicePrestagesApi#v1_mobile_device_prestages_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get all Device Scope for all Mobile Device Prestages 
    # Get all device scope for all mobile device prestages
    # @param [Hash] opts the optional parameters
    # @return [PrestageScope]
    def v1_mobile_device_prestages_scope_get(opts = {})
      data, _status_code, _headers = v1_mobile_device_prestages_scope_get_with_http_info(opts)
      data
    end

    # Get all Device Scope for all Mobile Device Prestages 
    # Get all device scope for all mobile device prestages
    # @param [Hash] opts the optional parameters
    # @return [Array<(PrestageScope, Integer, Hash)>] PrestageScope data, response status code and response headers
    def v1_mobile_device_prestages_scope_get_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: MobileDevicePrestagesApi.v1_mobile_device_prestages_scope_get ...'
      end
      # resource path
      local_var_path = '/v1/mobile-device-prestages/scope'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'PrestageScope'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['Bearer']

      new_options = opts.merge(
        :operation => :"MobileDevicePrestagesApi.v1_mobile_device_prestages_scope_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: MobileDevicePrestagesApi#v1_mobile_device_prestages_scope_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get all Prestage sync States for all prestages 
    # Get all prestage sync states for all prestages
    # @param [Hash] opts the optional parameters
    # @return [Array<PrestageSyncStatus>]
    def v1_mobile_device_prestages_sync_get(opts = {})
      data, _status_code, _headers = v1_mobile_device_prestages_sync_get_with_http_info(opts)
      data
    end

    # Get all Prestage sync States for all prestages 
    # Get all prestage sync states for all prestages
    # @param [Hash] opts the optional parameters
    # @return [Array<(Array<PrestageSyncStatus>, Integer, Hash)>] Array<PrestageSyncStatus> data, response status code and response headers
    def v1_mobile_device_prestages_sync_get_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: MobileDevicePrestagesApi.v1_mobile_device_prestages_sync_get ...'
      end
      # resource path
      local_var_path = '/v1/mobile-device-prestages/sync'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'Array<PrestageSyncStatus>'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['Bearer']

      new_options = opts.merge(
        :operation => :"MobileDevicePrestagesApi.v1_mobile_device_prestages_sync_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: MobileDevicePrestagesApi#v1_mobile_device_prestages_sync_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get all prestage sync states for a single prestage 
    # Get all prestage sync states for a single prestage
    # @param id [Integer] Mobile Device Prestage identifier
    # @param [Hash] opts the optional parameters
    # @return [Array<PrestageSyncStatus>]
    def v1_mobile_device_prestages_sync_id_get(id, opts = {})
      data, _status_code, _headers = v1_mobile_device_prestages_sync_id_get_with_http_info(id, opts)
      data
    end

    # Get all prestage sync states for a single prestage 
    # Get all prestage sync states for a single prestage
    # @param id [Integer] Mobile Device Prestage identifier
    # @param [Hash] opts the optional parameters
    # @return [Array<(Array<PrestageSyncStatus>, Integer, Hash)>] Array<PrestageSyncStatus> data, response status code and response headers
    def v1_mobile_device_prestages_sync_id_get_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: MobileDevicePrestagesApi.v1_mobile_device_prestages_sync_id_get ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling MobileDevicePrestagesApi.v1_mobile_device_prestages_sync_id_get"
      end
      # resource path
      local_var_path = '/v1/mobile-device-prestages/sync/{id}'.sub('{' + 'id' + '}', CGI.escape(id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'Array<PrestageSyncStatus>'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['Bearer']

      new_options = opts.merge(
        :operation => :"MobileDevicePrestagesApi.v1_mobile_device_prestages_sync_id_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: MobileDevicePrestagesApi#v1_mobile_device_prestages_sync_id_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get the latest Sync State for a single Prestage 
    # Get the latest sync state for a single prestage
    # @param id [Integer] Mobile Device Prestage identifier
    # @param [Hash] opts the optional parameters
    # @return [PrestageSyncStatus]
    def v1_mobile_device_prestages_sync_id_latest_get(id, opts = {})
      data, _status_code, _headers = v1_mobile_device_prestages_sync_id_latest_get_with_http_info(id, opts)
      data
    end

    # Get the latest Sync State for a single Prestage 
    # Get the latest sync state for a single prestage
    # @param id [Integer] Mobile Device Prestage identifier
    # @param [Hash] opts the optional parameters
    # @return [Array<(PrestageSyncStatus, Integer, Hash)>] PrestageSyncStatus data, response status code and response headers
    def v1_mobile_device_prestages_sync_id_latest_get_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: MobileDevicePrestagesApi.v1_mobile_device_prestages_sync_id_latest_get ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling MobileDevicePrestagesApi.v1_mobile_device_prestages_sync_id_latest_get"
      end
      # resource path
      local_var_path = '/v1/mobile-device-prestages/sync/{id}/latest'.sub('{' + 'id' + '}', CGI.escape(id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'PrestageSyncStatus'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['Bearer']

      new_options = opts.merge(
        :operation => :"MobileDevicePrestagesApi.v1_mobile_device_prestages_sync_id_latest_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: MobileDevicePrestagesApi#v1_mobile_device_prestages_sync_id_latest_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get sorted and paged Mobile Device Prestages 
    # Gets sorted and paged mobile device prestages
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :page  (default to 0)
    # @option opts [Integer] :page_size  (default to 100)
    # @option opts [Array<String>] :sort Sorting criteria in the format: property:asc/desc. Multiple sort criteria are supported and must be separated with a comma. Example: sort&#x3D;date:desc,name:asc 
    # @return [MobileDevicePrestageSearchResultsV2]
    def v2_mobile_device_prestages_get(opts = {})
      data, _status_code, _headers = v2_mobile_device_prestages_get_with_http_info(opts)
      data
    end

    # Get sorted and paged Mobile Device Prestages 
    # Gets sorted and paged mobile device prestages
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :page  (default to 0)
    # @option opts [Integer] :page_size  (default to 100)
    # @option opts [Array<String>] :sort Sorting criteria in the format: property:asc/desc. Multiple sort criteria are supported and must be separated with a comma. Example: sort&#x3D;date:desc,name:asc 
    # @return [Array<(MobileDevicePrestageSearchResultsV2, Integer, Hash)>] MobileDevicePrestageSearchResultsV2 data, response status code and response headers
    def v2_mobile_device_prestages_get_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: MobileDevicePrestagesApi.v2_mobile_device_prestages_get ...'
      end
      # resource path
      local_var_path = '/v2/mobile-device-prestages'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'page'] = opts[:'page'] if !opts[:'page'].nil?
      query_params[:'page-size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'sort'] = @api_client.build_collection_param(opts[:'sort'], :multi) if !opts[:'sort'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'MobileDevicePrestageSearchResultsV2'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['Bearer']

      new_options = opts.merge(
        :operation => :"MobileDevicePrestagesApi.v2_mobile_device_prestages_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: MobileDevicePrestagesApi#v2_mobile_device_prestages_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Remove an attachment for a Mobile Device Prestage 
    # Remove an attachment for a Mobile Device Prestage
    # @param id [String] Mobile Device Prestage identifier
    # @param ids [Ids] 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def v2_mobile_device_prestages_id_attachments_delete_multiple_post(id, ids, opts = {})
      v2_mobile_device_prestages_id_attachments_delete_multiple_post_with_http_info(id, ids, opts)
      nil
    end

    # Remove an attachment for a Mobile Device Prestage 
    # Remove an attachment for a Mobile Device Prestage
    # @param id [String] Mobile Device Prestage identifier
    # @param ids [Ids] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def v2_mobile_device_prestages_id_attachments_delete_multiple_post_with_http_info(id, ids, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: MobileDevicePrestagesApi.v2_mobile_device_prestages_id_attachments_delete_multiple_post ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling MobileDevicePrestagesApi.v2_mobile_device_prestages_id_attachments_delete_multiple_post"
      end
      # verify the required parameter 'ids' is set
      if @api_client.config.client_side_validation && ids.nil?
        fail ArgumentError, "Missing the required parameter 'ids' when calling MobileDevicePrestagesApi.v2_mobile_device_prestages_id_attachments_delete_multiple_post"
      end
      # resource path
      local_var_path = '/v2/mobile-device-prestages/{id}/attachments/delete-multiple'.sub('{' + 'id' + '}', CGI.escape(id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(ids)

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || ['Bearer']

      new_options = opts.merge(
        :operation => :"MobileDevicePrestagesApi.v2_mobile_device_prestages_id_attachments_delete_multiple_post",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: MobileDevicePrestagesApi#v2_mobile_device_prestages_id_attachments_delete_multiple_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get attachments for a Mobile Device Prestage 
    # Get attachments for a Mobile Device Prestage
    # @param id [String] Mobile Device Prestage identifier
    # @param [Hash] opts the optional parameters
    # @return [Array<FileAttachmentV2>]
    def v2_mobile_device_prestages_id_attachments_get(id, opts = {})
      data, _status_code, _headers = v2_mobile_device_prestages_id_attachments_get_with_http_info(id, opts)
      data
    end

    # Get attachments for a Mobile Device Prestage 
    # Get attachments for a Mobile Device Prestage
    # @param id [String] Mobile Device Prestage identifier
    # @param [Hash] opts the optional parameters
    # @return [Array<(Array<FileAttachmentV2>, Integer, Hash)>] Array<FileAttachmentV2> data, response status code and response headers
    def v2_mobile_device_prestages_id_attachments_get_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: MobileDevicePrestagesApi.v2_mobile_device_prestages_id_attachments_get ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling MobileDevicePrestagesApi.v2_mobile_device_prestages_id_attachments_get"
      end
      # resource path
      local_var_path = '/v2/mobile-device-prestages/{id}/attachments'.sub('{' + 'id' + '}', CGI.escape(id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'Array<FileAttachmentV2>'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['Bearer']

      new_options = opts.merge(
        :operation => :"MobileDevicePrestagesApi.v2_mobile_device_prestages_id_attachments_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: MobileDevicePrestagesApi#v2_mobile_device_prestages_id_attachments_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Add an attachment to a Mobile Device Prestage 
    # Add an attachment to a Mobile Device prestage
    # @param id [String] Identifier of the Mobile Device Prestage the attachment should be assigned to
    # @param file [File] The file to upload
    # @param [Hash] opts the optional parameters
    # @return [PrestageFileAttachmentV2]
    def v2_mobile_device_prestages_id_attachments_post(id, file, opts = {})
      data, _status_code, _headers = v2_mobile_device_prestages_id_attachments_post_with_http_info(id, file, opts)
      data
    end

    # Add an attachment to a Mobile Device Prestage 
    # Add an attachment to a Mobile Device prestage
    # @param id [String] Identifier of the Mobile Device Prestage the attachment should be assigned to
    # @param file [File] The file to upload
    # @param [Hash] opts the optional parameters
    # @return [Array<(PrestageFileAttachmentV2, Integer, Hash)>] PrestageFileAttachmentV2 data, response status code and response headers
    def v2_mobile_device_prestages_id_attachments_post_with_http_info(id, file, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: MobileDevicePrestagesApi.v2_mobile_device_prestages_id_attachments_post ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling MobileDevicePrestagesApi.v2_mobile_device_prestages_id_attachments_post"
      end
      # verify the required parameter 'file' is set
      if @api_client.config.client_side_validation && file.nil?
        fail ArgumentError, "Missing the required parameter 'file' when calling MobileDevicePrestagesApi.v2_mobile_device_prestages_id_attachments_post"
      end
      # resource path
      local_var_path = '/v2/mobile-device-prestages/{id}/attachments'.sub('{' + 'id' + '}', CGI.escape(id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['multipart/form-data'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}
      form_params['file'] = file

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'PrestageFileAttachmentV2'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['Bearer']

      new_options = opts.merge(
        :operation => :"MobileDevicePrestagesApi.v2_mobile_device_prestages_id_attachments_post",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: MobileDevicePrestagesApi#v2_mobile_device_prestages_id_attachments_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Delete a Mobile Device Prestage with the supplied id 
    # Deletes a Mobile Device Prestage with the supplied id
    # @param id [String] Mobile Device Prestage identifier
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def v2_mobile_device_prestages_id_delete(id, opts = {})
      v2_mobile_device_prestages_id_delete_with_http_info(id, opts)
      nil
    end

    # Delete a Mobile Device Prestage with the supplied id 
    # Deletes a Mobile Device Prestage with the supplied id
    # @param id [String] Mobile Device Prestage identifier
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def v2_mobile_device_prestages_id_delete_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: MobileDevicePrestagesApi.v2_mobile_device_prestages_id_delete ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling MobileDevicePrestagesApi.v2_mobile_device_prestages_id_delete"
      end
      # resource path
      local_var_path = '/v2/mobile-device-prestages/{id}'.sub('{' + 'id' + '}', CGI.escape(id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || ['Bearer']

      new_options = opts.merge(
        :operation => :"MobileDevicePrestagesApi.v2_mobile_device_prestages_id_delete",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: MobileDevicePrestagesApi#v2_mobile_device_prestages_id_delete\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Retrieve a Mobile Device Prestage with the supplied id 
    # Retrieves a Mobile Device Prestage with the supplied id
    # @param id [String] Mobile Device Prestage identifier
    # @param [Hash] opts the optional parameters
    # @return [GetMobileDevicePrestageV2]
    def v2_mobile_device_prestages_id_get(id, opts = {})
      data, _status_code, _headers = v2_mobile_device_prestages_id_get_with_http_info(id, opts)
      data
    end

    # Retrieve a Mobile Device Prestage with the supplied id 
    # Retrieves a Mobile Device Prestage with the supplied id
    # @param id [String] Mobile Device Prestage identifier
    # @param [Hash] opts the optional parameters
    # @return [Array<(GetMobileDevicePrestageV2, Integer, Hash)>] GetMobileDevicePrestageV2 data, response status code and response headers
    def v2_mobile_device_prestages_id_get_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: MobileDevicePrestagesApi.v2_mobile_device_prestages_id_get ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling MobileDevicePrestagesApi.v2_mobile_device_prestages_id_get"
      end
      # resource path
      local_var_path = '/v2/mobile-device-prestages/{id}'.sub('{' + 'id' + '}', CGI.escape(id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'GetMobileDevicePrestageV2'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['Bearer']

      new_options = opts.merge(
        :operation => :"MobileDevicePrestagesApi.v2_mobile_device_prestages_id_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: MobileDevicePrestagesApi#v2_mobile_device_prestages_id_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get sorted and paged Mobile Device Prestage history objects 
    # Gets sorted and paged mobile device prestage history objects
    # @param id [String] Mobile Device Prestage identifier
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :page  (default to 0)
    # @option opts [Integer] :page_size  (default to 100)
    # @option opts [Array<String>] :sort Sorting criteria in the format: property,asc/desc. Default sort order is descending. Multiple sort criteria are supported and must be entered on separate lines in Swagger UI. In the URI the &#39;sort&#39; query param is duplicated for each sort criterion, e.g., ...&amp;sort&#x3D;name%2Casc&amp;sort&#x3D;date%2Cdesc
    # @return [HistorySearchResults]
    def v2_mobile_device_prestages_id_history_get(id, opts = {})
      data, _status_code, _headers = v2_mobile_device_prestages_id_history_get_with_http_info(id, opts)
      data
    end

    # Get sorted and paged Mobile Device Prestage history objects 
    # Gets sorted and paged mobile device prestage history objects
    # @param id [String] Mobile Device Prestage identifier
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :page  (default to 0)
    # @option opts [Integer] :page_size  (default to 100)
    # @option opts [Array<String>] :sort Sorting criteria in the format: property,asc/desc. Default sort order is descending. Multiple sort criteria are supported and must be entered on separate lines in Swagger UI. In the URI the &#39;sort&#39; query param is duplicated for each sort criterion, e.g., ...&amp;sort&#x3D;name%2Casc&amp;sort&#x3D;date%2Cdesc
    # @return [Array<(HistorySearchResults, Integer, Hash)>] HistorySearchResults data, response status code and response headers
    def v2_mobile_device_prestages_id_history_get_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: MobileDevicePrestagesApi.v2_mobile_device_prestages_id_history_get ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling MobileDevicePrestagesApi.v2_mobile_device_prestages_id_history_get"
      end
      # resource path
      local_var_path = '/v2/mobile-device-prestages/{id}/history'.sub('{' + 'id' + '}', CGI.escape(id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'page'] = opts[:'page'] if !opts[:'page'].nil?
      query_params[:'page-size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'sort'] = @api_client.build_collection_param(opts[:'sort'], :multi) if !opts[:'sort'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'HistorySearchResults'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['Bearer']

      new_options = opts.merge(
        :operation => :"MobileDevicePrestagesApi.v2_mobile_device_prestages_id_history_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: MobileDevicePrestagesApi#v2_mobile_device_prestages_id_history_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Add Mobile Device Prestage history object notes 
    # Adds mobile device prestage history object notes
    # @param id [String] Mobile Device Prestage identifier
    # @param object_history_note [ObjectHistoryNote] History notes to create
    # @param [Hash] opts the optional parameters
    # @return [HrefResponse]
    def v2_mobile_device_prestages_id_history_post(id, object_history_note, opts = {})
      data, _status_code, _headers = v2_mobile_device_prestages_id_history_post_with_http_info(id, object_history_note, opts)
      data
    end

    # Add Mobile Device Prestage history object notes 
    # Adds mobile device prestage history object notes
    # @param id [String] Mobile Device Prestage identifier
    # @param object_history_note [ObjectHistoryNote] History notes to create
    # @param [Hash] opts the optional parameters
    # @return [Array<(HrefResponse, Integer, Hash)>] HrefResponse data, response status code and response headers
    def v2_mobile_device_prestages_id_history_post_with_http_info(id, object_history_note, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: MobileDevicePrestagesApi.v2_mobile_device_prestages_id_history_post ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling MobileDevicePrestagesApi.v2_mobile_device_prestages_id_history_post"
      end
      # verify the required parameter 'object_history_note' is set
      if @api_client.config.client_side_validation && object_history_note.nil?
        fail ArgumentError, "Missing the required parameter 'object_history_note' when calling MobileDevicePrestagesApi.v2_mobile_device_prestages_id_history_post"
      end
      # resource path
      local_var_path = '/v2/mobile-device-prestages/{id}/history'.sub('{' + 'id' + '}', CGI.escape(id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(object_history_note)

      # return_type
      return_type = opts[:debug_return_type] || 'HrefResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['Bearer']

      new_options = opts.merge(
        :operation => :"MobileDevicePrestagesApi.v2_mobile_device_prestages_id_history_post",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: MobileDevicePrestagesApi#v2_mobile_device_prestages_id_history_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Update a Mobile Device Prestage 
    # Updates a Mobile Device Prestage
    # @param id [String] Mobile Device Prestage identifier
    # @param put_mobile_device_prestage_v2 [PutMobileDevicePrestageV2] Mobile Device Prestage to update
    # @param [Hash] opts the optional parameters
    # @return [GetMobileDevicePrestageV2]
    def v2_mobile_device_prestages_id_put(id, put_mobile_device_prestage_v2, opts = {})
      data, _status_code, _headers = v2_mobile_device_prestages_id_put_with_http_info(id, put_mobile_device_prestage_v2, opts)
      data
    end

    # Update a Mobile Device Prestage 
    # Updates a Mobile Device Prestage
    # @param id [String] Mobile Device Prestage identifier
    # @param put_mobile_device_prestage_v2 [PutMobileDevicePrestageV2] Mobile Device Prestage to update
    # @param [Hash] opts the optional parameters
    # @return [Array<(GetMobileDevicePrestageV2, Integer, Hash)>] GetMobileDevicePrestageV2 data, response status code and response headers
    def v2_mobile_device_prestages_id_put_with_http_info(id, put_mobile_device_prestage_v2, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: MobileDevicePrestagesApi.v2_mobile_device_prestages_id_put ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling MobileDevicePrestagesApi.v2_mobile_device_prestages_id_put"
      end
      # verify the required parameter 'put_mobile_device_prestage_v2' is set
      if @api_client.config.client_side_validation && put_mobile_device_prestage_v2.nil?
        fail ArgumentError, "Missing the required parameter 'put_mobile_device_prestage_v2' when calling MobileDevicePrestagesApi.v2_mobile_device_prestages_id_put"
      end
      # resource path
      local_var_path = '/v2/mobile-device-prestages/{id}'.sub('{' + 'id' + '}', CGI.escape(id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(put_mobile_device_prestage_v2)

      # return_type
      return_type = opts[:debug_return_type] || 'GetMobileDevicePrestageV2'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['Bearer']

      new_options = opts.merge(
        :operation => :"MobileDevicePrestagesApi.v2_mobile_device_prestages_id_put",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PUT, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: MobileDevicePrestagesApi#v2_mobile_device_prestages_id_put\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Remove Device Scope for a specific Mobile Device Prestage 
    # Remove device scope for a specific mobile device prestage
    # @param id [String] Mobile Device Prestage identifier
    # @param prestage_scope_update [PrestageScopeUpdate] Serial Numbers to remove from scope
    # @param [Hash] opts the optional parameters
    # @return [PrestageScopeResponseV2]
    def v2_mobile_device_prestages_id_scope_delete_multiple_post(id, prestage_scope_update, opts = {})
      data, _status_code, _headers = v2_mobile_device_prestages_id_scope_delete_multiple_post_with_http_info(id, prestage_scope_update, opts)
      data
    end

    # Remove Device Scope for a specific Mobile Device Prestage 
    # Remove device scope for a specific mobile device prestage
    # @param id [String] Mobile Device Prestage identifier
    # @param prestage_scope_update [PrestageScopeUpdate] Serial Numbers to remove from scope
    # @param [Hash] opts the optional parameters
    # @return [Array<(PrestageScopeResponseV2, Integer, Hash)>] PrestageScopeResponseV2 data, response status code and response headers
    def v2_mobile_device_prestages_id_scope_delete_multiple_post_with_http_info(id, prestage_scope_update, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: MobileDevicePrestagesApi.v2_mobile_device_prestages_id_scope_delete_multiple_post ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling MobileDevicePrestagesApi.v2_mobile_device_prestages_id_scope_delete_multiple_post"
      end
      # verify the required parameter 'prestage_scope_update' is set
      if @api_client.config.client_side_validation && prestage_scope_update.nil?
        fail ArgumentError, "Missing the required parameter 'prestage_scope_update' when calling MobileDevicePrestagesApi.v2_mobile_device_prestages_id_scope_delete_multiple_post"
      end
      # resource path
      local_var_path = '/v2/mobile-device-prestages/{id}/scope/delete-multiple'.sub('{' + 'id' + '}', CGI.escape(id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(prestage_scope_update)

      # return_type
      return_type = opts[:debug_return_type] || 'PrestageScopeResponseV2'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['Bearer']

      new_options = opts.merge(
        :operation => :"MobileDevicePrestagesApi.v2_mobile_device_prestages_id_scope_delete_multiple_post",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: MobileDevicePrestagesApi#v2_mobile_device_prestages_id_scope_delete_multiple_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get Device Scope for a specific Mobile Device Prestage 
    # Get device scope for a specific mobile device prestage
    # @param id [String] Mobile Device Prestage identifier
    # @param [Hash] opts the optional parameters
    # @return [PrestageScopeResponseV2]
    def v2_mobile_device_prestages_id_scope_get(id, opts = {})
      data, _status_code, _headers = v2_mobile_device_prestages_id_scope_get_with_http_info(id, opts)
      data
    end

    # Get Device Scope for a specific Mobile Device Prestage 
    # Get device scope for a specific mobile device prestage
    # @param id [String] Mobile Device Prestage identifier
    # @param [Hash] opts the optional parameters
    # @return [Array<(PrestageScopeResponseV2, Integer, Hash)>] PrestageScopeResponseV2 data, response status code and response headers
    def v2_mobile_device_prestages_id_scope_get_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: MobileDevicePrestagesApi.v2_mobile_device_prestages_id_scope_get ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling MobileDevicePrestagesApi.v2_mobile_device_prestages_id_scope_get"
      end
      # resource path
      local_var_path = '/v2/mobile-device-prestages/{id}/scope'.sub('{' + 'id' + '}', CGI.escape(id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'PrestageScopeResponseV2'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['Bearer']

      new_options = opts.merge(
        :operation => :"MobileDevicePrestagesApi.v2_mobile_device_prestages_id_scope_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: MobileDevicePrestagesApi#v2_mobile_device_prestages_id_scope_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Add Device Scope for a specific Mobile Device Prestage 
    # Add device scope for a specific mobile device prestage
    # @param id [String] Mobile Device Prestage identifier
    # @param prestage_scope_update [PrestageScopeUpdate] Serial Numbers to scope
    # @param [Hash] opts the optional parameters
    # @return [PrestageScopeResponseV2]
    def v2_mobile_device_prestages_id_scope_post(id, prestage_scope_update, opts = {})
      data, _status_code, _headers = v2_mobile_device_prestages_id_scope_post_with_http_info(id, prestage_scope_update, opts)
      data
    end

    # Add Device Scope for a specific Mobile Device Prestage 
    # Add device scope for a specific mobile device prestage
    # @param id [String] Mobile Device Prestage identifier
    # @param prestage_scope_update [PrestageScopeUpdate] Serial Numbers to scope
    # @param [Hash] opts the optional parameters
    # @return [Array<(PrestageScopeResponseV2, Integer, Hash)>] PrestageScopeResponseV2 data, response status code and response headers
    def v2_mobile_device_prestages_id_scope_post_with_http_info(id, prestage_scope_update, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: MobileDevicePrestagesApi.v2_mobile_device_prestages_id_scope_post ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling MobileDevicePrestagesApi.v2_mobile_device_prestages_id_scope_post"
      end
      # verify the required parameter 'prestage_scope_update' is set
      if @api_client.config.client_side_validation && prestage_scope_update.nil?
        fail ArgumentError, "Missing the required parameter 'prestage_scope_update' when calling MobileDevicePrestagesApi.v2_mobile_device_prestages_id_scope_post"
      end
      # resource path
      local_var_path = '/v2/mobile-device-prestages/{id}/scope'.sub('{' + 'id' + '}', CGI.escape(id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(prestage_scope_update)

      # return_type
      return_type = opts[:debug_return_type] || 'PrestageScopeResponseV2'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['Bearer']

      new_options = opts.merge(
        :operation => :"MobileDevicePrestagesApi.v2_mobile_device_prestages_id_scope_post",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: MobileDevicePrestagesApi#v2_mobile_device_prestages_id_scope_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Replace Device Scope for a specific Mobile Device Prestage 
    # Replace device scope for a specific mobile device prestage
    # @param id [String] Mobile Device Prestage identifier
    # @param prestage_scope_update [PrestageScopeUpdate] Serial Numbers to scope
    # @param [Hash] opts the optional parameters
    # @return [PrestageScopeResponseV2]
    def v2_mobile_device_prestages_id_scope_put(id, prestage_scope_update, opts = {})
      data, _status_code, _headers = v2_mobile_device_prestages_id_scope_put_with_http_info(id, prestage_scope_update, opts)
      data
    end

    # Replace Device Scope for a specific Mobile Device Prestage 
    # Replace device scope for a specific mobile device prestage
    # @param id [String] Mobile Device Prestage identifier
    # @param prestage_scope_update [PrestageScopeUpdate] Serial Numbers to scope
    # @param [Hash] opts the optional parameters
    # @return [Array<(PrestageScopeResponseV2, Integer, Hash)>] PrestageScopeResponseV2 data, response status code and response headers
    def v2_mobile_device_prestages_id_scope_put_with_http_info(id, prestage_scope_update, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: MobileDevicePrestagesApi.v2_mobile_device_prestages_id_scope_put ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling MobileDevicePrestagesApi.v2_mobile_device_prestages_id_scope_put"
      end
      # verify the required parameter 'prestage_scope_update' is set
      if @api_client.config.client_side_validation && prestage_scope_update.nil?
        fail ArgumentError, "Missing the required parameter 'prestage_scope_update' when calling MobileDevicePrestagesApi.v2_mobile_device_prestages_id_scope_put"
      end
      # resource path
      local_var_path = '/v2/mobile-device-prestages/{id}/scope'.sub('{' + 'id' + '}', CGI.escape(id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(prestage_scope_update)

      # return_type
      return_type = opts[:debug_return_type] || 'PrestageScopeResponseV2'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['Bearer']

      new_options = opts.merge(
        :operation => :"MobileDevicePrestagesApi.v2_mobile_device_prestages_id_scope_put",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PUT, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: MobileDevicePrestagesApi#v2_mobile_device_prestages_id_scope_put\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get all prestage sync states for a single prestage 
    # Get all prestage sync states for a single prestage
    # @param id [String] Mobile Device Prestage identifier
    # @param [Hash] opts the optional parameters
    # @return [Array<PrestageSyncStatusV2>]
    def v2_mobile_device_prestages_id_syncs_get(id, opts = {})
      data, _status_code, _headers = v2_mobile_device_prestages_id_syncs_get_with_http_info(id, opts)
      data
    end

    # Get all prestage sync states for a single prestage 
    # Get all prestage sync states for a single prestage
    # @param id [String] Mobile Device Prestage identifier
    # @param [Hash] opts the optional parameters
    # @return [Array<(Array<PrestageSyncStatusV2>, Integer, Hash)>] Array<PrestageSyncStatusV2> data, response status code and response headers
    def v2_mobile_device_prestages_id_syncs_get_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: MobileDevicePrestagesApi.v2_mobile_device_prestages_id_syncs_get ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling MobileDevicePrestagesApi.v2_mobile_device_prestages_id_syncs_get"
      end
      # resource path
      local_var_path = '/v2/mobile-device-prestages/{id}/syncs'.sub('{' + 'id' + '}', CGI.escape(id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'Array<PrestageSyncStatusV2>'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['Bearer']

      new_options = opts.merge(
        :operation => :"MobileDevicePrestagesApi.v2_mobile_device_prestages_id_syncs_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: MobileDevicePrestagesApi#v2_mobile_device_prestages_id_syncs_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get the latest Sync State for a single Prestage 
    # Get the latest sync state for a single prestage
    # @param id [String] Mobile Device Prestage identifier
    # @param [Hash] opts the optional parameters
    # @return [PrestageSyncStatusV2]
    def v2_mobile_device_prestages_id_syncs_latest_get(id, opts = {})
      data, _status_code, _headers = v2_mobile_device_prestages_id_syncs_latest_get_with_http_info(id, opts)
      data
    end

    # Get the latest Sync State for a single Prestage 
    # Get the latest sync state for a single prestage
    # @param id [String] Mobile Device Prestage identifier
    # @param [Hash] opts the optional parameters
    # @return [Array<(PrestageSyncStatusV2, Integer, Hash)>] PrestageSyncStatusV2 data, response status code and response headers
    def v2_mobile_device_prestages_id_syncs_latest_get_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: MobileDevicePrestagesApi.v2_mobile_device_prestages_id_syncs_latest_get ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling MobileDevicePrestagesApi.v2_mobile_device_prestages_id_syncs_latest_get"
      end
      # resource path
      local_var_path = '/v2/mobile-device-prestages/{id}/syncs/latest'.sub('{' + 'id' + '}', CGI.escape(id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'PrestageSyncStatusV2'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['Bearer']

      new_options = opts.merge(
        :operation => :"MobileDevicePrestagesApi.v2_mobile_device_prestages_id_syncs_latest_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: MobileDevicePrestagesApi#v2_mobile_device_prestages_id_syncs_latest_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Create a Mobile Device Prestage 
    # Create a mobile device prestage
    # @param mobile_device_prestage_v2 [MobileDevicePrestageV2] Mobile Device Prestage to create. ids defined in this body will be ignored
    # @param [Hash] opts the optional parameters
    # @return [HrefResponse]
    def v2_mobile_device_prestages_post(mobile_device_prestage_v2, opts = {})
      data, _status_code, _headers = v2_mobile_device_prestages_post_with_http_info(mobile_device_prestage_v2, opts)
      data
    end

    # Create a Mobile Device Prestage 
    # Create a mobile device prestage
    # @param mobile_device_prestage_v2 [MobileDevicePrestageV2] Mobile Device Prestage to create. ids defined in this body will be ignored
    # @param [Hash] opts the optional parameters
    # @return [Array<(HrefResponse, Integer, Hash)>] HrefResponse data, response status code and response headers
    def v2_mobile_device_prestages_post_with_http_info(mobile_device_prestage_v2, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: MobileDevicePrestagesApi.v2_mobile_device_prestages_post ...'
      end
      # verify the required parameter 'mobile_device_prestage_v2' is set
      if @api_client.config.client_side_validation && mobile_device_prestage_v2.nil?
        fail ArgumentError, "Missing the required parameter 'mobile_device_prestage_v2' when calling MobileDevicePrestagesApi.v2_mobile_device_prestages_post"
      end
      # resource path
      local_var_path = '/v2/mobile-device-prestages'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(mobile_device_prestage_v2)

      # return_type
      return_type = opts[:debug_return_type] || 'HrefResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['Bearer']

      new_options = opts.merge(
        :operation => :"MobileDevicePrestagesApi.v2_mobile_device_prestages_post",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: MobileDevicePrestagesApi#v2_mobile_device_prestages_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get all Device Scope for all Mobile Device Prestages 
    # Get all device scope for all mobile device prestages
    # @param [Hash] opts the optional parameters
    # @return [PrestageScopeV2]
    def v2_mobile_device_prestages_scope_get(opts = {})
      data, _status_code, _headers = v2_mobile_device_prestages_scope_get_with_http_info(opts)
      data
    end

    # Get all Device Scope for all Mobile Device Prestages 
    # Get all device scope for all mobile device prestages
    # @param [Hash] opts the optional parameters
    # @return [Array<(PrestageScopeV2, Integer, Hash)>] PrestageScopeV2 data, response status code and response headers
    def v2_mobile_device_prestages_scope_get_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: MobileDevicePrestagesApi.v2_mobile_device_prestages_scope_get ...'
      end
      # resource path
      local_var_path = '/v2/mobile-device-prestages/scope'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'PrestageScopeV2'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['Bearer']

      new_options = opts.merge(
        :operation => :"MobileDevicePrestagesApi.v2_mobile_device_prestages_scope_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: MobileDevicePrestagesApi#v2_mobile_device_prestages_scope_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get all Prestage sync States for all prestages 
    # Get all prestage sync states for all prestages
    # @param [Hash] opts the optional parameters
    # @return [Array<PrestageSyncStatusV2>]
    def v2_mobile_device_prestages_syncs_get(opts = {})
      data, _status_code, _headers = v2_mobile_device_prestages_syncs_get_with_http_info(opts)
      data
    end

    # Get all Prestage sync States for all prestages 
    # Get all prestage sync states for all prestages
    # @param [Hash] opts the optional parameters
    # @return [Array<(Array<PrestageSyncStatusV2>, Integer, Hash)>] Array<PrestageSyncStatusV2> data, response status code and response headers
    def v2_mobile_device_prestages_syncs_get_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: MobileDevicePrestagesApi.v2_mobile_device_prestages_syncs_get ...'
      end
      # resource path
      local_var_path = '/v2/mobile-device-prestages/syncs'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'Array<PrestageSyncStatusV2>'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['Bearer']

      new_options = opts.merge(
        :operation => :"MobileDevicePrestagesApi.v2_mobile_device_prestages_syncs_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: MobileDevicePrestagesApi#v2_mobile_device_prestages_syncs_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
