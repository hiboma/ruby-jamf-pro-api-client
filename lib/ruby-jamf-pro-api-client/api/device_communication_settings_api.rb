=begin
#Jamf Pro API

### Overview The Jamf Pro API is a RESTful API for Jamf Pro built to enable consistent and efficient programmatic access to Jamf Pro.<br/><br/> The swagger schema can be found [here](/api/schema/). 

The version of the OpenAPI document: production

Generated by: https://openapi-generator.tech
OpenAPI Generator version: 6.1.0-SNAPSHOT

=end

require 'cgi'

module JamfPro
  class DeviceCommunicationSettingsApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Retrieves all settings for device communication 
    # Retrieves all device communication settings, including automatic renewal of the MDM profile. 
    # @param [Hash] opts the optional parameters
    # @return [DeviceCommunicationSettings]
    def v1_device_communication_settings_get(opts = {})
      data, _status_code, _headers = v1_device_communication_settings_get_with_http_info(opts)
      data
    end

    # Retrieves all settings for device communication 
    # Retrieves all device communication settings, including automatic renewal of the MDM profile. 
    # @param [Hash] opts the optional parameters
    # @return [Array<(DeviceCommunicationSettings, Integer, Hash)>] DeviceCommunicationSettings data, response status code and response headers
    def v1_device_communication_settings_get_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DeviceCommunicationSettingsApi.v1_device_communication_settings_get ...'
      end
      # resource path
      local_var_path = '/v1/device-communication-settings'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'DeviceCommunicationSettings'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['Bearer']

      new_options = opts.merge(
        :operation => :"DeviceCommunicationSettingsApi.v1_device_communication_settings_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DeviceCommunicationSettingsApi#v1_device_communication_settings_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get Device Communication settings history 
    # Gets Device Communication settings history 
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :page  (default to 0)
    # @option opts [Integer] :page_size  (default to 100)
    # @option opts [Array<String>] :sort Sorting criteria in the format: property:asc/desc. Default sort is date:desc. Multiple sort criteria are supported and must be separated with a comma. Example: sort&#x3D;date:desc,name:asc 
    # @option opts [String] :filter Query in the RSQL format, allowing to filter history notes collection. Default filter is empty query - returning all results for the requested page. Fields allowed in the query: username, date, note, details. This param can be combined with paging and sorting. Example: filter&#x3D;username!&#x3D;admin and details&#x3D;&#x3D;*disabled* and date&lt;2019-12-15 (default to '')
    # @return [HistorySearchResults]
    def v1_device_communication_settings_history_get(opts = {})
      data, _status_code, _headers = v1_device_communication_settings_history_get_with_http_info(opts)
      data
    end

    # Get Device Communication settings history 
    # Gets Device Communication settings history 
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :page  (default to 0)
    # @option opts [Integer] :page_size  (default to 100)
    # @option opts [Array<String>] :sort Sorting criteria in the format: property:asc/desc. Default sort is date:desc. Multiple sort criteria are supported and must be separated with a comma. Example: sort&#x3D;date:desc,name:asc 
    # @option opts [String] :filter Query in the RSQL format, allowing to filter history notes collection. Default filter is empty query - returning all results for the requested page. Fields allowed in the query: username, date, note, details. This param can be combined with paging and sorting. Example: filter&#x3D;username!&#x3D;admin and details&#x3D;&#x3D;*disabled* and date&lt;2019-12-15 (default to '')
    # @return [Array<(HistorySearchResults, Integer, Hash)>] HistorySearchResults data, response status code and response headers
    def v1_device_communication_settings_history_get_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DeviceCommunicationSettingsApi.v1_device_communication_settings_history_get ...'
      end
      # resource path
      local_var_path = '/v1/device-communication-settings/history'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'page'] = opts[:'page'] if !opts[:'page'].nil?
      query_params[:'page-size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'sort'] = @api_client.build_collection_param(opts[:'sort'], :multi) if !opts[:'sort'].nil?
      query_params[:'filter'] = opts[:'filter'] if !opts[:'filter'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'HistorySearchResults'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['Bearer']

      new_options = opts.merge(
        :operation => :"DeviceCommunicationSettingsApi.v1_device_communication_settings_history_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DeviceCommunicationSettingsApi#v1_device_communication_settings_history_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Add Device Communication Settings history notes 
    # Adds Device Communication Settings history notes 
    # @param object_history_note [ObjectHistoryNote] history notes to create
    # @param [Hash] opts the optional parameters
    # @return [ObjectHistory]
    def v1_device_communication_settings_history_post(object_history_note, opts = {})
      data, _status_code, _headers = v1_device_communication_settings_history_post_with_http_info(object_history_note, opts)
      data
    end

    # Add Device Communication Settings history notes 
    # Adds Device Communication Settings history notes 
    # @param object_history_note [ObjectHistoryNote] history notes to create
    # @param [Hash] opts the optional parameters
    # @return [Array<(ObjectHistory, Integer, Hash)>] ObjectHistory data, response status code and response headers
    def v1_device_communication_settings_history_post_with_http_info(object_history_note, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DeviceCommunicationSettingsApi.v1_device_communication_settings_history_post ...'
      end
      # verify the required parameter 'object_history_note' is set
      if @api_client.config.client_side_validation && object_history_note.nil?
        fail ArgumentError, "Missing the required parameter 'object_history_note' when calling DeviceCommunicationSettingsApi.v1_device_communication_settings_history_post"
      end
      # resource path
      local_var_path = '/v1/device-communication-settings/history'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(object_history_note)

      # return_type
      return_type = opts[:debug_return_type] || 'ObjectHistory'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['Bearer']

      new_options = opts.merge(
        :operation => :"DeviceCommunicationSettingsApi.v1_device_communication_settings_history_post",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DeviceCommunicationSettingsApi#v1_device_communication_settings_history_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Update device communication settings 
    # Update device communication settings 
    # @param device_communication_settings [DeviceCommunicationSettings] 
    # @param [Hash] opts the optional parameters
    # @return [DeviceCommunicationSettings]
    def v1_device_communication_settings_put(device_communication_settings, opts = {})
      data, _status_code, _headers = v1_device_communication_settings_put_with_http_info(device_communication_settings, opts)
      data
    end

    # Update device communication settings 
    # Update device communication settings 
    # @param device_communication_settings [DeviceCommunicationSettings] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(DeviceCommunicationSettings, Integer, Hash)>] DeviceCommunicationSettings data, response status code and response headers
    def v1_device_communication_settings_put_with_http_info(device_communication_settings, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DeviceCommunicationSettingsApi.v1_device_communication_settings_put ...'
      end
      # verify the required parameter 'device_communication_settings' is set
      if @api_client.config.client_side_validation && device_communication_settings.nil?
        fail ArgumentError, "Missing the required parameter 'device_communication_settings' when calling DeviceCommunicationSettingsApi.v1_device_communication_settings_put"
      end
      # resource path
      local_var_path = '/v1/device-communication-settings'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(device_communication_settings)

      # return_type
      return_type = opts[:debug_return_type] || 'DeviceCommunicationSettings'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['Bearer']

      new_options = opts.merge(
        :operation => :"DeviceCommunicationSettingsApi.v1_device_communication_settings_put",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PUT, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DeviceCommunicationSettingsApi#v1_device_communication_settings_put\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
