=begin
#Jamf Pro API

### Overview The Jamf Pro API is a RESTful API for Jamf Pro built to enable consistent and efficient programmatic access to Jamf Pro.<br/><br/> The swagger schema can be found [here](/api/schema/). 

The version of the OpenAPI document: production

Generated by: https://openapi-generator.tech
OpenAPI Generator version: 6.1.0-SNAPSHOT

=end

require 'cgi'

module JamfPro
  class MobileDevicesApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Get Mobile Device objects 
    # Gets Mobile Device objects. 
    # @param [Hash] opts the optional parameters
    # @return [Array<MobileDevice>]
    def v1_mobile_devices_get(opts = {})
      data, _status_code, _headers = v1_mobile_devices_get_with_http_info(opts)
      data
    end

    # Get Mobile Device objects 
    # Gets Mobile Device objects. 
    # @param [Hash] opts the optional parameters
    # @return [Array<(Array<MobileDevice>, Integer, Hash)>] Array<MobileDevice> data, response status code and response headers
    def v1_mobile_devices_get_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: MobileDevicesApi.v1_mobile_devices_get ...'
      end
      # resource path
      local_var_path = '/v1/mobile-devices'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'Array<MobileDevice>'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['Bearer']

      new_options = opts.merge(
        :operation => :"MobileDevicesApi.v1_mobile_devices_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: MobileDevicesApi#v1_mobile_devices_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get Mobile Device 
    # Get MobileDevice
    # @param id [Integer] instance id of mobile device record
    # @param [Hash] opts the optional parameters
    # @return [MobileDeviceDetails]
    def v1_mobile_devices_id_detail_get(id, opts = {})
      data, _status_code, _headers = v1_mobile_devices_id_detail_get_with_http_info(id, opts)
      data
    end

    # Get Mobile Device 
    # Get MobileDevice
    # @param id [Integer] instance id of mobile device record
    # @param [Hash] opts the optional parameters
    # @return [Array<(MobileDeviceDetails, Integer, Hash)>] MobileDeviceDetails data, response status code and response headers
    def v1_mobile_devices_id_detail_get_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: MobileDevicesApi.v1_mobile_devices_id_detail_get ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling MobileDevicesApi.v1_mobile_devices_id_detail_get"
      end
      # resource path
      local_var_path = '/v1/mobile-devices/{id}/detail'.sub('{' + 'id' + '}', CGI.escape(id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'MobileDeviceDetails'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['Bearer']

      new_options = opts.merge(
        :operation => :"MobileDevicesApi.v1_mobile_devices_id_detail_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: MobileDevicesApi#v1_mobile_devices_id_detail_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get Mobile Device 
    # Get MobileDevice
    # @param id [Integer] instance id of mobile device record
    # @param [Hash] opts the optional parameters
    # @return [MobileDevice]
    def v1_mobile_devices_id_get(id, opts = {})
      data, _status_code, _headers = v1_mobile_devices_id_get_with_http_info(id, opts)
      data
    end

    # Get Mobile Device 
    # Get MobileDevice
    # @param id [Integer] instance id of mobile device record
    # @param [Hash] opts the optional parameters
    # @return [Array<(MobileDevice, Integer, Hash)>] MobileDevice data, response status code and response headers
    def v1_mobile_devices_id_get_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: MobileDevicesApi.v1_mobile_devices_id_get ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling MobileDevicesApi.v1_mobile_devices_id_get"
      end
      # resource path
      local_var_path = '/v1/mobile-devices/{id}'.sub('{' + 'id' + '}', CGI.escape(id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'MobileDevice'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['Bearer']

      new_options = opts.merge(
        :operation => :"MobileDevicesApi.v1_mobile_devices_id_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: MobileDevicesApi#v1_mobile_devices_id_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Update fields on a mobile device that are allowed to be modified by users 
    # Updates fields on a mobile device that are allowed to be modified by users.
    # @param id [Integer] instance id of mobile device record
    # @param update_mobile_device [UpdateMobileDevice] 
    # @param [Hash] opts the optional parameters
    # @return [MobileDeviceDetails]
    def v1_mobile_devices_id_patch(id, update_mobile_device, opts = {})
      data, _status_code, _headers = v1_mobile_devices_id_patch_with_http_info(id, update_mobile_device, opts)
      data
    end

    # Update fields on a mobile device that are allowed to be modified by users 
    # Updates fields on a mobile device that are allowed to be modified by users.
    # @param id [Integer] instance id of mobile device record
    # @param update_mobile_device [UpdateMobileDevice] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(MobileDeviceDetails, Integer, Hash)>] MobileDeviceDetails data, response status code and response headers
    def v1_mobile_devices_id_patch_with_http_info(id, update_mobile_device, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: MobileDevicesApi.v1_mobile_devices_id_patch ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling MobileDevicesApi.v1_mobile_devices_id_patch"
      end
      # verify the required parameter 'update_mobile_device' is set
      if @api_client.config.client_side_validation && update_mobile_device.nil?
        fail ArgumentError, "Missing the required parameter 'update_mobile_device' when calling MobileDevicesApi.v1_mobile_devices_id_patch"
      end
      # resource path
      local_var_path = '/v1/mobile-devices/{id}'.sub('{' + 'id' + '}', CGI.escape(id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(update_mobile_device)

      # return_type
      return_type = opts[:debug_return_type] || 'MobileDeviceDetails'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['Bearer']

      new_options = opts.merge(
        :operation => :"MobileDevicesApi.v1_mobile_devices_id_patch",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PATCH, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: MobileDevicesApi#v1_mobile_devices_id_patch\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Search Mobile Devices 
    # Search Mobile Devices
    # @param [Hash] opts the optional parameters
    # @option opts [MobileDeviceSearchParams] :mobile_device_search_params 
    # @return [MobileDeviceSearchResults]
    def v1_search_mobile_devices_post(opts = {})
      data, _status_code, _headers = v1_search_mobile_devices_post_with_http_info(opts)
      data
    end

    # Search Mobile Devices 
    # Search Mobile Devices
    # @param [Hash] opts the optional parameters
    # @option opts [MobileDeviceSearchParams] :mobile_device_search_params 
    # @return [Array<(MobileDeviceSearchResults, Integer, Hash)>] MobileDeviceSearchResults data, response status code and response headers
    def v1_search_mobile_devices_post_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: MobileDevicesApi.v1_search_mobile_devices_post ...'
      end
      # resource path
      local_var_path = '/v1/search-mobile-devices'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(opts[:'mobile_device_search_params'])

      # return_type
      return_type = opts[:debug_return_type] || 'MobileDeviceSearchResults'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['Bearer']

      new_options = opts.merge(
        :operation => :"MobileDevicesApi.v1_search_mobile_devices_post",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: MobileDevicesApi#v1_search_mobile_devices_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get Mobile Device objects 
    # Gets Mobile Device objects. 
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :page  (default to 0)
    # @option opts [Integer] :page_size  (default to 100)
    # @option opts [Array<String>] :sort Sorting criteria in the format: property:asc/desc. Default sort is id:asc. Multiple sort criteria are supported and must be separated with a comma. Example: sort&#x3D;date:desc,name:asc 
    # @return [MobileDeviceSearchResultsV2]
    def v2_mobile_devices_get(opts = {})
      data, _status_code, _headers = v2_mobile_devices_get_with_http_info(opts)
      data
    end

    # Get Mobile Device objects 
    # Gets Mobile Device objects. 
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :page  (default to 0)
    # @option opts [Integer] :page_size  (default to 100)
    # @option opts [Array<String>] :sort Sorting criteria in the format: property:asc/desc. Default sort is id:asc. Multiple sort criteria are supported and must be separated with a comma. Example: sort&#x3D;date:desc,name:asc 
    # @return [Array<(MobileDeviceSearchResultsV2, Integer, Hash)>] MobileDeviceSearchResultsV2 data, response status code and response headers
    def v2_mobile_devices_get_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: MobileDevicesApi.v2_mobile_devices_get ...'
      end
      # resource path
      local_var_path = '/v2/mobile-devices'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'page'] = opts[:'page'] if !opts[:'page'].nil?
      query_params[:'page-size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'sort'] = @api_client.build_collection_param(opts[:'sort'], :multi) if !opts[:'sort'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'MobileDeviceSearchResultsV2'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['Bearer']

      new_options = opts.merge(
        :operation => :"MobileDevicesApi.v2_mobile_devices_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: MobileDevicesApi#v2_mobile_devices_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get Mobile Device 
    # Get MobileDevice
    # @param id [String] instance id of mobile device record
    # @param [Hash] opts the optional parameters
    # @return [MobileDeviceDetailsGetV2]
    def v2_mobile_devices_id_detail_get(id, opts = {})
      data, _status_code, _headers = v2_mobile_devices_id_detail_get_with_http_info(id, opts)
      data
    end

    # Get Mobile Device 
    # Get MobileDevice
    # @param id [String] instance id of mobile device record
    # @param [Hash] opts the optional parameters
    # @return [Array<(MobileDeviceDetailsGetV2, Integer, Hash)>] MobileDeviceDetailsGetV2 data, response status code and response headers
    def v2_mobile_devices_id_detail_get_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: MobileDevicesApi.v2_mobile_devices_id_detail_get ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling MobileDevicesApi.v2_mobile_devices_id_detail_get"
      end
      # resource path
      local_var_path = '/v2/mobile-devices/{id}/detail'.sub('{' + 'id' + '}', CGI.escape(id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'MobileDeviceDetailsGetV2'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['Bearer']

      new_options = opts.merge(
        :operation => :"MobileDevicesApi.v2_mobile_devices_id_detail_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: MobileDevicesApi#v2_mobile_devices_id_detail_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get Mobile Device 
    # Get MobileDevice
    # @param id [String] instance id of mobile device record
    # @param [Hash] opts the optional parameters
    # @return [MobileDeviceV2]
    def v2_mobile_devices_id_get(id, opts = {})
      data, _status_code, _headers = v2_mobile_devices_id_get_with_http_info(id, opts)
      data
    end

    # Get Mobile Device 
    # Get MobileDevice
    # @param id [String] instance id of mobile device record
    # @param [Hash] opts the optional parameters
    # @return [Array<(MobileDeviceV2, Integer, Hash)>] MobileDeviceV2 data, response status code and response headers
    def v2_mobile_devices_id_get_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: MobileDevicesApi.v2_mobile_devices_id_get ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling MobileDevicesApi.v2_mobile_devices_id_get"
      end
      # resource path
      local_var_path = '/v2/mobile-devices/{id}'.sub('{' + 'id' + '}', CGI.escape(id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'MobileDeviceV2'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['Bearer']

      new_options = opts.merge(
        :operation => :"MobileDevicesApi.v2_mobile_devices_id_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: MobileDevicesApi#v2_mobile_devices_id_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Update fields on a mobile device that are allowed to be modified by users 
    # Updates fields on a mobile device that are allowed to be modified by users.
    # @param id [String] instance id of mobile device record
    # @param update_mobile_device_v2 [UpdateMobileDeviceV2] 
    # @param [Hash] opts the optional parameters
    # @return [MobileDeviceDetailsV2]
    def v2_mobile_devices_id_patch(id, update_mobile_device_v2, opts = {})
      data, _status_code, _headers = v2_mobile_devices_id_patch_with_http_info(id, update_mobile_device_v2, opts)
      data
    end

    # Update fields on a mobile device that are allowed to be modified by users 
    # Updates fields on a mobile device that are allowed to be modified by users.
    # @param id [String] instance id of mobile device record
    # @param update_mobile_device_v2 [UpdateMobileDeviceV2] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(MobileDeviceDetailsV2, Integer, Hash)>] MobileDeviceDetailsV2 data, response status code and response headers
    def v2_mobile_devices_id_patch_with_http_info(id, update_mobile_device_v2, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: MobileDevicesApi.v2_mobile_devices_id_patch ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling MobileDevicesApi.v2_mobile_devices_id_patch"
      end
      # verify the required parameter 'update_mobile_device_v2' is set
      if @api_client.config.client_side_validation && update_mobile_device_v2.nil?
        fail ArgumentError, "Missing the required parameter 'update_mobile_device_v2' when calling MobileDevicesApi.v2_mobile_devices_id_patch"
      end
      # resource path
      local_var_path = '/v2/mobile-devices/{id}'.sub('{' + 'id' + '}', CGI.escape(id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(update_mobile_device_v2)

      # return_type
      return_type = opts[:debug_return_type] || 'MobileDeviceDetailsV2'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['Bearer']

      new_options = opts.merge(
        :operation => :"MobileDevicesApi.v2_mobile_devices_id_patch",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PATCH, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: MobileDevicesApi#v2_mobile_devices_id_patch\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
