=begin
#Jamf Pro API

### Overview The Jamf Pro API is a RESTful API for Jamf Pro built to enable consistent and efficient programmatic access to Jamf Pro.<br/><br/> The swagger schema can be found [here](/api/schema/). 

The version of the OpenAPI document: production

Generated by: https://openapi-generator.tech
OpenAPI Generator version: 6.1.0-SNAPSHOT

=end

require 'cgi'

module JamfPro
  class SsoCertificateApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Delete the currently configured certificate used by SSO 
    # Deletes the currently configured certificate used by SSO.
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def v2_sso_cert_delete(opts = {})
      v2_sso_cert_delete_with_http_info(opts)
      nil
    end

    # Delete the currently configured certificate used by SSO 
    # Deletes the currently configured certificate used by SSO.
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def v2_sso_cert_delete_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SsoCertificateApi.v2_sso_cert_delete ...'
      end
      # resource path
      local_var_path = '/v2/sso/cert'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || ['Bearer']

      new_options = opts.merge(
        :operation => :"SsoCertificateApi.v2_sso_cert_delete",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SsoCertificateApi#v2_sso_cert_delete\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Download the certificate currently configured for use with Jamf Pro's SSO configuration 
    # Downloads the certificate currently configured for use with Jamf Pro's SSO configuration
    # @param [Hash] opts the optional parameters
    # @return [File]
    def v2_sso_cert_download_get(opts = {})
      data, _status_code, _headers = v2_sso_cert_download_get_with_http_info(opts)
      data
    end

    # Download the certificate currently configured for use with Jamf Pro&#39;s SSO configuration 
    # Downloads the certificate currently configured for use with Jamf Pro&#39;s SSO configuration
    # @param [Hash] opts the optional parameters
    # @return [Array<(File, Integer, Hash)>] File data, response status code and response headers
    def v2_sso_cert_download_get_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SsoCertificateApi.v2_sso_cert_download_get ...'
      end
      # resource path
      local_var_path = '/v2/sso/cert/download'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['text/plain'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'File'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['Bearer']

      new_options = opts.merge(
        :operation => :"SsoCertificateApi.v2_sso_cert_download_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SsoCertificateApi#v2_sso_cert_download_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Retrieve the certificate currently configured for use with SSO 
    # Retrieves the certificate currently configured for use with SSO.
    # @param [Hash] opts the optional parameters
    # @return [SsoKeystoreResponseWithDetails]
    def v2_sso_cert_get(opts = {})
      data, _status_code, _headers = v2_sso_cert_get_with_http_info(opts)
      data
    end

    # Retrieve the certificate currently configured for use with SSO 
    # Retrieves the certificate currently configured for use with SSO.
    # @param [Hash] opts the optional parameters
    # @return [Array<(SsoKeystoreResponseWithDetails, Integer, Hash)>] SsoKeystoreResponseWithDetails data, response status code and response headers
    def v2_sso_cert_get_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SsoCertificateApi.v2_sso_cert_get ...'
      end
      # resource path
      local_var_path = '/v2/sso/cert'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'SsoKeystoreResponseWithDetails'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['Bearer']

      new_options = opts.merge(
        :operation => :"SsoCertificateApi.v2_sso_cert_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SsoCertificateApi#v2_sso_cert_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Parse the certificate to get details about certificate type and keys needed to upload certificate file 
    # Parse the certificate to get details about certificate type and keys needed to upload certificate file.
    # @param sso_keystore_parse [SsoKeystoreParse] 
    # @param [Hash] opts the optional parameters
    # @return [SsoKeystoreCertParseResponse]
    def v2_sso_cert_parse_post(sso_keystore_parse, opts = {})
      data, _status_code, _headers = v2_sso_cert_parse_post_with_http_info(sso_keystore_parse, opts)
      data
    end

    # Parse the certificate to get details about certificate type and keys needed to upload certificate file 
    # Parse the certificate to get details about certificate type and keys needed to upload certificate file.
    # @param sso_keystore_parse [SsoKeystoreParse] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(SsoKeystoreCertParseResponse, Integer, Hash)>] SsoKeystoreCertParseResponse data, response status code and response headers
    def v2_sso_cert_parse_post_with_http_info(sso_keystore_parse, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SsoCertificateApi.v2_sso_cert_parse_post ...'
      end
      # verify the required parameter 'sso_keystore_parse' is set
      if @api_client.config.client_side_validation && sso_keystore_parse.nil?
        fail ArgumentError, "Missing the required parameter 'sso_keystore_parse' when calling SsoCertificateApi.v2_sso_cert_parse_post"
      end
      # resource path
      local_var_path = '/v2/sso/cert/parse'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(sso_keystore_parse)

      # return_type
      return_type = opts[:debug_return_type] || 'SsoKeystoreCertParseResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['Bearer']

      new_options = opts.merge(
        :operation => :"SsoCertificateApi.v2_sso_cert_parse_post",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SsoCertificateApi#v2_sso_cert_parse_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Jamf Pro will generate a new certificate and use it to sign SSO 
    # Jamf Pro will generate a new certificate and use it to sign SSO requests to the identity provider.
    # @param [Hash] opts the optional parameters
    # @return [SsoKeystoreResponseWithDetails]
    def v2_sso_cert_post(opts = {})
      data, _status_code, _headers = v2_sso_cert_post_with_http_info(opts)
      data
    end

    # Jamf Pro will generate a new certificate and use it to sign SSO 
    # Jamf Pro will generate a new certificate and use it to sign SSO requests to the identity provider.
    # @param [Hash] opts the optional parameters
    # @return [Array<(SsoKeystoreResponseWithDetails, Integer, Hash)>] SsoKeystoreResponseWithDetails data, response status code and response headers
    def v2_sso_cert_post_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SsoCertificateApi.v2_sso_cert_post ...'
      end
      # resource path
      local_var_path = '/v2/sso/cert'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'SsoKeystoreResponseWithDetails'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['Bearer']

      new_options = opts.merge(
        :operation => :"SsoCertificateApi.v2_sso_cert_post",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SsoCertificateApi#v2_sso_cert_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Update the certificate used by Jamf Pro to sign SSO requests to the identify provider 
    # Update the certificate used by Jamf Pro to sign SSO requests to the identify provider.
    # @param sso_keystore [SsoKeystore] 
    # @param [Hash] opts the optional parameters
    # @return [SsoKeystoreResponseWithDetails]
    def v2_sso_cert_put(sso_keystore, opts = {})
      data, _status_code, _headers = v2_sso_cert_put_with_http_info(sso_keystore, opts)
      data
    end

    # Update the certificate used by Jamf Pro to sign SSO requests to the identify provider 
    # Update the certificate used by Jamf Pro to sign SSO requests to the identify provider.
    # @param sso_keystore [SsoKeystore] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(SsoKeystoreResponseWithDetails, Integer, Hash)>] SsoKeystoreResponseWithDetails data, response status code and response headers
    def v2_sso_cert_put_with_http_info(sso_keystore, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SsoCertificateApi.v2_sso_cert_put ...'
      end
      # verify the required parameter 'sso_keystore' is set
      if @api_client.config.client_side_validation && sso_keystore.nil?
        fail ArgumentError, "Missing the required parameter 'sso_keystore' when calling SsoCertificateApi.v2_sso_cert_put"
      end
      # resource path
      local_var_path = '/v2/sso/cert'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(sso_keystore)

      # return_type
      return_type = opts[:debug_return_type] || 'SsoKeystoreResponseWithDetails'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['Bearer']

      new_options = opts.merge(
        :operation => :"SsoCertificateApi.v2_sso_cert_put",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PUT, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SsoCertificateApi#v2_sso_cert_put\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
