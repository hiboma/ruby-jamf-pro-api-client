=begin
#Jamf Pro API

### Overview The Jamf Pro API is a RESTful API for Jamf Pro built to enable consistent and efficient programmatic access to Jamf Pro.<br/><br/> The swagger schema can be found [here](/api/schema/). 

The version of the OpenAPI document: production

Generated by: https://openapi-generator.tech
OpenAPI Generator version: 6.1.0-SNAPSHOT

=end

require 'cgi'

module JamfPro
  class ApiAuthenticationApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Get the authorization details associated with the current API token 
    # Get the authorization details associated with the current API token for the users current site
    # @param [Hash] opts the optional parameters
    # @return [CurrentAuthorization]
    def auth_current_post(opts = {})
      data, _status_code, _headers = auth_current_post_with_http_info(opts)
      data
    end

    # Get the authorization details associated with the current API token 
    # Get the authorization details associated with the current API token for the users current site
    # @param [Hash] opts the optional parameters
    # @return [Array<(CurrentAuthorization, Integer, Hash)>] CurrentAuthorization data, response status code and response headers
    def auth_current_post_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ApiAuthenticationApi.auth_current_post ...'
      end
      # resource path
      local_var_path = '/auth/current'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'CurrentAuthorization'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['Bearer']

      new_options = opts.merge(
        :operation => :"ApiAuthenticationApi.auth_current_post",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ApiAuthenticationApi#auth_current_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get all the Authorization details associated with the current api 
    # Get all the authorization details associated with the current api token
    # @param [Hash] opts the optional parameters
    # @return [Authorization]
    def auth_get(opts = {})
      data, _status_code, _headers = auth_get_with_http_info(opts)
      data
    end

    # Get all the Authorization details associated with the current api 
    # Get all the authorization details associated with the current api token
    # @param [Hash] opts the optional parameters
    # @return [Array<(Authorization, Integer, Hash)>] Authorization data, response status code and response headers
    def auth_get_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ApiAuthenticationApi.auth_get ...'
      end
      # resource path
      local_var_path = '/auth'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'Authorization'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['Bearer']

      new_options = opts.merge(
        :operation => :"ApiAuthenticationApi.auth_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ApiAuthenticationApi#auth_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Invalidate current token 
    # Invalidates current token
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def auth_invalidate_token_post(opts = {})
      auth_invalidate_token_post_with_http_info(opts)
      nil
    end

    # Invalidate current token 
    # Invalidates current token
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def auth_invalidate_token_post_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ApiAuthenticationApi.auth_invalidate_token_post ...'
      end
      # resource path
      local_var_path = '/auth/invalidateToken'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || ['Bearer']

      new_options = opts.merge(
        :operation => :"ApiAuthenticationApi.auth_invalidate_token_post",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ApiAuthenticationApi#auth_invalidate_token_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Invalidate existing token and generates new token 
    # Invalidates existing token and generates new token with extended expiration based on existing token credentials.
    # @param [Hash] opts the optional parameters
    # @return [AuthToken]
    def auth_keep_alive_post(opts = {})
      data, _status_code, _headers = auth_keep_alive_post_with_http_info(opts)
      data
    end

    # Invalidate existing token and generates new token 
    # Invalidates existing token and generates new token with extended expiration based on existing token credentials.
    # @param [Hash] opts the optional parameters
    # @return [Array<(AuthToken, Integer, Hash)>] AuthToken data, response status code and response headers
    def auth_keep_alive_post_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ApiAuthenticationApi.auth_keep_alive_post ...'
      end
      # resource path
      local_var_path = '/auth/keepAlive'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'AuthToken'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['Bearer']

      new_options = opts.merge(
        :operation => :"ApiAuthenticationApi.auth_keep_alive_post",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ApiAuthenticationApi#auth_keep_alive_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Create a token based on other authentication details (basic, etc.) 
    # Create a token based on other authentication details (basic, etc.) 
    # @param [Hash] opts the optional parameters
    # @return [AuthToken]
    def auth_tokens_post(opts = {})
      data, _status_code, _headers = auth_tokens_post_with_http_info(opts)
      data
    end

    # Create a token based on other authentication details (basic, etc.) 
    # Create a token based on other authentication details (basic, etc.) 
    # @param [Hash] opts the optional parameters
    # @return [Array<(AuthToken, Integer, Hash)>] AuthToken data, response status code and response headers
    def auth_tokens_post_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ApiAuthenticationApi.auth_tokens_post ...'
      end
      # resource path
      local_var_path = '/auth/tokens'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'AuthToken'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['BasicAuth']

      new_options = opts.merge(
        :operation => :"ApiAuthenticationApi.auth_tokens_post",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ApiAuthenticationApi#auth_tokens_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get all the Authorization details associated with the current api 
    # Get all the authorization details associated with the current api token
    # @param [Hash] opts the optional parameters
    # @return [AuthorizationV1]
    def v1_auth_get(opts = {})
      data, _status_code, _headers = v1_auth_get_with_http_info(opts)
      data
    end

    # Get all the Authorization details associated with the current api 
    # Get all the authorization details associated with the current api token
    # @param [Hash] opts the optional parameters
    # @return [Array<(AuthorizationV1, Integer, Hash)>] AuthorizationV1 data, response status code and response headers
    def v1_auth_get_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ApiAuthenticationApi.v1_auth_get ...'
      end
      # resource path
      local_var_path = '/v1/auth'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'AuthorizationV1'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['Bearer']

      new_options = opts.merge(
        :operation => :"ApiAuthenticationApi.v1_auth_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ApiAuthenticationApi#v1_auth_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Invalidate current token 
    # Invalidates current token
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def v1_auth_invalidate_token_post(opts = {})
      v1_auth_invalidate_token_post_with_http_info(opts)
      nil
    end

    # Invalidate current token 
    # Invalidates current token
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def v1_auth_invalidate_token_post_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ApiAuthenticationApi.v1_auth_invalidate_token_post ...'
      end
      # resource path
      local_var_path = '/v1/auth/invalidate-token'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || ['Bearer']

      new_options = opts.merge(
        :operation => :"ApiAuthenticationApi.v1_auth_invalidate_token_post",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ApiAuthenticationApi#v1_auth_invalidate_token_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Invalidate existing token and generates new token 
    # Invalidates existing token and generates new token with extended expiration based on existing token credentials.
    # @param [Hash] opts the optional parameters
    # @return [AuthTokenV1]
    def v1_auth_keep_alive_post(opts = {})
      data, _status_code, _headers = v1_auth_keep_alive_post_with_http_info(opts)
      data
    end

    # Invalidate existing token and generates new token 
    # Invalidates existing token and generates new token with extended expiration based on existing token credentials.
    # @param [Hash] opts the optional parameters
    # @return [Array<(AuthTokenV1, Integer, Hash)>] AuthTokenV1 data, response status code and response headers
    def v1_auth_keep_alive_post_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ApiAuthenticationApi.v1_auth_keep_alive_post ...'
      end
      # resource path
      local_var_path = '/v1/auth/keep-alive'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'AuthTokenV1'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['Bearer']

      new_options = opts.merge(
        :operation => :"ApiAuthenticationApi.v1_auth_keep_alive_post",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ApiAuthenticationApi#v1_auth_keep_alive_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Create a token based on other authentication details (basic, etc.) 
    # Create a token based on other authentication details (basic, etc.) 
    # @param [Hash] opts the optional parameters
    # @return [AuthTokenV1]
    def v1_auth_token_post(opts = {})
      data, _status_code, _headers = v1_auth_token_post_with_http_info(opts)
      data
    end

    # Create a token based on other authentication details (basic, etc.) 
    # Create a token based on other authentication details (basic, etc.) 
    # @param [Hash] opts the optional parameters
    # @return [Array<(AuthTokenV1, Integer, Hash)>] AuthTokenV1 data, response status code and response headers
    def v1_auth_token_post_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ApiAuthenticationApi.v1_auth_token_post ...'
      end
      # resource path
      local_var_path = '/v1/auth/token'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'AuthTokenV1'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['BasicAuth']

      new_options = opts.merge(
        :operation => :"ApiAuthenticationApi.v1_auth_token_post",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ApiAuthenticationApi#v1_auth_token_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
