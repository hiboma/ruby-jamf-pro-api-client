=begin
#Jamf Pro API

### Overview The Jamf Pro API is a RESTful API for Jamf Pro built to enable consistent and efficient programmatic access to Jamf Pro.<br/><br/> The swagger schema can be found [here](/api/schema/). 

The version of the OpenAPI document: production

Generated by: https://openapi-generator.tech
OpenAPI Generator version: 6.1.0-SNAPSHOT

=end

require 'cgi'

module JamfPro
  class ComputerPrestagesApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Search for sorted and paged Computer Prestages 
    # Search for sorted and paged computer prestages
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :page  (default to 0)
    # @option opts [Integer] :size  (default to 100)
    # @option opts [Integer] :pagesize  (default to 100)
    # @option opts [Integer] :page_size  (default to 100)
    # @option opts [String] :sort Sorting criteria in the format: property:asc/desc. Multiple sort criteria are supported and must be separated with a comma. Example: sort&#x3D;date:desc,name:asc  (default to 'id:asc')
    # @return [ComputerPrestageSearchResults]
    def v1_computer_prestages_get(opts = {})
      data, _status_code, _headers = v1_computer_prestages_get_with_http_info(opts)
      data
    end

    # Search for sorted and paged Computer Prestages 
    # Search for sorted and paged computer prestages
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :page  (default to 0)
    # @option opts [Integer] :size  (default to 100)
    # @option opts [Integer] :pagesize  (default to 100)
    # @option opts [Integer] :page_size  (default to 100)
    # @option opts [String] :sort Sorting criteria in the format: property:asc/desc. Multiple sort criteria are supported and must be separated with a comma. Example: sort&#x3D;date:desc,name:asc  (default to 'id:asc')
    # @return [Array<(ComputerPrestageSearchResults, Integer, Hash)>] ComputerPrestageSearchResults data, response status code and response headers
    def v1_computer_prestages_get_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ComputerPrestagesApi.v1_computer_prestages_get ...'
      end
      # resource path
      local_var_path = '/v1/computer-prestages'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'page'] = opts[:'page'] if !opts[:'page'].nil?
      query_params[:'size'] = opts[:'size'] if !opts[:'size'].nil?
      query_params[:'pagesize'] = opts[:'pagesize'] if !opts[:'pagesize'].nil?
      query_params[:'page-size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'sort'] = opts[:'sort'] if !opts[:'sort'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ComputerPrestageSearchResults'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['Bearer']

      new_options = opts.merge(
        :operation => :"ComputerPrestagesApi.v1_computer_prestages_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ComputerPrestagesApi#v1_computer_prestages_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Delete a Computer Prestage with the supplied id 
    # Deletes a Computer Prestage with the supplied id
    # @param id [Integer] Computer Prestage identifier
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def v1_computer_prestages_id_delete(id, opts = {})
      v1_computer_prestages_id_delete_with_http_info(id, opts)
      nil
    end

    # Delete a Computer Prestage with the supplied id 
    # Deletes a Computer Prestage with the supplied id
    # @param id [Integer] Computer Prestage identifier
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def v1_computer_prestages_id_delete_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ComputerPrestagesApi.v1_computer_prestages_id_delete ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling ComputerPrestagesApi.v1_computer_prestages_id_delete"
      end
      # resource path
      local_var_path = '/v1/computer-prestages/{id}'.sub('{' + 'id' + '}', CGI.escape(id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || ['Bearer']

      new_options = opts.merge(
        :operation => :"ComputerPrestagesApi.v1_computer_prestages_id_delete",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ComputerPrestagesApi#v1_computer_prestages_id_delete\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Retrieve a Computer Prestage with the supplied id 
    # Retrieves a Computer Prestage with the supplied id
    # @param id [Integer] Computer Prestage identifier
    # @param [Hash] opts the optional parameters
    # @return [GetComputerPrestage]
    def v1_computer_prestages_id_get(id, opts = {})
      data, _status_code, _headers = v1_computer_prestages_id_get_with_http_info(id, opts)
      data
    end

    # Retrieve a Computer Prestage with the supplied id 
    # Retrieves a Computer Prestage with the supplied id
    # @param id [Integer] Computer Prestage identifier
    # @param [Hash] opts the optional parameters
    # @return [Array<(GetComputerPrestage, Integer, Hash)>] GetComputerPrestage data, response status code and response headers
    def v1_computer_prestages_id_get_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ComputerPrestagesApi.v1_computer_prestages_id_get ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling ComputerPrestagesApi.v1_computer_prestages_id_get"
      end
      # resource path
      local_var_path = '/v1/computer-prestages/{id}'.sub('{' + 'id' + '}', CGI.escape(id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'GetComputerPrestage'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['Bearer']

      new_options = opts.merge(
        :operation => :"ComputerPrestagesApi.v1_computer_prestages_id_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ComputerPrestagesApi#v1_computer_prestages_id_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Update a Computer Prestage 
    # Updates a Computer Prestage
    # @param id [Integer] Computer Prestage identifier
    # @param put_computer_prestage [PutComputerPrestage] Computer Prestage to update
    # @param [Hash] opts the optional parameters
    # @return [GetComputerPrestage]
    def v1_computer_prestages_id_put(id, put_computer_prestage, opts = {})
      data, _status_code, _headers = v1_computer_prestages_id_put_with_http_info(id, put_computer_prestage, opts)
      data
    end

    # Update a Computer Prestage 
    # Updates a Computer Prestage
    # @param id [Integer] Computer Prestage identifier
    # @param put_computer_prestage [PutComputerPrestage] Computer Prestage to update
    # @param [Hash] opts the optional parameters
    # @return [Array<(GetComputerPrestage, Integer, Hash)>] GetComputerPrestage data, response status code and response headers
    def v1_computer_prestages_id_put_with_http_info(id, put_computer_prestage, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ComputerPrestagesApi.v1_computer_prestages_id_put ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling ComputerPrestagesApi.v1_computer_prestages_id_put"
      end
      # verify the required parameter 'put_computer_prestage' is set
      if @api_client.config.client_side_validation && put_computer_prestage.nil?
        fail ArgumentError, "Missing the required parameter 'put_computer_prestage' when calling ComputerPrestagesApi.v1_computer_prestages_id_put"
      end
      # resource path
      local_var_path = '/v1/computer-prestages/{id}'.sub('{' + 'id' + '}', CGI.escape(id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(put_computer_prestage)

      # return_type
      return_type = opts[:debug_return_type] || 'GetComputerPrestage'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['Bearer']

      new_options = opts.merge(
        :operation => :"ComputerPrestagesApi.v1_computer_prestages_id_put",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PUT, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ComputerPrestagesApi#v1_computer_prestages_id_put\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Remove device Scope for a specific Computer Prestage 
    # Remove device scope for a specific computer prestage
    # @param id [Integer] Computer Prestage identifier
    # @param prestage_scope_update [PrestageScopeUpdate] Serial Numbers to remove from scope
    # @param [Hash] opts the optional parameters
    # @return [PrestageScopeResponse]
    def v1_computer_prestages_id_scope_delete(id, prestage_scope_update, opts = {})
      data, _status_code, _headers = v1_computer_prestages_id_scope_delete_with_http_info(id, prestage_scope_update, opts)
      data
    end

    # Remove device Scope for a specific Computer Prestage 
    # Remove device scope for a specific computer prestage
    # @param id [Integer] Computer Prestage identifier
    # @param prestage_scope_update [PrestageScopeUpdate] Serial Numbers to remove from scope
    # @param [Hash] opts the optional parameters
    # @return [Array<(PrestageScopeResponse, Integer, Hash)>] PrestageScopeResponse data, response status code and response headers
    def v1_computer_prestages_id_scope_delete_with_http_info(id, prestage_scope_update, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ComputerPrestagesApi.v1_computer_prestages_id_scope_delete ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling ComputerPrestagesApi.v1_computer_prestages_id_scope_delete"
      end
      # verify the required parameter 'prestage_scope_update' is set
      if @api_client.config.client_side_validation && prestage_scope_update.nil?
        fail ArgumentError, "Missing the required parameter 'prestage_scope_update' when calling ComputerPrestagesApi.v1_computer_prestages_id_scope_delete"
      end
      # resource path
      local_var_path = '/v1/computer-prestages/{id}/scope'.sub('{' + 'id' + '}', CGI.escape(id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(prestage_scope_update)

      # return_type
      return_type = opts[:debug_return_type] || 'PrestageScopeResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['Bearer']

      new_options = opts.merge(
        :operation => :"ComputerPrestagesApi.v1_computer_prestages_id_scope_delete",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ComputerPrestagesApi#v1_computer_prestages_id_scope_delete\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get device Scope for a specific Computer Prestage 
    # Get device scope for a specific computer prestage
    # @param id [Integer] Computer Prestage identifier
    # @param [Hash] opts the optional parameters
    # @return [PrestageScopeResponse]
    def v1_computer_prestages_id_scope_get(id, opts = {})
      data, _status_code, _headers = v1_computer_prestages_id_scope_get_with_http_info(id, opts)
      data
    end

    # Get device Scope for a specific Computer Prestage 
    # Get device scope for a specific computer prestage
    # @param id [Integer] Computer Prestage identifier
    # @param [Hash] opts the optional parameters
    # @return [Array<(PrestageScopeResponse, Integer, Hash)>] PrestageScopeResponse data, response status code and response headers
    def v1_computer_prestages_id_scope_get_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ComputerPrestagesApi.v1_computer_prestages_id_scope_get ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling ComputerPrestagesApi.v1_computer_prestages_id_scope_get"
      end
      # resource path
      local_var_path = '/v1/computer-prestages/{id}/scope'.sub('{' + 'id' + '}', CGI.escape(id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'PrestageScopeResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['Bearer']

      new_options = opts.merge(
        :operation => :"ComputerPrestagesApi.v1_computer_prestages_id_scope_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ComputerPrestagesApi#v1_computer_prestages_id_scope_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Add device Scope for a specific Computer Prestage 
    # Add device scope for a specific computer prestage
    # @param id [Integer] Computer Prestage identifier
    # @param prestage_scope_update [PrestageScopeUpdate] Serial Numbers to scope
    # @param [Hash] opts the optional parameters
    # @return [PrestageScopeResponse]
    def v1_computer_prestages_id_scope_post(id, prestage_scope_update, opts = {})
      data, _status_code, _headers = v1_computer_prestages_id_scope_post_with_http_info(id, prestage_scope_update, opts)
      data
    end

    # Add device Scope for a specific Computer Prestage 
    # Add device scope for a specific computer prestage
    # @param id [Integer] Computer Prestage identifier
    # @param prestage_scope_update [PrestageScopeUpdate] Serial Numbers to scope
    # @param [Hash] opts the optional parameters
    # @return [Array<(PrestageScopeResponse, Integer, Hash)>] PrestageScopeResponse data, response status code and response headers
    def v1_computer_prestages_id_scope_post_with_http_info(id, prestage_scope_update, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ComputerPrestagesApi.v1_computer_prestages_id_scope_post ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling ComputerPrestagesApi.v1_computer_prestages_id_scope_post"
      end
      # verify the required parameter 'prestage_scope_update' is set
      if @api_client.config.client_side_validation && prestage_scope_update.nil?
        fail ArgumentError, "Missing the required parameter 'prestage_scope_update' when calling ComputerPrestagesApi.v1_computer_prestages_id_scope_post"
      end
      # resource path
      local_var_path = '/v1/computer-prestages/{id}/scope'.sub('{' + 'id' + '}', CGI.escape(id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(prestage_scope_update)

      # return_type
      return_type = opts[:debug_return_type] || 'PrestageScopeResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['Bearer']

      new_options = opts.merge(
        :operation => :"ComputerPrestagesApi.v1_computer_prestages_id_scope_post",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ComputerPrestagesApi#v1_computer_prestages_id_scope_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Replace device Scope for a specific Computer Prestage 
    # Replace device scope for a specific computer prestage
    # @param id [Integer] Computer Prestage identifier
    # @param prestage_scope_update [PrestageScopeUpdate] Serial Numbers to scope
    # @param [Hash] opts the optional parameters
    # @return [PrestageScopeResponse]
    def v1_computer_prestages_id_scope_put(id, prestage_scope_update, opts = {})
      data, _status_code, _headers = v1_computer_prestages_id_scope_put_with_http_info(id, prestage_scope_update, opts)
      data
    end

    # Replace device Scope for a specific Computer Prestage 
    # Replace device scope for a specific computer prestage
    # @param id [Integer] Computer Prestage identifier
    # @param prestage_scope_update [PrestageScopeUpdate] Serial Numbers to scope
    # @param [Hash] opts the optional parameters
    # @return [Array<(PrestageScopeResponse, Integer, Hash)>] PrestageScopeResponse data, response status code and response headers
    def v1_computer_prestages_id_scope_put_with_http_info(id, prestage_scope_update, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ComputerPrestagesApi.v1_computer_prestages_id_scope_put ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling ComputerPrestagesApi.v1_computer_prestages_id_scope_put"
      end
      # verify the required parameter 'prestage_scope_update' is set
      if @api_client.config.client_side_validation && prestage_scope_update.nil?
        fail ArgumentError, "Missing the required parameter 'prestage_scope_update' when calling ComputerPrestagesApi.v1_computer_prestages_id_scope_put"
      end
      # resource path
      local_var_path = '/v1/computer-prestages/{id}/scope'.sub('{' + 'id' + '}', CGI.escape(id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(prestage_scope_update)

      # return_type
      return_type = opts[:debug_return_type] || 'PrestageScopeResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['Bearer']

      new_options = opts.merge(
        :operation => :"ComputerPrestagesApi.v1_computer_prestages_id_scope_put",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PUT, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ComputerPrestagesApi#v1_computer_prestages_id_scope_put\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Create a Computer Prestage 
    # Create a computer prestage
    # @param computer_prestage [ComputerPrestage] Computer Prestage to create. ids defined in this body will be ignored
    # @param [Hash] opts the optional parameters
    # @return [GetComputerPrestage]
    def v1_computer_prestages_post(computer_prestage, opts = {})
      data, _status_code, _headers = v1_computer_prestages_post_with_http_info(computer_prestage, opts)
      data
    end

    # Create a Computer Prestage 
    # Create a computer prestage
    # @param computer_prestage [ComputerPrestage] Computer Prestage to create. ids defined in this body will be ignored
    # @param [Hash] opts the optional parameters
    # @return [Array<(GetComputerPrestage, Integer, Hash)>] GetComputerPrestage data, response status code and response headers
    def v1_computer_prestages_post_with_http_info(computer_prestage, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ComputerPrestagesApi.v1_computer_prestages_post ...'
      end
      # verify the required parameter 'computer_prestage' is set
      if @api_client.config.client_side_validation && computer_prestage.nil?
        fail ArgumentError, "Missing the required parameter 'computer_prestage' when calling ComputerPrestagesApi.v1_computer_prestages_post"
      end
      # resource path
      local_var_path = '/v1/computer-prestages'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(computer_prestage)

      # return_type
      return_type = opts[:debug_return_type] || 'GetComputerPrestage'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['Bearer']

      new_options = opts.merge(
        :operation => :"ComputerPrestagesApi.v1_computer_prestages_post",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ComputerPrestagesApi#v1_computer_prestages_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get all device Scope for all Computer Prestages 
    # Get all device scope for all computer prestages
    # @param [Hash] opts the optional parameters
    # @return [PrestageScope]
    def v1_computer_prestages_scope_get(opts = {})
      data, _status_code, _headers = v1_computer_prestages_scope_get_with_http_info(opts)
      data
    end

    # Get all device Scope for all Computer Prestages 
    # Get all device scope for all computer prestages
    # @param [Hash] opts the optional parameters
    # @return [Array<(PrestageScope, Integer, Hash)>] PrestageScope data, response status code and response headers
    def v1_computer_prestages_scope_get_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ComputerPrestagesApi.v1_computer_prestages_scope_get ...'
      end
      # resource path
      local_var_path = '/v1/computer-prestages/scope'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'PrestageScope'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['Bearer']

      new_options = opts.merge(
        :operation => :"ComputerPrestagesApi.v1_computer_prestages_scope_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ComputerPrestagesApi#v1_computer_prestages_scope_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get sorted and paged Computer Prestages 
    # Gets sorted and paged computer prestages
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :page  (default to 0)
    # @option opts [Integer] :page_size  (default to 100)
    # @option opts [Array<String>] :sort Sorting criteria in the format: property:asc/desc. Multiple sort criteria are supported and must be separated with a comma. Example: sort&#x3D;date:desc,name:asc 
    # @return [ComputerPrestageSearchResultsV2]
    def v2_computer_prestages_get(opts = {})
      data, _status_code, _headers = v2_computer_prestages_get_with_http_info(opts)
      data
    end

    # Get sorted and paged Computer Prestages 
    # Gets sorted and paged computer prestages
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :page  (default to 0)
    # @option opts [Integer] :page_size  (default to 100)
    # @option opts [Array<String>] :sort Sorting criteria in the format: property:asc/desc. Multiple sort criteria are supported and must be separated with a comma. Example: sort&#x3D;date:desc,name:asc 
    # @return [Array<(ComputerPrestageSearchResultsV2, Integer, Hash)>] ComputerPrestageSearchResultsV2 data, response status code and response headers
    def v2_computer_prestages_get_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ComputerPrestagesApi.v2_computer_prestages_get ...'
      end
      # resource path
      local_var_path = '/v2/computer-prestages'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'page'] = opts[:'page'] if !opts[:'page'].nil?
      query_params[:'page-size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'sort'] = @api_client.build_collection_param(opts[:'sort'], :multi) if !opts[:'sort'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ComputerPrestageSearchResultsV2'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['Bearer']

      new_options = opts.merge(
        :operation => :"ComputerPrestagesApi.v2_computer_prestages_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ComputerPrestagesApi#v2_computer_prestages_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Delete a Computer Prestage with the supplied id 
    # Deletes a Computer Prestage with the supplied id
    # @param id [String] Computer Prestage identifier
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def v2_computer_prestages_id_delete(id, opts = {})
      v2_computer_prestages_id_delete_with_http_info(id, opts)
      nil
    end

    # Delete a Computer Prestage with the supplied id 
    # Deletes a Computer Prestage with the supplied id
    # @param id [String] Computer Prestage identifier
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def v2_computer_prestages_id_delete_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ComputerPrestagesApi.v2_computer_prestages_id_delete ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling ComputerPrestagesApi.v2_computer_prestages_id_delete"
      end
      # resource path
      local_var_path = '/v2/computer-prestages/{id}'.sub('{' + 'id' + '}', CGI.escape(id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || ['Bearer']

      new_options = opts.merge(
        :operation => :"ComputerPrestagesApi.v2_computer_prestages_id_delete",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ComputerPrestagesApi#v2_computer_prestages_id_delete\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Retrieve a Computer Prestage with the supplied id 
    # Retrieves a Computer Prestage with the supplied id
    # @param id [String] Computer Prestage identifier
    # @param [Hash] opts the optional parameters
    # @return [GetComputerPrestageV2]
    def v2_computer_prestages_id_get(id, opts = {})
      data, _status_code, _headers = v2_computer_prestages_id_get_with_http_info(id, opts)
      data
    end

    # Retrieve a Computer Prestage with the supplied id 
    # Retrieves a Computer Prestage with the supplied id
    # @param id [String] Computer Prestage identifier
    # @param [Hash] opts the optional parameters
    # @return [Array<(GetComputerPrestageV2, Integer, Hash)>] GetComputerPrestageV2 data, response status code and response headers
    def v2_computer_prestages_id_get_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ComputerPrestagesApi.v2_computer_prestages_id_get ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling ComputerPrestagesApi.v2_computer_prestages_id_get"
      end
      # resource path
      local_var_path = '/v2/computer-prestages/{id}'.sub('{' + 'id' + '}', CGI.escape(id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'GetComputerPrestageV2'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['Bearer']

      new_options = opts.merge(
        :operation => :"ComputerPrestagesApi.v2_computer_prestages_id_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ComputerPrestagesApi#v2_computer_prestages_id_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Update a Computer Prestage 
    # Updates a Computer Prestage
    # @param id [String] Computer Prestage identifier
    # @param put_computer_prestage_v2 [PutComputerPrestageV2] Computer Prestage to update
    # @param [Hash] opts the optional parameters
    # @return [GetComputerPrestageV2]
    def v2_computer_prestages_id_put(id, put_computer_prestage_v2, opts = {})
      data, _status_code, _headers = v2_computer_prestages_id_put_with_http_info(id, put_computer_prestage_v2, opts)
      data
    end

    # Update a Computer Prestage 
    # Updates a Computer Prestage
    # @param id [String] Computer Prestage identifier
    # @param put_computer_prestage_v2 [PutComputerPrestageV2] Computer Prestage to update
    # @param [Hash] opts the optional parameters
    # @return [Array<(GetComputerPrestageV2, Integer, Hash)>] GetComputerPrestageV2 data, response status code and response headers
    def v2_computer_prestages_id_put_with_http_info(id, put_computer_prestage_v2, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ComputerPrestagesApi.v2_computer_prestages_id_put ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling ComputerPrestagesApi.v2_computer_prestages_id_put"
      end
      # verify the required parameter 'put_computer_prestage_v2' is set
      if @api_client.config.client_side_validation && put_computer_prestage_v2.nil?
        fail ArgumentError, "Missing the required parameter 'put_computer_prestage_v2' when calling ComputerPrestagesApi.v2_computer_prestages_id_put"
      end
      # resource path
      local_var_path = '/v2/computer-prestages/{id}'.sub('{' + 'id' + '}', CGI.escape(id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(put_computer_prestage_v2)

      # return_type
      return_type = opts[:debug_return_type] || 'GetComputerPrestageV2'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['Bearer']

      new_options = opts.merge(
        :operation => :"ComputerPrestagesApi.v2_computer_prestages_id_put",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PUT, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ComputerPrestagesApi#v2_computer_prestages_id_put\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Remove device Scope for a specific Computer Prestage 
    # Remove device scope for a specific computer prestage
    # @param id [String] Computer Prestage identifier
    # @param prestage_scope_update [PrestageScopeUpdate] Serial Numbers to remove from scope
    # @param [Hash] opts the optional parameters
    # @return [PrestageScopeResponseV2]
    def v2_computer_prestages_id_scope_delete_multiple_post(id, prestage_scope_update, opts = {})
      data, _status_code, _headers = v2_computer_prestages_id_scope_delete_multiple_post_with_http_info(id, prestage_scope_update, opts)
      data
    end

    # Remove device Scope for a specific Computer Prestage 
    # Remove device scope for a specific computer prestage
    # @param id [String] Computer Prestage identifier
    # @param prestage_scope_update [PrestageScopeUpdate] Serial Numbers to remove from scope
    # @param [Hash] opts the optional parameters
    # @return [Array<(PrestageScopeResponseV2, Integer, Hash)>] PrestageScopeResponseV2 data, response status code and response headers
    def v2_computer_prestages_id_scope_delete_multiple_post_with_http_info(id, prestage_scope_update, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ComputerPrestagesApi.v2_computer_prestages_id_scope_delete_multiple_post ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling ComputerPrestagesApi.v2_computer_prestages_id_scope_delete_multiple_post"
      end
      # verify the required parameter 'prestage_scope_update' is set
      if @api_client.config.client_side_validation && prestage_scope_update.nil?
        fail ArgumentError, "Missing the required parameter 'prestage_scope_update' when calling ComputerPrestagesApi.v2_computer_prestages_id_scope_delete_multiple_post"
      end
      # resource path
      local_var_path = '/v2/computer-prestages/{id}/scope/delete-multiple'.sub('{' + 'id' + '}', CGI.escape(id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(prestage_scope_update)

      # return_type
      return_type = opts[:debug_return_type] || 'PrestageScopeResponseV2'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['Bearer']

      new_options = opts.merge(
        :operation => :"ComputerPrestagesApi.v2_computer_prestages_id_scope_delete_multiple_post",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ComputerPrestagesApi#v2_computer_prestages_id_scope_delete_multiple_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get device Scope for a specific Computer Prestage 
    # Get device scope for a specific computer prestage
    # @param id [String] Computer Prestage identifier
    # @param [Hash] opts the optional parameters
    # @return [PrestageScopeResponseV2]
    def v2_computer_prestages_id_scope_get(id, opts = {})
      data, _status_code, _headers = v2_computer_prestages_id_scope_get_with_http_info(id, opts)
      data
    end

    # Get device Scope for a specific Computer Prestage 
    # Get device scope for a specific computer prestage
    # @param id [String] Computer Prestage identifier
    # @param [Hash] opts the optional parameters
    # @return [Array<(PrestageScopeResponseV2, Integer, Hash)>] PrestageScopeResponseV2 data, response status code and response headers
    def v2_computer_prestages_id_scope_get_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ComputerPrestagesApi.v2_computer_prestages_id_scope_get ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling ComputerPrestagesApi.v2_computer_prestages_id_scope_get"
      end
      # resource path
      local_var_path = '/v2/computer-prestages/{id}/scope'.sub('{' + 'id' + '}', CGI.escape(id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'PrestageScopeResponseV2'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['Bearer']

      new_options = opts.merge(
        :operation => :"ComputerPrestagesApi.v2_computer_prestages_id_scope_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ComputerPrestagesApi#v2_computer_prestages_id_scope_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Add device Scope for a specific Computer Prestage 
    # Add device scope for a specific computer prestage
    # @param id [String] Computer Prestage identifier
    # @param prestage_scope_update [PrestageScopeUpdate] Serial Numbers to scope
    # @param [Hash] opts the optional parameters
    # @return [PrestageScopeResponseV2]
    def v2_computer_prestages_id_scope_post(id, prestage_scope_update, opts = {})
      data, _status_code, _headers = v2_computer_prestages_id_scope_post_with_http_info(id, prestage_scope_update, opts)
      data
    end

    # Add device Scope for a specific Computer Prestage 
    # Add device scope for a specific computer prestage
    # @param id [String] Computer Prestage identifier
    # @param prestage_scope_update [PrestageScopeUpdate] Serial Numbers to scope
    # @param [Hash] opts the optional parameters
    # @return [Array<(PrestageScopeResponseV2, Integer, Hash)>] PrestageScopeResponseV2 data, response status code and response headers
    def v2_computer_prestages_id_scope_post_with_http_info(id, prestage_scope_update, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ComputerPrestagesApi.v2_computer_prestages_id_scope_post ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling ComputerPrestagesApi.v2_computer_prestages_id_scope_post"
      end
      # verify the required parameter 'prestage_scope_update' is set
      if @api_client.config.client_side_validation && prestage_scope_update.nil?
        fail ArgumentError, "Missing the required parameter 'prestage_scope_update' when calling ComputerPrestagesApi.v2_computer_prestages_id_scope_post"
      end
      # resource path
      local_var_path = '/v2/computer-prestages/{id}/scope'.sub('{' + 'id' + '}', CGI.escape(id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(prestage_scope_update)

      # return_type
      return_type = opts[:debug_return_type] || 'PrestageScopeResponseV2'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['Bearer']

      new_options = opts.merge(
        :operation => :"ComputerPrestagesApi.v2_computer_prestages_id_scope_post",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ComputerPrestagesApi#v2_computer_prestages_id_scope_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Replace device Scope for a specific Computer Prestage 
    # Replace device scope for a specific computer prestage
    # @param id [String] Computer Prestage identifier
    # @param prestage_scope_update [PrestageScopeUpdate] Serial Numbers to scope
    # @param [Hash] opts the optional parameters
    # @return [PrestageScopeResponseV2]
    def v2_computer_prestages_id_scope_put(id, prestage_scope_update, opts = {})
      data, _status_code, _headers = v2_computer_prestages_id_scope_put_with_http_info(id, prestage_scope_update, opts)
      data
    end

    # Replace device Scope for a specific Computer Prestage 
    # Replace device scope for a specific computer prestage
    # @param id [String] Computer Prestage identifier
    # @param prestage_scope_update [PrestageScopeUpdate] Serial Numbers to scope
    # @param [Hash] opts the optional parameters
    # @return [Array<(PrestageScopeResponseV2, Integer, Hash)>] PrestageScopeResponseV2 data, response status code and response headers
    def v2_computer_prestages_id_scope_put_with_http_info(id, prestage_scope_update, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ComputerPrestagesApi.v2_computer_prestages_id_scope_put ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling ComputerPrestagesApi.v2_computer_prestages_id_scope_put"
      end
      # verify the required parameter 'prestage_scope_update' is set
      if @api_client.config.client_side_validation && prestage_scope_update.nil?
        fail ArgumentError, "Missing the required parameter 'prestage_scope_update' when calling ComputerPrestagesApi.v2_computer_prestages_id_scope_put"
      end
      # resource path
      local_var_path = '/v2/computer-prestages/{id}/scope'.sub('{' + 'id' + '}', CGI.escape(id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(prestage_scope_update)

      # return_type
      return_type = opts[:debug_return_type] || 'PrestageScopeResponseV2'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['Bearer']

      new_options = opts.merge(
        :operation => :"ComputerPrestagesApi.v2_computer_prestages_id_scope_put",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PUT, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ComputerPrestagesApi#v2_computer_prestages_id_scope_put\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Create a Computer Prestage 
    # Create a computer prestage
    # @param post_computer_prestage_v2 [PostComputerPrestageV2] Computer Prestage to create. ids defined in this body will be ignored
    # @param [Hash] opts the optional parameters
    # @return [HrefResponse]
    def v2_computer_prestages_post(post_computer_prestage_v2, opts = {})
      data, _status_code, _headers = v2_computer_prestages_post_with_http_info(post_computer_prestage_v2, opts)
      data
    end

    # Create a Computer Prestage 
    # Create a computer prestage
    # @param post_computer_prestage_v2 [PostComputerPrestageV2] Computer Prestage to create. ids defined in this body will be ignored
    # @param [Hash] opts the optional parameters
    # @return [Array<(HrefResponse, Integer, Hash)>] HrefResponse data, response status code and response headers
    def v2_computer_prestages_post_with_http_info(post_computer_prestage_v2, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ComputerPrestagesApi.v2_computer_prestages_post ...'
      end
      # verify the required parameter 'post_computer_prestage_v2' is set
      if @api_client.config.client_side_validation && post_computer_prestage_v2.nil?
        fail ArgumentError, "Missing the required parameter 'post_computer_prestage_v2' when calling ComputerPrestagesApi.v2_computer_prestages_post"
      end
      # resource path
      local_var_path = '/v2/computer-prestages'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(post_computer_prestage_v2)

      # return_type
      return_type = opts[:debug_return_type] || 'HrefResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['Bearer']

      new_options = opts.merge(
        :operation => :"ComputerPrestagesApi.v2_computer_prestages_post",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ComputerPrestagesApi#v2_computer_prestages_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get all device Scope for all Computer Prestages 
    # Get all device scope for all computer prestages
    # @param [Hash] opts the optional parameters
    # @return [PrestageScopeV2]
    def v2_computer_prestages_scope_get(opts = {})
      data, _status_code, _headers = v2_computer_prestages_scope_get_with_http_info(opts)
      data
    end

    # Get all device Scope for all Computer Prestages 
    # Get all device scope for all computer prestages
    # @param [Hash] opts the optional parameters
    # @return [Array<(PrestageScopeV2, Integer, Hash)>] PrestageScopeV2 data, response status code and response headers
    def v2_computer_prestages_scope_get_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ComputerPrestagesApi.v2_computer_prestages_scope_get ...'
      end
      # resource path
      local_var_path = '/v2/computer-prestages/scope'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'PrestageScopeV2'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['Bearer']

      new_options = opts.merge(
        :operation => :"ComputerPrestagesApi.v2_computer_prestages_scope_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ComputerPrestagesApi#v2_computer_prestages_scope_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
