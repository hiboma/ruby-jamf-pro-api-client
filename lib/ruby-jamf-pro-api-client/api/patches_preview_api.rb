=begin
#Jamf Pro API

### Overview The Jamf Pro API is a RESTful API for Jamf Pro built to enable consistent and efficient programmatic access to Jamf Pro.<br/><br/> The swagger schema can be found [here](/api/schema/). 

The version of the OpenAPI document: production

Generated by: https://openapi-generator.tech
OpenAPI Generator version: 6.1.0-SNAPSHOT

=end

require 'cgi'

module JamfPro
  class PatchesPreviewApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Accept Patch reporting disclaimer 
    # Accept Patch reporting disclaimer
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def patch_disclaimer_agree_post(opts = {})
      patch_disclaimer_agree_post_with_http_info(opts)
      nil
    end

    # Accept Patch reporting disclaimer 
    # Accept Patch reporting disclaimer
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def patch_disclaimer_agree_post_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PatchesPreviewApi.patch_disclaimer_agree_post ...'
      end
      # resource path
      local_var_path = '/patch/disclaimerAgree'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || ['Bearer']

      new_options = opts.merge(
        :operation => :"PatchesPreviewApi.patch_disclaimer_agree_post",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PatchesPreviewApi#patch_disclaimer_agree_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Return Active Patch Summary 
    # Returns active patch summary.
    # @param id [Integer] patch id
    # @param [Hash] opts the optional parameters
    # @return [ActivePatchSummary]
    def patch_obj_id_get(id, opts = {})
      data, _status_code, _headers = patch_obj_id_get_with_http_info(id, opts)
      data
    end

    # Return Active Patch Summary 
    # Returns active patch summary.
    # @param id [Integer] patch id
    # @param [Hash] opts the optional parameters
    # @return [Array<(ActivePatchSummary, Integer, Hash)>] ActivePatchSummary data, response status code and response headers
    def patch_obj_id_get_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PatchesPreviewApi.patch_obj_id_get ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling PatchesPreviewApi.patch_obj_id_get"
      end
      # resource path
      local_var_path = '/patch/obj/{id}'.sub('{' + 'id' + '}', CGI.escape(id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ActivePatchSummary'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['Bearer']

      new_options = opts.merge(
        :operation => :"PatchesPreviewApi.patch_obj_id_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PatchesPreviewApi#patch_obj_id_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Update patch report 
    # Updates patch report.
    # @param id [Integer] patch id
    # @param active_patch_summary [ActivePatchSummary] Active patch summary.
    # @param [Hash] opts the optional parameters
    # @return [ActivePatchSummary]
    def patch_obj_id_put(id, active_patch_summary, opts = {})
      data, _status_code, _headers = patch_obj_id_put_with_http_info(id, active_patch_summary, opts)
      data
    end

    # Update patch report 
    # Updates patch report.
    # @param id [Integer] patch id
    # @param active_patch_summary [ActivePatchSummary] Active patch summary.
    # @param [Hash] opts the optional parameters
    # @return [Array<(ActivePatchSummary, Integer, Hash)>] ActivePatchSummary data, response status code and response headers
    def patch_obj_id_put_with_http_info(id, active_patch_summary, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PatchesPreviewApi.patch_obj_id_put ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling PatchesPreviewApi.patch_obj_id_put"
      end
      # verify the required parameter 'active_patch_summary' is set
      if @api_client.config.client_side_validation && active_patch_summary.nil?
        fail ArgumentError, "Missing the required parameter 'active_patch_summary' when calling PatchesPreviewApi.patch_obj_id_put"
      end
      # resource path
      local_var_path = '/patch/obj/{id}'.sub('{' + 'id' + '}', CGI.escape(id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(active_patch_summary)

      # return_type
      return_type = opts[:debug_return_type] || 'ActivePatchSummary'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['Bearer']

      new_options = opts.merge(
        :operation => :"PatchesPreviewApi.patch_obj_id_put",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PUT, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PatchesPreviewApi#patch_obj_id_put\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Return patch versions 
    # Returns patch versions.
    # @param id [Integer] patch id
    # @param [Hash] opts the optional parameters
    # @return [Array<PatchVersion>]
    def patch_obj_id_versions_get(id, opts = {})
      data, _status_code, _headers = patch_obj_id_versions_get_with_http_info(id, opts)
      data
    end

    # Return patch versions 
    # Returns patch versions.
    # @param id [Integer] patch id
    # @param [Hash] opts the optional parameters
    # @return [Array<(Array<PatchVersion>, Integer, Hash)>] Array<PatchVersion> data, response status code and response headers
    def patch_obj_id_versions_get_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PatchesPreviewApi.patch_obj_id_versions_get ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling PatchesPreviewApi.patch_obj_id_versions_get"
      end
      # resource path
      local_var_path = '/patch/obj/{id}/versions'.sub('{' + 'id' + '}', CGI.escape(id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'Array<PatchVersion>'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['Bearer']

      new_options = opts.merge(
        :operation => :"PatchesPreviewApi.patch_obj_id_versions_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PatchesPreviewApi#patch_obj_id_versions_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Return the count of the Patch Policy Logs for the policy is that are eligible for a retry attempt 
    # return the count of the patch policy logs for the policy ID that are eligible for a retry attempt
    # @param id [Integer] policy id
    # @param [Hash] opts the optional parameters
    # @return [Integer]
    def patch_obj_policy_id_logs_eligible_retry_count_get(id, opts = {})
      data, _status_code, _headers = patch_obj_policy_id_logs_eligible_retry_count_get_with_http_info(id, opts)
      data
    end

    # Return the count of the Patch Policy Logs for the policy is that are eligible for a retry attempt 
    # return the count of the patch policy logs for the policy ID that are eligible for a retry attempt
    # @param id [Integer] policy id
    # @param [Hash] opts the optional parameters
    # @return [Array<(Integer, Integer, Hash)>] Integer data, response status code and response headers
    def patch_obj_policy_id_logs_eligible_retry_count_get_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PatchesPreviewApi.patch_obj_policy_id_logs_eligible_retry_count_get ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling PatchesPreviewApi.patch_obj_policy_id_logs_eligible_retry_count_get"
      end
      # resource path
      local_var_path = '/patch/obj/policy/{id}/logs/eligibleRetryCount'.sub('{' + 'id' + '}', CGI.escape(id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'Integer'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['Bearer']

      new_options = opts.merge(
        :operation => :"PatchesPreviewApi.patch_obj_policy_id_logs_eligible_retry_count_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PatchesPreviewApi#patch_obj_policy_id_logs_eligible_retry_count_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Return the Software Title Configuration Id for the given patch 
    # Return the Software Title Configuration Id for the given patch policy.
    # @param id [Integer] policy id
    # @param [Hash] opts the optional parameters
    # @return [Integer]
    def patch_obj_policy_id_software_title_configuration_id_get(id, opts = {})
      data, _status_code, _headers = patch_obj_policy_id_software_title_configuration_id_get_with_http_info(id, opts)
      data
    end

    # Return the Software Title Configuration Id for the given patch 
    # Return the Software Title Configuration Id for the given patch policy.
    # @param id [Integer] policy id
    # @param [Hash] opts the optional parameters
    # @return [Array<(Integer, Integer, Hash)>] Integer data, response status code and response headers
    def patch_obj_policy_id_software_title_configuration_id_get_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PatchesPreviewApi.patch_obj_policy_id_software_title_configuration_id_get ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling PatchesPreviewApi.patch_obj_policy_id_software_title_configuration_id_get"
      end
      # resource path
      local_var_path = '/patch/obj/policy/{id}/softwareTitleConfigurationId'.sub('{' + 'id' + '}', CGI.escape(id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'Integer'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['Bearer']

      new_options = opts.merge(
        :operation => :"PatchesPreviewApi.patch_obj_policy_id_software_title_configuration_id_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PatchesPreviewApi#patch_obj_policy_id_software_title_configuration_id_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Return the Software Title Configuration 
    # Returns the software title configuration.
    # @param id [Integer] software title configuration id
    # @param [Hash] opts the optional parameters
    # @return [SoftwareTitleConfiguration]
    def patch_obj_software_title_configuration_id_get(id, opts = {})
      data, _status_code, _headers = patch_obj_software_title_configuration_id_get_with_http_info(id, opts)
      data
    end

    # Return the Software Title Configuration 
    # Returns the software title configuration.
    # @param id [Integer] software title configuration id
    # @param [Hash] opts the optional parameters
    # @return [Array<(SoftwareTitleConfiguration, Integer, Hash)>] SoftwareTitleConfiguration data, response status code and response headers
    def patch_obj_software_title_configuration_id_get_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PatchesPreviewApi.patch_obj_software_title_configuration_id_get ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling PatchesPreviewApi.patch_obj_software_title_configuration_id_get"
      end
      # resource path
      local_var_path = '/patch/obj/softwareTitleConfiguration/{id}'.sub('{' + 'id' + '}', CGI.escape(id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'SoftwareTitleConfiguration'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['Bearer']

      new_options = opts.merge(
        :operation => :"PatchesPreviewApi.patch_obj_software_title_configuration_id_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PatchesPreviewApi#patch_obj_software_title_configuration_id_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Return the Summaries of the Patch Policies for the software title 
    # Returns the summaries of the patch policies for the software title.
    # @param id [Integer] software title id
    # @param [Hash] opts the optional parameters
    # @return [SoftwareTitlePatchPolicySummaries]
    def patch_obj_software_title_id_policies_get(id, opts = {})
      data, _status_code, _headers = patch_obj_software_title_id_policies_get_with_http_info(id, opts)
      data
    end

    # Return the Summaries of the Patch Policies for the software title 
    # Returns the summaries of the patch policies for the software title.
    # @param id [Integer] software title id
    # @param [Hash] opts the optional parameters
    # @return [Array<(SoftwareTitlePatchPolicySummaries, Integer, Hash)>] SoftwareTitlePatchPolicySummaries data, response status code and response headers
    def patch_obj_software_title_id_policies_get_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PatchesPreviewApi.patch_obj_software_title_id_policies_get ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling PatchesPreviewApi.patch_obj_software_title_id_policies_get"
      end
      # resource path
      local_var_path = '/patch/obj/softwareTitle/{id}/policies'.sub('{' + 'id' + '}', CGI.escape(id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'SoftwareTitlePatchPolicySummaries'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['Bearer']

      new_options = opts.merge(
        :operation => :"PatchesPreviewApi.patch_obj_software_title_id_policies_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PatchesPreviewApi#patch_obj_software_title_id_policies_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Return Patch Policy Summary 
    # Returns patch policy summary.
    # @param id [Integer] patch policy id
    # @param [Hash] opts the optional parameters
    # @return [PatchPolicySummary]
    def patch_objs_policy_id_get(id, opts = {})
      data, _status_code, _headers = patch_objs_policy_id_get_with_http_info(id, opts)
      data
    end

    # Return Patch Policy Summary 
    # Returns patch policy summary.
    # @param id [Integer] patch policy id
    # @param [Hash] opts the optional parameters
    # @return [Array<(PatchPolicySummary, Integer, Hash)>] PatchPolicySummary data, response status code and response headers
    def patch_objs_policy_id_get_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PatchesPreviewApi.patch_objs_policy_id_get ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling PatchesPreviewApi.patch_objs_policy_id_get"
      end
      # resource path
      local_var_path = '/patch/objs/policy/{id}'.sub('{' + 'id' + '}', CGI.escape(id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'PatchPolicySummary'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['Bearer']

      new_options = opts.merge(
        :operation => :"PatchesPreviewApi.patch_objs_policy_id_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PatchesPreviewApi#patch_objs_policy_id_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Return list of Patch ids on dashboard 
    # Returns list of patch ids on dashboard.
    # @param [Hash] opts the optional parameters
    # @return [Array<Integer>]
    def patch_on_dashboard_get(opts = {})
      data, _status_code, _headers = patch_on_dashboard_get_with_http_info(opts)
      data
    end

    # Return list of Patch ids on dashboard 
    # Returns list of patch ids on dashboard.
    # @param [Hash] opts the optional parameters
    # @return [Array<(Array<Integer>, Integer, Hash)>] Array<Integer> data, response status code and response headers
    def patch_on_dashboard_get_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PatchesPreviewApi.patch_on_dashboard_get ...'
      end
      # resource path
      local_var_path = '/patch/onDashboard'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'Array<Integer>'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['Bearer']

      new_options = opts.merge(
        :operation => :"PatchesPreviewApi.patch_on_dashboard_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PatchesPreviewApi#patch_on_dashboard_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Retry policy 
    # Retry policy
    # @param [Hash] opts the optional parameters
    # @option opts [RetryPatchPolicyParams] :retry_patch_policy_params 
    # @return [nil]
    def patch_retry_policy_post(opts = {})
      patch_retry_policy_post_with_http_info(opts)
      nil
    end

    # Retry policy 
    # Retry policy
    # @param [Hash] opts the optional parameters
    # @option opts [RetryPatchPolicyParams] :retry_patch_policy_params 
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def patch_retry_policy_post_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PatchesPreviewApi.patch_retry_policy_post ...'
      end
      # resource path
      local_var_path = '/patch/retryPolicy'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(opts[:'retry_patch_policy_params'])

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || ['Bearer']

      new_options = opts.merge(
        :operation => :"PatchesPreviewApi.patch_retry_policy_post",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PatchesPreviewApi#patch_retry_policy_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Search the history for a Specific Active Patch 
    # Searches the history for a specific active patch.  This is used to get detailed information about the computers/devices that a specific patch has been applied to.
    # @param [Hash] opts the optional parameters
    # @option opts [SearchActivePatchHistoryParams] :search_active_patch_history_params Parameters for search
    # @return [ActivePatchHistorySearchResults]
    def patch_search_active_patch_history_post(opts = {})
      data, _status_code, _headers = patch_search_active_patch_history_post_with_http_info(opts)
      data
    end

    # Search the history for a Specific Active Patch 
    # Searches the history for a specific active patch.  This is used to get detailed information about the computers/devices that a specific patch has been applied to.
    # @param [Hash] opts the optional parameters
    # @option opts [SearchActivePatchHistoryParams] :search_active_patch_history_params Parameters for search
    # @return [Array<(ActivePatchHistorySearchResults, Integer, Hash)>] ActivePatchHistorySearchResults data, response status code and response headers
    def patch_search_active_patch_history_post_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PatchesPreviewApi.patch_search_active_patch_history_post ...'
      end
      # resource path
      local_var_path = '/patch/searchActivePatchHistory'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(opts[:'search_active_patch_history_params'])

      # return_type
      return_type = opts[:debug_return_type] || 'ActivePatchHistorySearchResults'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['Bearer']

      new_options = opts.merge(
        :operation => :"PatchesPreviewApi.patch_search_active_patch_history_post",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PatchesPreviewApi#patch_search_active_patch_history_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Return Patch Policy Logs 
    # Return patch policy logs
    # @param [Hash] opts the optional parameters
    # @option opts [SearchPatchPolicyLogParams] :search_patch_policy_log_params 
    # @return [PatchPolicyLogSearchResults]
    def patch_search_patch_policy_logs_post(opts = {})
      data, _status_code, _headers = patch_search_patch_policy_logs_post_with_http_info(opts)
      data
    end

    # Return Patch Policy Logs 
    # Return patch policy logs
    # @param [Hash] opts the optional parameters
    # @option opts [SearchPatchPolicyLogParams] :search_patch_policy_log_params 
    # @return [Array<(PatchPolicyLogSearchResults, Integer, Hash)>] PatchPolicyLogSearchResults data, response status code and response headers
    def patch_search_patch_policy_logs_post_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PatchesPreviewApi.patch_search_patch_policy_logs_post ...'
      end
      # resource path
      local_var_path = '/patch/searchPatchPolicyLogs'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(opts[:'search_patch_policy_log_params'])

      # return_type
      return_type = opts[:debug_return_type] || 'PatchPolicyLogSearchResults'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['Bearer']

      new_options = opts.merge(
        :operation => :"PatchesPreviewApi.patch_search_patch_policy_logs_post",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PatchesPreviewApi#patch_search_patch_policy_logs_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Retry policy 
    # Retry policy
    # @param [Hash] opts the optional parameters
    # @option opts [RetryPatchPolicyParams] :retry_patch_policy_params 
    # @return [nil]
    def patch_svc_retry_policy_post(opts = {})
      patch_svc_retry_policy_post_with_http_info(opts)
      nil
    end

    # Retry policy 
    # Retry policy
    # @param [Hash] opts the optional parameters
    # @option opts [RetryPatchPolicyParams] :retry_patch_policy_params 
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def patch_svc_retry_policy_post_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PatchesPreviewApi.patch_svc_retry_policy_post ...'
      end
      # resource path
      local_var_path = '/patch/svc/retryPolicy'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(opts[:'retry_patch_policy_params'])

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || ['Bearer']

      new_options = opts.merge(
        :operation => :"PatchesPreviewApi.patch_svc_retry_policy_post",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PatchesPreviewApi#patch_svc_retry_policy_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
