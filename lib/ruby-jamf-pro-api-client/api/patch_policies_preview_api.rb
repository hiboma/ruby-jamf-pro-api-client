=begin
#Jamf Pro API

### Overview The Jamf Pro API is a RESTful API for Jamf Pro built to enable consistent and efficient programmatic access to Jamf Pro.<br/><br/> The swagger schema can be found [here](/api/schema/). 

The version of the OpenAPI document: production

Generated by: https://openapi-generator.tech
OpenAPI Generator version: 6.1.0-SNAPSHOT

=end

require 'cgi'

module JamfPro
  class PatchPoliciesPreviewApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Return a list of patch policies 
    # Returns a list of patch policies.
    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :on_dashboard Filters whether or not the patch policies are on the dashboard. (default to false)
    # @option opts [Boolean] :enabled Filters whether or not the patch policies are enabled. (default to false)
    # @return [Array<PatchPolicySummary>]
    def patch_patch_policies_get(opts = {})
      data, _status_code, _headers = patch_patch_policies_get_with_http_info(opts)
      data
    end

    # Return a list of patch policies 
    # Returns a list of patch policies.
    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :on_dashboard Filters whether or not the patch policies are on the dashboard. (default to false)
    # @option opts [Boolean] :enabled Filters whether or not the patch policies are enabled. (default to false)
    # @return [Array<(Array<PatchPolicySummary>, Integer, Hash)>] Array<PatchPolicySummary> data, response status code and response headers
    def patch_patch_policies_get_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PatchPoliciesPreviewApi.patch_patch_policies_get ...'
      end
      # resource path
      local_var_path = '/patch/patch-policies'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'onDashboard'] = opts[:'on_dashboard'] if !opts[:'on_dashboard'].nil?
      query_params[:'enabled'] = opts[:'enabled'] if !opts[:'enabled'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'Array<PatchPolicySummary>'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['Bearer']

      new_options = opts.merge(
        :operation => :"PatchPoliciesPreviewApi.patch_patch_policies_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PatchPoliciesPreviewApi#patch_patch_policies_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Remove a patch policy from the dashboard 
    # Removes a patch policy from the dashboard.
    # @param id [Integer] patch id
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def patch_patch_policies_id_dashboard_delete(id, opts = {})
      patch_patch_policies_id_dashboard_delete_with_http_info(id, opts)
      nil
    end

    # Remove a patch policy from the dashboard 
    # Removes a patch policy from the dashboard.
    # @param id [Integer] patch id
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def patch_patch_policies_id_dashboard_delete_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PatchPoliciesPreviewApi.patch_patch_policies_id_dashboard_delete ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling PatchPoliciesPreviewApi.patch_patch_policies_id_dashboard_delete"
      end
      # resource path
      local_var_path = '/patch/patch-policies/{id}/dashboard'.sub('{' + 'id' + '}', CGI.escape(id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || ['Bearer']

      new_options = opts.merge(
        :operation => :"PatchPoliciesPreviewApi.patch_patch_policies_id_dashboard_delete",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PatchPoliciesPreviewApi#patch_patch_policies_id_dashboard_delete\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Return whether or not the requested patch policy is on the dashboard 
    # Returns whether or not the requested patch policy is on the dashboard
    # @param id [Integer] patch policy id
    # @param [Hash] opts the optional parameters
    # @return [PatchPolicyOnDashboard]
    def patch_patch_policies_id_dashboard_get(id, opts = {})
      data, _status_code, _headers = patch_patch_policies_id_dashboard_get_with_http_info(id, opts)
      data
    end

    # Return whether or not the requested patch policy is on the dashboard 
    # Returns whether or not the requested patch policy is on the dashboard
    # @param id [Integer] patch policy id
    # @param [Hash] opts the optional parameters
    # @return [Array<(PatchPolicyOnDashboard, Integer, Hash)>] PatchPolicyOnDashboard data, response status code and response headers
    def patch_patch_policies_id_dashboard_get_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PatchPoliciesPreviewApi.patch_patch_policies_id_dashboard_get ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling PatchPoliciesPreviewApi.patch_patch_policies_id_dashboard_get"
      end
      # resource path
      local_var_path = '/patch/patch-policies/{id}/dashboard'.sub('{' + 'id' + '}', CGI.escape(id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'PatchPolicyOnDashboard'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['Bearer']

      new_options = opts.merge(
        :operation => :"PatchPoliciesPreviewApi.patch_patch_policies_id_dashboard_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PatchPoliciesPreviewApi#patch_patch_policies_id_dashboard_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Add a patch policy to the dashboard 
    # Adds a patch policy to the dashboard.
    # @param id [Integer] patch policy id
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def patch_patch_policies_id_dashboard_post(id, opts = {})
      patch_patch_policies_id_dashboard_post_with_http_info(id, opts)
      nil
    end

    # Add a patch policy to the dashboard 
    # Adds a patch policy to the dashboard.
    # @param id [Integer] patch policy id
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def patch_patch_policies_id_dashboard_post_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PatchPoliciesPreviewApi.patch_patch_policies_id_dashboard_post ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling PatchPoliciesPreviewApi.patch_patch_policies_id_dashboard_post"
      end
      # resource path
      local_var_path = '/patch/patch-policies/{id}/dashboard'.sub('{' + 'id' + '}', CGI.escape(id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || ['Bearer']

      new_options = opts.merge(
        :operation => :"PatchPoliciesPreviewApi.patch_patch_policies_id_dashboard_post",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PatchPoliciesPreviewApi#patch_patch_policies_id_dashboard_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
