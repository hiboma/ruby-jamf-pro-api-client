=begin
#Jamf Pro API

### Overview The Jamf Pro API is a RESTful API for Jamf Pro built to enable consistent and efficient programmatic access to Jamf Pro.<br/><br/> The swagger schema can be found [here](/api/schema/). 

The version of the OpenAPI document: production

Generated by: https://openapi-generator.tech
OpenAPI Generator version: 6.1.0-SNAPSHOT

=end

require 'date'
require 'time'

module JamfPro
  class EbookScope
    attr_accessor :all_computers

    attr_accessor :all_mobile_devices

    attr_accessor :all_users

    attr_accessor :computer_ids

    attr_accessor :computer_group_ids

    attr_accessor :mobile_device_ids

    attr_accessor :mobile_device_group_ids

    attr_accessor :building_ids

    attr_accessor :department_ids

    attr_accessor :user_ids

    attr_accessor :user_group_ids

    attr_accessor :classroom_ids

    attr_accessor :limitations

    attr_accessor :exclusions

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'all_computers' => :'allComputers',
        :'all_mobile_devices' => :'allMobileDevices',
        :'all_users' => :'allUsers',
        :'computer_ids' => :'computerIds',
        :'computer_group_ids' => :'computerGroupIds',
        :'mobile_device_ids' => :'mobileDeviceIds',
        :'mobile_device_group_ids' => :'mobileDeviceGroupIds',
        :'building_ids' => :'buildingIds',
        :'department_ids' => :'departmentIds',
        :'user_ids' => :'userIds',
        :'user_group_ids' => :'userGroupIds',
        :'classroom_ids' => :'classroomIds',
        :'limitations' => :'limitations',
        :'exclusions' => :'exclusions'
      }
    end

    # Returns all the JSON keys this model knows about
    def self.acceptable_attributes
      attribute_map.values
    end

    # Attribute type mapping.
    def self.openapi_types
      {
        :'all_computers' => :'Boolean',
        :'all_mobile_devices' => :'Boolean',
        :'all_users' => :'Boolean',
        :'computer_ids' => :'Array<String>',
        :'computer_group_ids' => :'Array<String>',
        :'mobile_device_ids' => :'Array<String>',
        :'mobile_device_group_ids' => :'Array<String>',
        :'building_ids' => :'Array<String>',
        :'department_ids' => :'Array<String>',
        :'user_ids' => :'Array<String>',
        :'user_group_ids' => :'Array<String>',
        :'classroom_ids' => :'Array<String>',
        :'limitations' => :'EbookLimitations',
        :'exclusions' => :'EbookExclusions'
      }
    end

    # List of attributes with nullable: true
    def self.openapi_nullable
      Set.new([
      ])
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      if (!attributes.is_a?(Hash))
        fail ArgumentError, "The input argument (attributes) must be a hash in `JamfPro::EbookScope` initialize method"
      end

      # check to see if the attribute exists and convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h|
        if (!self.class.attribute_map.key?(k.to_sym))
          fail ArgumentError, "`#{k}` is not a valid attribute in `JamfPro::EbookScope`. Please check the name to make sure it's valid. List of attributes: " + self.class.attribute_map.keys.inspect
        end
        h[k.to_sym] = v
      }

      if attributes.key?(:'all_computers')
        self.all_computers = attributes[:'all_computers']
      end

      if attributes.key?(:'all_mobile_devices')
        self.all_mobile_devices = attributes[:'all_mobile_devices']
      end

      if attributes.key?(:'all_users')
        self.all_users = attributes[:'all_users']
      end

      if attributes.key?(:'computer_ids')
        if (value = attributes[:'computer_ids']).is_a?(Array)
          self.computer_ids = value
        end
      end

      if attributes.key?(:'computer_group_ids')
        if (value = attributes[:'computer_group_ids']).is_a?(Array)
          self.computer_group_ids = value
        end
      end

      if attributes.key?(:'mobile_device_ids')
        if (value = attributes[:'mobile_device_ids']).is_a?(Array)
          self.mobile_device_ids = value
        end
      end

      if attributes.key?(:'mobile_device_group_ids')
        if (value = attributes[:'mobile_device_group_ids']).is_a?(Array)
          self.mobile_device_group_ids = value
        end
      end

      if attributes.key?(:'building_ids')
        if (value = attributes[:'building_ids']).is_a?(Array)
          self.building_ids = value
        end
      end

      if attributes.key?(:'department_ids')
        if (value = attributes[:'department_ids']).is_a?(Array)
          self.department_ids = value
        end
      end

      if attributes.key?(:'user_ids')
        if (value = attributes[:'user_ids']).is_a?(Array)
          self.user_ids = value
        end
      end

      if attributes.key?(:'user_group_ids')
        if (value = attributes[:'user_group_ids']).is_a?(Array)
          self.user_group_ids = value
        end
      end

      if attributes.key?(:'classroom_ids')
        if (value = attributes[:'classroom_ids']).is_a?(Array)
          self.classroom_ids = value
        end
      end

      if attributes.key?(:'limitations')
        self.limitations = attributes[:'limitations']
      end

      if attributes.key?(:'exclusions')
        self.exclusions = attributes[:'exclusions']
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array.new
      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      true
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          all_computers == o.all_computers &&
          all_mobile_devices == o.all_mobile_devices &&
          all_users == o.all_users &&
          computer_ids == o.computer_ids &&
          computer_group_ids == o.computer_group_ids &&
          mobile_device_ids == o.mobile_device_ids &&
          mobile_device_group_ids == o.mobile_device_group_ids &&
          building_ids == o.building_ids &&
          department_ids == o.department_ids &&
          user_ids == o.user_ids &&
          user_group_ids == o.user_group_ids &&
          classroom_ids == o.classroom_ids &&
          limitations == o.limitations &&
          exclusions == o.exclusions
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    def hash
      [all_computers, all_mobile_devices, all_users, computer_ids, computer_group_ids, mobile_device_ids, mobile_device_group_ids, building_ids, department_ids, user_ids, user_group_ids, classroom_ids, limitations, exclusions].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def self.build_from_hash(attributes)
      new.build_from_hash(attributes)
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      attributes = attributes.transform_keys(&:to_sym)
      self.class.openapi_types.each_pair do |key, type|
        if attributes[self.class.attribute_map[key]].nil? && self.class.openapi_nullable.include?(key)
          self.send("#{key}=", nil)
        elsif type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            self.send("#{key}=", attributes[self.class.attribute_map[key]].map { |v| _deserialize($1, v) })
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        end
      end

      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :Time
        Time.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :Boolean
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        # models (e.g. Pet) or oneOf
        klass = JamfPro.const_get(type)
        klass.respond_to?(:openapi_one_of) ? klass.build(value) : klass.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        if value.nil?
          is_nullable = self.class.openapi_nullable.include?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end

        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end

end
