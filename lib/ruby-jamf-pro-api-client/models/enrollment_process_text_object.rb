=begin
#Jamf Pro API

### Overview The Jamf Pro API is a RESTful API for Jamf Pro built to enable consistent and efficient programmatic access to Jamf Pro.<br/><br/> The swagger schema can be found [here](/api/schema/). 

The version of the OpenAPI document: production

Generated by: https://openapi-generator.tech
OpenAPI Generator version: 6.1.0-SNAPSHOT

=end

require 'date'
require 'time'

module JamfPro
  class EnrollmentProcessTextObject
    attr_accessor :language_code

    attr_accessor :name

    attr_accessor :title

    attr_accessor :login_description

    attr_accessor :username

    attr_accessor :password

    attr_accessor :login_button

    attr_accessor :device_class_description

    attr_accessor :device_class_personal

    attr_accessor :device_class_personal_description

    attr_accessor :device_class_enterprise

    attr_accessor :device_class_enterprise_description

    attr_accessor :device_class_button

    attr_accessor :personal_eula

    attr_accessor :enterprise_eula

    attr_accessor :eula_button

    attr_accessor :site_description

    attr_accessor :certificate_text

    attr_accessor :certificate_button

    attr_accessor :certificate_profile_name

    attr_accessor :certificate_profile_description

    attr_accessor :personal_text

    attr_accessor :personal_button

    attr_accessor :personal_profile_name

    attr_accessor :personal_profile_description

    attr_accessor :user_enrollment_text

    attr_accessor :user_enrollment_button

    attr_accessor :user_enrollment_profile_name

    attr_accessor :user_enrollment_profile_description

    attr_accessor :enterprise_text

    attr_accessor :enterprise_button

    attr_accessor :enterprise_profile_name

    attr_accessor :enterprise_profile_description

    attr_accessor :enterprise_pending

    attr_accessor :quick_add_text

    attr_accessor :quick_add_button

    attr_accessor :quick_add_name

    attr_accessor :quick_add_pending

    attr_accessor :complete_message

    attr_accessor :failed_message

    attr_accessor :try_again_button

    attr_accessor :check_now_button

    attr_accessor :check_enrollment_message

    attr_accessor :logout_button

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'language_code' => :'languageCode',
        :'name' => :'name',
        :'title' => :'title',
        :'login_description' => :'loginDescription',
        :'username' => :'username',
        :'password' => :'password',
        :'login_button' => :'loginButton',
        :'device_class_description' => :'deviceClassDescription',
        :'device_class_personal' => :'deviceClassPersonal',
        :'device_class_personal_description' => :'deviceClassPersonalDescription',
        :'device_class_enterprise' => :'deviceClassEnterprise',
        :'device_class_enterprise_description' => :'deviceClassEnterpriseDescription',
        :'device_class_button' => :'deviceClassButton',
        :'personal_eula' => :'personalEula',
        :'enterprise_eula' => :'enterpriseEula',
        :'eula_button' => :'eulaButton',
        :'site_description' => :'siteDescription',
        :'certificate_text' => :'certificateText',
        :'certificate_button' => :'certificateButton',
        :'certificate_profile_name' => :'certificateProfileName',
        :'certificate_profile_description' => :'certificateProfileDescription',
        :'personal_text' => :'personalText',
        :'personal_button' => :'personalButton',
        :'personal_profile_name' => :'personalProfileName',
        :'personal_profile_description' => :'personalProfileDescription',
        :'user_enrollment_text' => :'userEnrollmentText',
        :'user_enrollment_button' => :'userEnrollmentButton',
        :'user_enrollment_profile_name' => :'userEnrollmentProfileName',
        :'user_enrollment_profile_description' => :'userEnrollmentProfileDescription',
        :'enterprise_text' => :'enterpriseText',
        :'enterprise_button' => :'enterpriseButton',
        :'enterprise_profile_name' => :'enterpriseProfileName',
        :'enterprise_profile_description' => :'enterpriseProfileDescription',
        :'enterprise_pending' => :'enterprisePending',
        :'quick_add_text' => :'quickAddText',
        :'quick_add_button' => :'quickAddButton',
        :'quick_add_name' => :'quickAddName',
        :'quick_add_pending' => :'quickAddPending',
        :'complete_message' => :'completeMessage',
        :'failed_message' => :'failedMessage',
        :'try_again_button' => :'tryAgainButton',
        :'check_now_button' => :'checkNowButton',
        :'check_enrollment_message' => :'checkEnrollmentMessage',
        :'logout_button' => :'logoutButton'
      }
    end

    # Returns all the JSON keys this model knows about
    def self.acceptable_attributes
      attribute_map.values
    end

    # Attribute type mapping.
    def self.openapi_types
      {
        :'language_code' => :'String',
        :'name' => :'String',
        :'title' => :'String',
        :'login_description' => :'String',
        :'username' => :'String',
        :'password' => :'String',
        :'login_button' => :'String',
        :'device_class_description' => :'String',
        :'device_class_personal' => :'String',
        :'device_class_personal_description' => :'String',
        :'device_class_enterprise' => :'String',
        :'device_class_enterprise_description' => :'String',
        :'device_class_button' => :'String',
        :'personal_eula' => :'String',
        :'enterprise_eula' => :'String',
        :'eula_button' => :'String',
        :'site_description' => :'String',
        :'certificate_text' => :'String',
        :'certificate_button' => :'String',
        :'certificate_profile_name' => :'String',
        :'certificate_profile_description' => :'String',
        :'personal_text' => :'String',
        :'personal_button' => :'String',
        :'personal_profile_name' => :'String',
        :'personal_profile_description' => :'String',
        :'user_enrollment_text' => :'String',
        :'user_enrollment_button' => :'String',
        :'user_enrollment_profile_name' => :'String',
        :'user_enrollment_profile_description' => :'String',
        :'enterprise_text' => :'String',
        :'enterprise_button' => :'String',
        :'enterprise_profile_name' => :'String',
        :'enterprise_profile_description' => :'String',
        :'enterprise_pending' => :'String',
        :'quick_add_text' => :'String',
        :'quick_add_button' => :'String',
        :'quick_add_name' => :'String',
        :'quick_add_pending' => :'String',
        :'complete_message' => :'String',
        :'failed_message' => :'String',
        :'try_again_button' => :'String',
        :'check_now_button' => :'String',
        :'check_enrollment_message' => :'String',
        :'logout_button' => :'String'
      }
    end

    # List of attributes with nullable: true
    def self.openapi_nullable
      Set.new([
      ])
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      if (!attributes.is_a?(Hash))
        fail ArgumentError, "The input argument (attributes) must be a hash in `JamfPro::EnrollmentProcessTextObject` initialize method"
      end

      # check to see if the attribute exists and convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h|
        if (!self.class.attribute_map.key?(k.to_sym))
          fail ArgumentError, "`#{k}` is not a valid attribute in `JamfPro::EnrollmentProcessTextObject`. Please check the name to make sure it's valid. List of attributes: " + self.class.attribute_map.keys.inspect
        end
        h[k.to_sym] = v
      }

      if attributes.key?(:'language_code')
        self.language_code = attributes[:'language_code']
      end

      if attributes.key?(:'name')
        self.name = attributes[:'name']
      end

      if attributes.key?(:'title')
        self.title = attributes[:'title']
      end

      if attributes.key?(:'login_description')
        self.login_description = attributes[:'login_description']
      end

      if attributes.key?(:'username')
        self.username = attributes[:'username']
      end

      if attributes.key?(:'password')
        self.password = attributes[:'password']
      end

      if attributes.key?(:'login_button')
        self.login_button = attributes[:'login_button']
      end

      if attributes.key?(:'device_class_description')
        self.device_class_description = attributes[:'device_class_description']
      end

      if attributes.key?(:'device_class_personal')
        self.device_class_personal = attributes[:'device_class_personal']
      end

      if attributes.key?(:'device_class_personal_description')
        self.device_class_personal_description = attributes[:'device_class_personal_description']
      end

      if attributes.key?(:'device_class_enterprise')
        self.device_class_enterprise = attributes[:'device_class_enterprise']
      end

      if attributes.key?(:'device_class_enterprise_description')
        self.device_class_enterprise_description = attributes[:'device_class_enterprise_description']
      end

      if attributes.key?(:'device_class_button')
        self.device_class_button = attributes[:'device_class_button']
      end

      if attributes.key?(:'personal_eula')
        self.personal_eula = attributes[:'personal_eula']
      end

      if attributes.key?(:'enterprise_eula')
        self.enterprise_eula = attributes[:'enterprise_eula']
      end

      if attributes.key?(:'eula_button')
        self.eula_button = attributes[:'eula_button']
      end

      if attributes.key?(:'site_description')
        self.site_description = attributes[:'site_description']
      end

      if attributes.key?(:'certificate_text')
        self.certificate_text = attributes[:'certificate_text']
      end

      if attributes.key?(:'certificate_button')
        self.certificate_button = attributes[:'certificate_button']
      end

      if attributes.key?(:'certificate_profile_name')
        self.certificate_profile_name = attributes[:'certificate_profile_name']
      end

      if attributes.key?(:'certificate_profile_description')
        self.certificate_profile_description = attributes[:'certificate_profile_description']
      end

      if attributes.key?(:'personal_text')
        self.personal_text = attributes[:'personal_text']
      end

      if attributes.key?(:'personal_button')
        self.personal_button = attributes[:'personal_button']
      end

      if attributes.key?(:'personal_profile_name')
        self.personal_profile_name = attributes[:'personal_profile_name']
      end

      if attributes.key?(:'personal_profile_description')
        self.personal_profile_description = attributes[:'personal_profile_description']
      end

      if attributes.key?(:'user_enrollment_text')
        self.user_enrollment_text = attributes[:'user_enrollment_text']
      else
        self.user_enrollment_text = 'Enter your Managed Apple id to install the MDM Profile.'
      end

      if attributes.key?(:'user_enrollment_button')
        self.user_enrollment_button = attributes[:'user_enrollment_button']
      else
        self.user_enrollment_button = 'Continue'
      end

      if attributes.key?(:'user_enrollment_profile_name')
        self.user_enrollment_profile_name = attributes[:'user_enrollment_profile_name']
      else
        self.user_enrollment_profile_name = 'MDM Profile'
      end

      if attributes.key?(:'user_enrollment_profile_description')
        self.user_enrollment_profile_description = attributes[:'user_enrollment_profile_description']
      else
        self.user_enrollment_profile_description = 'MDM Profile for mobile device management'
      end

      if attributes.key?(:'enterprise_text')
        self.enterprise_text = attributes[:'enterprise_text']
      end

      if attributes.key?(:'enterprise_button')
        self.enterprise_button = attributes[:'enterprise_button']
      end

      if attributes.key?(:'enterprise_profile_name')
        self.enterprise_profile_name = attributes[:'enterprise_profile_name']
      end

      if attributes.key?(:'enterprise_profile_description')
        self.enterprise_profile_description = attributes[:'enterprise_profile_description']
      end

      if attributes.key?(:'enterprise_pending')
        self.enterprise_pending = attributes[:'enterprise_pending']
      end

      if attributes.key?(:'quick_add_text')
        self.quick_add_text = attributes[:'quick_add_text']
      end

      if attributes.key?(:'quick_add_button')
        self.quick_add_button = attributes[:'quick_add_button']
      end

      if attributes.key?(:'quick_add_name')
        self.quick_add_name = attributes[:'quick_add_name']
      else
        self.quick_add_name = 'QuickAdd.pkg'
      end

      if attributes.key?(:'quick_add_pending')
        self.quick_add_pending = attributes[:'quick_add_pending']
      end

      if attributes.key?(:'complete_message')
        self.complete_message = attributes[:'complete_message']
      end

      if attributes.key?(:'failed_message')
        self.failed_message = attributes[:'failed_message']
      end

      if attributes.key?(:'try_again_button')
        self.try_again_button = attributes[:'try_again_button']
      end

      if attributes.key?(:'check_now_button')
        self.check_now_button = attributes[:'check_now_button']
      end

      if attributes.key?(:'check_enrollment_message')
        self.check_enrollment_message = attributes[:'check_enrollment_message']
      end

      if attributes.key?(:'logout_button')
        self.logout_button = attributes[:'logout_button']
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array.new
      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      true
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          language_code == o.language_code &&
          name == o.name &&
          title == o.title &&
          login_description == o.login_description &&
          username == o.username &&
          password == o.password &&
          login_button == o.login_button &&
          device_class_description == o.device_class_description &&
          device_class_personal == o.device_class_personal &&
          device_class_personal_description == o.device_class_personal_description &&
          device_class_enterprise == o.device_class_enterprise &&
          device_class_enterprise_description == o.device_class_enterprise_description &&
          device_class_button == o.device_class_button &&
          personal_eula == o.personal_eula &&
          enterprise_eula == o.enterprise_eula &&
          eula_button == o.eula_button &&
          site_description == o.site_description &&
          certificate_text == o.certificate_text &&
          certificate_button == o.certificate_button &&
          certificate_profile_name == o.certificate_profile_name &&
          certificate_profile_description == o.certificate_profile_description &&
          personal_text == o.personal_text &&
          personal_button == o.personal_button &&
          personal_profile_name == o.personal_profile_name &&
          personal_profile_description == o.personal_profile_description &&
          user_enrollment_text == o.user_enrollment_text &&
          user_enrollment_button == o.user_enrollment_button &&
          user_enrollment_profile_name == o.user_enrollment_profile_name &&
          user_enrollment_profile_description == o.user_enrollment_profile_description &&
          enterprise_text == o.enterprise_text &&
          enterprise_button == o.enterprise_button &&
          enterprise_profile_name == o.enterprise_profile_name &&
          enterprise_profile_description == o.enterprise_profile_description &&
          enterprise_pending == o.enterprise_pending &&
          quick_add_text == o.quick_add_text &&
          quick_add_button == o.quick_add_button &&
          quick_add_name == o.quick_add_name &&
          quick_add_pending == o.quick_add_pending &&
          complete_message == o.complete_message &&
          failed_message == o.failed_message &&
          try_again_button == o.try_again_button &&
          check_now_button == o.check_now_button &&
          check_enrollment_message == o.check_enrollment_message &&
          logout_button == o.logout_button
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    def hash
      [language_code, name, title, login_description, username, password, login_button, device_class_description, device_class_personal, device_class_personal_description, device_class_enterprise, device_class_enterprise_description, device_class_button, personal_eula, enterprise_eula, eula_button, site_description, certificate_text, certificate_button, certificate_profile_name, certificate_profile_description, personal_text, personal_button, personal_profile_name, personal_profile_description, user_enrollment_text, user_enrollment_button, user_enrollment_profile_name, user_enrollment_profile_description, enterprise_text, enterprise_button, enterprise_profile_name, enterprise_profile_description, enterprise_pending, quick_add_text, quick_add_button, quick_add_name, quick_add_pending, complete_message, failed_message, try_again_button, check_now_button, check_enrollment_message, logout_button].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def self.build_from_hash(attributes)
      new.build_from_hash(attributes)
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      attributes = attributes.transform_keys(&:to_sym)
      self.class.openapi_types.each_pair do |key, type|
        if attributes[self.class.attribute_map[key]].nil? && self.class.openapi_nullable.include?(key)
          self.send("#{key}=", nil)
        elsif type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            self.send("#{key}=", attributes[self.class.attribute_map[key]].map { |v| _deserialize($1, v) })
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        end
      end

      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :Time
        Time.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :Boolean
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        # models (e.g. Pet) or oneOf
        klass = JamfPro.const_get(type)
        klass.respond_to?(:openapi_one_of) ? klass.build(value) : klass.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        if value.nil?
          is_nullable = self.class.openapi_nullable.include?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end

        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end

end
