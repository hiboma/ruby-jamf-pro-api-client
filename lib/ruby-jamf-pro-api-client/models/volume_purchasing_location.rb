=begin
#Jamf Pro API

### Overview The Jamf Pro API is a RESTful API for Jamf Pro built to enable consistent and efficient programmatic access to Jamf Pro.<br/><br/> The swagger schema can be found [here](/api/schema/). 

The version of the OpenAPI document: production

Generated by: https://openapi-generator.tech
OpenAPI Generator version: 6.1.0-SNAPSHOT

=end

require 'date'
require 'time'

module JamfPro
  class VolumePurchasingLocation
    attr_accessor :name

    attr_accessor :total_purchased_licenses

    attr_accessor :total_used_licenses

    attr_accessor :id

    attr_accessor :apple_id

    attr_accessor :organization_name

    attr_accessor :token_expiration

    # The two-letter ISO 3166-1 code that designates the country where the Volume Purchasing account is located.
    attr_accessor :country_code

    attr_accessor :location_name

    # If this is \"true\", the clientContext used by this server does not match the clientContext returned by the Volume Purchasing API.
    attr_accessor :client_context_mismatch

    attr_accessor :automatically_populate_purchased_content

    attr_accessor :send_notification_when_no_longer_assigned

    attr_accessor :auto_register_managed_users

    attr_accessor :site_id

    attr_accessor :content

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'name' => :'name',
        :'total_purchased_licenses' => :'totalPurchasedLicenses',
        :'total_used_licenses' => :'totalUsedLicenses',
        :'id' => :'id',
        :'apple_id' => :'appleId',
        :'organization_name' => :'organizationName',
        :'token_expiration' => :'tokenExpiration',
        :'country_code' => :'countryCode',
        :'location_name' => :'locationName',
        :'client_context_mismatch' => :'clientContextMismatch',
        :'automatically_populate_purchased_content' => :'automaticallyPopulatePurchasedContent',
        :'send_notification_when_no_longer_assigned' => :'sendNotificationWhenNoLongerAssigned',
        :'auto_register_managed_users' => :'autoRegisterManagedUsers',
        :'site_id' => :'siteId',
        :'content' => :'content'
      }
    end

    # Returns all the JSON keys this model knows about
    def self.acceptable_attributes
      attribute_map.values
    end

    # Attribute type mapping.
    def self.openapi_types
      {
        :'name' => :'String',
        :'total_purchased_licenses' => :'Integer',
        :'total_used_licenses' => :'Integer',
        :'id' => :'String',
        :'apple_id' => :'String',
        :'organization_name' => :'String',
        :'token_expiration' => :'String',
        :'country_code' => :'String',
        :'location_name' => :'String',
        :'client_context_mismatch' => :'Boolean',
        :'automatically_populate_purchased_content' => :'Boolean',
        :'send_notification_when_no_longer_assigned' => :'Boolean',
        :'auto_register_managed_users' => :'Boolean',
        :'site_id' => :'String',
        :'content' => :'Array<VolumePurchasingContent>'
      }
    end

    # List of attributes with nullable: true
    def self.openapi_nullable
      Set.new([
      ])
    end

    # List of class defined in allOf (OpenAPI v3)
    def self.openapi_all_of
      [
      :'VolumePurchasingLocationAllOf',
      :'VolumePurchasingLocationListView'
      ]
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      if (!attributes.is_a?(Hash))
        fail ArgumentError, "The input argument (attributes) must be a hash in `JamfPro::VolumePurchasingLocation` initialize method"
      end

      # check to see if the attribute exists and convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h|
        if (!self.class.attribute_map.key?(k.to_sym))
          fail ArgumentError, "`#{k}` is not a valid attribute in `JamfPro::VolumePurchasingLocation`. Please check the name to make sure it's valid. List of attributes: " + self.class.attribute_map.keys.inspect
        end
        h[k.to_sym] = v
      }

      if attributes.key?(:'name')
        self.name = attributes[:'name']
      end

      if attributes.key?(:'total_purchased_licenses')
        self.total_purchased_licenses = attributes[:'total_purchased_licenses']
      end

      if attributes.key?(:'total_used_licenses')
        self.total_used_licenses = attributes[:'total_used_licenses']
      end

      if attributes.key?(:'id')
        self.id = attributes[:'id']
      end

      if attributes.key?(:'apple_id')
        self.apple_id = attributes[:'apple_id']
      end

      if attributes.key?(:'organization_name')
        self.organization_name = attributes[:'organization_name']
      end

      if attributes.key?(:'token_expiration')
        self.token_expiration = attributes[:'token_expiration']
      end

      if attributes.key?(:'country_code')
        self.country_code = attributes[:'country_code']
      end

      if attributes.key?(:'location_name')
        self.location_name = attributes[:'location_name']
      end

      if attributes.key?(:'client_context_mismatch')
        self.client_context_mismatch = attributes[:'client_context_mismatch']
      end

      if attributes.key?(:'automatically_populate_purchased_content')
        self.automatically_populate_purchased_content = attributes[:'automatically_populate_purchased_content']
      end

      if attributes.key?(:'send_notification_when_no_longer_assigned')
        self.send_notification_when_no_longer_assigned = attributes[:'send_notification_when_no_longer_assigned']
      end

      if attributes.key?(:'auto_register_managed_users')
        self.auto_register_managed_users = attributes[:'auto_register_managed_users']
      end

      if attributes.key?(:'site_id')
        self.site_id = attributes[:'site_id']
      end

      if attributes.key?(:'content')
        if (value = attributes[:'content']).is_a?(Array)
          self.content = value
        end
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array.new
      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      true
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          name == o.name &&
          total_purchased_licenses == o.total_purchased_licenses &&
          total_used_licenses == o.total_used_licenses &&
          id == o.id &&
          apple_id == o.apple_id &&
          organization_name == o.organization_name &&
          token_expiration == o.token_expiration &&
          country_code == o.country_code &&
          location_name == o.location_name &&
          client_context_mismatch == o.client_context_mismatch &&
          automatically_populate_purchased_content == o.automatically_populate_purchased_content &&
          send_notification_when_no_longer_assigned == o.send_notification_when_no_longer_assigned &&
          auto_register_managed_users == o.auto_register_managed_users &&
          site_id == o.site_id &&
          content == o.content
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    def hash
      [name, total_purchased_licenses, total_used_licenses, id, apple_id, organization_name, token_expiration, country_code, location_name, client_context_mismatch, automatically_populate_purchased_content, send_notification_when_no_longer_assigned, auto_register_managed_users, site_id, content].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def self.build_from_hash(attributes)
      new.build_from_hash(attributes)
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      attributes = attributes.transform_keys(&:to_sym)
      self.class.openapi_types.each_pair do |key, type|
        if attributes[self.class.attribute_map[key]].nil? && self.class.openapi_nullable.include?(key)
          self.send("#{key}=", nil)
        elsif type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            self.send("#{key}=", attributes[self.class.attribute_map[key]].map { |v| _deserialize($1, v) })
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        end
      end

      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :Time
        Time.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :Boolean
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        # models (e.g. Pet) or oneOf
        klass = JamfPro.const_get(type)
        klass.respond_to?(:openapi_one_of) ? klass.build(value) : klass.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        if value.nil?
          is_nullable = self.class.openapi_nullable.include?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end

        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end

end
