=begin
#Jamf Pro API

### Overview The Jamf Pro API is a RESTful API for Jamf Pro built to enable consistent and efficient programmatic access to Jamf Pro.<br/><br/> The swagger schema can be found [here](/api/schema/). 

The version of the OpenAPI document: production

Generated by: https://openapi-generator.tech
OpenAPI Generator version: 6.1.0-SNAPSHOT

=end

require 'date'
require 'time'

module JamfPro
  class ComputerSecurity
    attr_accessor :sip_status

    attr_accessor :gatekeeper_status

    attr_accessor :xprotect_version

    attr_accessor :auto_login_disabled

    # Collected for macOS 10.14.4 or later
    attr_accessor :remote_desktop_enabled

    # Collected for macOS 10.15.0 or later
    attr_accessor :activation_lock_enabled

    attr_accessor :recovery_lock_enabled

    attr_accessor :firewall_enabled

    # Collected for macOS 10.15.0 or later
    attr_accessor :secure_boot_level

    # Collected for macOS 10.15.0 or later
    attr_accessor :external_boot_level

    # Collected for macOS 11 or later
    attr_accessor :bootstrap_token_allowed

    class EnumAttributeValidator
      attr_reader :datatype
      attr_reader :allowable_values

      def initialize(datatype, allowable_values)
        @allowable_values = allowable_values.map do |value|
          case datatype.to_s
          when /Integer/i
            value.to_i
          when /Float/i
            value.to_f
          else
            value
          end
        end
      end

      def valid?(value)
        !value || allowable_values.include?(value)
      end
    end

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'sip_status' => :'sipStatus',
        :'gatekeeper_status' => :'gatekeeperStatus',
        :'xprotect_version' => :'xprotectVersion',
        :'auto_login_disabled' => :'autoLoginDisabled',
        :'remote_desktop_enabled' => :'remoteDesktopEnabled',
        :'activation_lock_enabled' => :'activationLockEnabled',
        :'recovery_lock_enabled' => :'recoveryLockEnabled',
        :'firewall_enabled' => :'firewallEnabled',
        :'secure_boot_level' => :'secureBootLevel',
        :'external_boot_level' => :'externalBootLevel',
        :'bootstrap_token_allowed' => :'bootstrapTokenAllowed'
      }
    end

    # Returns all the JSON keys this model knows about
    def self.acceptable_attributes
      attribute_map.values
    end

    # Attribute type mapping.
    def self.openapi_types
      {
        :'sip_status' => :'String',
        :'gatekeeper_status' => :'String',
        :'xprotect_version' => :'String',
        :'auto_login_disabled' => :'Boolean',
        :'remote_desktop_enabled' => :'Boolean',
        :'activation_lock_enabled' => :'Boolean',
        :'recovery_lock_enabled' => :'Boolean',
        :'firewall_enabled' => :'Boolean',
        :'secure_boot_level' => :'String',
        :'external_boot_level' => :'String',
        :'bootstrap_token_allowed' => :'Boolean'
      }
    end

    # List of attributes with nullable: true
    def self.openapi_nullable
      Set.new([
      ])
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      if (!attributes.is_a?(Hash))
        fail ArgumentError, "The input argument (attributes) must be a hash in `JamfPro::ComputerSecurity` initialize method"
      end

      # check to see if the attribute exists and convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h|
        if (!self.class.attribute_map.key?(k.to_sym))
          fail ArgumentError, "`#{k}` is not a valid attribute in `JamfPro::ComputerSecurity`. Please check the name to make sure it's valid. List of attributes: " + self.class.attribute_map.keys.inspect
        end
        h[k.to_sym] = v
      }

      if attributes.key?(:'sip_status')
        self.sip_status = attributes[:'sip_status']
      end

      if attributes.key?(:'gatekeeper_status')
        self.gatekeeper_status = attributes[:'gatekeeper_status']
      end

      if attributes.key?(:'xprotect_version')
        self.xprotect_version = attributes[:'xprotect_version']
      end

      if attributes.key?(:'auto_login_disabled')
        self.auto_login_disabled = attributes[:'auto_login_disabled']
      end

      if attributes.key?(:'remote_desktop_enabled')
        self.remote_desktop_enabled = attributes[:'remote_desktop_enabled']
      end

      if attributes.key?(:'activation_lock_enabled')
        self.activation_lock_enabled = attributes[:'activation_lock_enabled']
      end

      if attributes.key?(:'recovery_lock_enabled')
        self.recovery_lock_enabled = attributes[:'recovery_lock_enabled']
      end

      if attributes.key?(:'firewall_enabled')
        self.firewall_enabled = attributes[:'firewall_enabled']
      end

      if attributes.key?(:'secure_boot_level')
        self.secure_boot_level = attributes[:'secure_boot_level']
      end

      if attributes.key?(:'external_boot_level')
        self.external_boot_level = attributes[:'external_boot_level']
      end

      if attributes.key?(:'bootstrap_token_allowed')
        self.bootstrap_token_allowed = attributes[:'bootstrap_token_allowed']
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array.new
      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      sip_status_validator = EnumAttributeValidator.new('String', ["NOT_COLLECTED", "NOT_AVAILABLE", "DISABLED", "ENABLED"])
      return false unless sip_status_validator.valid?(@sip_status)
      gatekeeper_status_validator = EnumAttributeValidator.new('String', ["NOT_COLLECTED", "DISABLED", "APP_STORE_AND_IDENTIFIED_DEVELOPERS", "APP_STORE"])
      return false unless gatekeeper_status_validator.valid?(@gatekeeper_status)
      secure_boot_level_validator = EnumAttributeValidator.new('String', ["NO_SECURITY", "MEDIUM_SECURITY", "FULL_SECURITY", "NOT_SUPPORTED", "UNKNOWN"])
      return false unless secure_boot_level_validator.valid?(@secure_boot_level)
      external_boot_level_validator = EnumAttributeValidator.new('String', ["ALLOW_BOOTING_FROM_EXTERNAL_MEDIA", "DISALLOW_BOOTING_FROM_EXTERNAL_MEDIA", "NOT_SUPPORTED", "UNKNOWN"])
      return false unless external_boot_level_validator.valid?(@external_boot_level)
      true
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] sip_status Object to be assigned
    def sip_status=(sip_status)
      validator = EnumAttributeValidator.new('String', ["NOT_COLLECTED", "NOT_AVAILABLE", "DISABLED", "ENABLED"])
      unless validator.valid?(sip_status)
        fail ArgumentError, "invalid value for \"sip_status\", must be one of #{validator.allowable_values}."
      end
      @sip_status = sip_status
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] gatekeeper_status Object to be assigned
    def gatekeeper_status=(gatekeeper_status)
      validator = EnumAttributeValidator.new('String', ["NOT_COLLECTED", "DISABLED", "APP_STORE_AND_IDENTIFIED_DEVELOPERS", "APP_STORE"])
      unless validator.valid?(gatekeeper_status)
        fail ArgumentError, "invalid value for \"gatekeeper_status\", must be one of #{validator.allowable_values}."
      end
      @gatekeeper_status = gatekeeper_status
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] secure_boot_level Object to be assigned
    def secure_boot_level=(secure_boot_level)
      validator = EnumAttributeValidator.new('String', ["NO_SECURITY", "MEDIUM_SECURITY", "FULL_SECURITY", "NOT_SUPPORTED", "UNKNOWN"])
      unless validator.valid?(secure_boot_level)
        fail ArgumentError, "invalid value for \"secure_boot_level\", must be one of #{validator.allowable_values}."
      end
      @secure_boot_level = secure_boot_level
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] external_boot_level Object to be assigned
    def external_boot_level=(external_boot_level)
      validator = EnumAttributeValidator.new('String', ["ALLOW_BOOTING_FROM_EXTERNAL_MEDIA", "DISALLOW_BOOTING_FROM_EXTERNAL_MEDIA", "NOT_SUPPORTED", "UNKNOWN"])
      unless validator.valid?(external_boot_level)
        fail ArgumentError, "invalid value for \"external_boot_level\", must be one of #{validator.allowable_values}."
      end
      @external_boot_level = external_boot_level
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          sip_status == o.sip_status &&
          gatekeeper_status == o.gatekeeper_status &&
          xprotect_version == o.xprotect_version &&
          auto_login_disabled == o.auto_login_disabled &&
          remote_desktop_enabled == o.remote_desktop_enabled &&
          activation_lock_enabled == o.activation_lock_enabled &&
          recovery_lock_enabled == o.recovery_lock_enabled &&
          firewall_enabled == o.firewall_enabled &&
          secure_boot_level == o.secure_boot_level &&
          external_boot_level == o.external_boot_level &&
          bootstrap_token_allowed == o.bootstrap_token_allowed
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    def hash
      [sip_status, gatekeeper_status, xprotect_version, auto_login_disabled, remote_desktop_enabled, activation_lock_enabled, recovery_lock_enabled, firewall_enabled, secure_boot_level, external_boot_level, bootstrap_token_allowed].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def self.build_from_hash(attributes)
      new.build_from_hash(attributes)
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      attributes = attributes.transform_keys(&:to_sym)
      self.class.openapi_types.each_pair do |key, type|
        if attributes[self.class.attribute_map[key]].nil? && self.class.openapi_nullable.include?(key)
          self.send("#{key}=", nil)
        elsif type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            self.send("#{key}=", attributes[self.class.attribute_map[key]].map { |v| _deserialize($1, v) })
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        end
      end

      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :Time
        Time.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :Boolean
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        # models (e.g. Pet) or oneOf
        klass = JamfPro.const_get(type)
        klass.respond_to?(:openapi_one_of) ? klass.build(value) : klass.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        if value.nil?
          is_nullable = self.class.openapi_nullable.include?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end

        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end

end
