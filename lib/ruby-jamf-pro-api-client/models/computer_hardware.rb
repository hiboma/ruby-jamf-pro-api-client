=begin
#Jamf Pro API

### Overview The Jamf Pro API is a RESTful API for Jamf Pro built to enable consistent and efficient programmatic access to Jamf Pro.<br/><br/> The swagger schema can be found [here](/api/schema/). 

The version of the OpenAPI document: production

Generated by: https://openapi-generator.tech
OpenAPI Generator version: 6.1.0-SNAPSHOT

=end

require 'date'
require 'time'

module JamfPro
  class ComputerHardware
    attr_accessor :make

    attr_accessor :model

    attr_accessor :model_identifier

    attr_accessor :serial_number

    # Processor Speed in MHz.
    attr_accessor :processor_speed_mhz

    attr_accessor :processor_count

    attr_accessor :core_count

    attr_accessor :processor_type

    attr_accessor :processor_architecture

    attr_accessor :bus_speed_mhz

    # Cache Size in KB.
    attr_accessor :cache_size_kilobytes

    attr_accessor :network_adapter_type

    attr_accessor :mac_address

    attr_accessor :alt_network_adapter_type

    attr_accessor :alt_mac_address

    # Total RAM Size in MB.
    attr_accessor :total_ram_megabytes

    # Available RAM slots.
    attr_accessor :open_ram_slots

    # Remaining percentage of battery power.
    attr_accessor :battery_capacity_percent

    attr_accessor :smc_version

    attr_accessor :nic_speed

    attr_accessor :optical_drive

    attr_accessor :boot_rom

    attr_accessor :ble_capable

    attr_accessor :supports_ios_app_installs

    attr_accessor :apple_silicon

    attr_accessor :extension_attributes

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'make' => :'make',
        :'model' => :'model',
        :'model_identifier' => :'modelIdentifier',
        :'serial_number' => :'serialNumber',
        :'processor_speed_mhz' => :'processorSpeedMhz',
        :'processor_count' => :'processorCount',
        :'core_count' => :'coreCount',
        :'processor_type' => :'processorType',
        :'processor_architecture' => :'processorArchitecture',
        :'bus_speed_mhz' => :'busSpeedMhz',
        :'cache_size_kilobytes' => :'cacheSizeKilobytes',
        :'network_adapter_type' => :'networkAdapterType',
        :'mac_address' => :'macAddress',
        :'alt_network_adapter_type' => :'altNetworkAdapterType',
        :'alt_mac_address' => :'altMacAddress',
        :'total_ram_megabytes' => :'totalRamMegabytes',
        :'open_ram_slots' => :'openRamSlots',
        :'battery_capacity_percent' => :'batteryCapacityPercent',
        :'smc_version' => :'smcVersion',
        :'nic_speed' => :'nicSpeed',
        :'optical_drive' => :'opticalDrive',
        :'boot_rom' => :'bootRom',
        :'ble_capable' => :'bleCapable',
        :'supports_ios_app_installs' => :'supportsIosAppInstalls',
        :'apple_silicon' => :'appleSilicon',
        :'extension_attributes' => :'extensionAttributes'
      }
    end

    # Returns all the JSON keys this model knows about
    def self.acceptable_attributes
      attribute_map.values
    end

    # Attribute type mapping.
    def self.openapi_types
      {
        :'make' => :'String',
        :'model' => :'String',
        :'model_identifier' => :'String',
        :'serial_number' => :'String',
        :'processor_speed_mhz' => :'Integer',
        :'processor_count' => :'Integer',
        :'core_count' => :'Integer',
        :'processor_type' => :'String',
        :'processor_architecture' => :'String',
        :'bus_speed_mhz' => :'Integer',
        :'cache_size_kilobytes' => :'Integer',
        :'network_adapter_type' => :'String',
        :'mac_address' => :'String',
        :'alt_network_adapter_type' => :'String',
        :'alt_mac_address' => :'String',
        :'total_ram_megabytes' => :'Integer',
        :'open_ram_slots' => :'Integer',
        :'battery_capacity_percent' => :'Integer',
        :'smc_version' => :'String',
        :'nic_speed' => :'String',
        :'optical_drive' => :'String',
        :'boot_rom' => :'String',
        :'ble_capable' => :'Boolean',
        :'supports_ios_app_installs' => :'Boolean',
        :'apple_silicon' => :'Boolean',
        :'extension_attributes' => :'Array<ComputerExtensionAttribute>'
      }
    end

    # List of attributes with nullable: true
    def self.openapi_nullable
      Set.new([
      ])
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      if (!attributes.is_a?(Hash))
        fail ArgumentError, "The input argument (attributes) must be a hash in `JamfPro::ComputerHardware` initialize method"
      end

      # check to see if the attribute exists and convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h|
        if (!self.class.attribute_map.key?(k.to_sym))
          fail ArgumentError, "`#{k}` is not a valid attribute in `JamfPro::ComputerHardware`. Please check the name to make sure it's valid. List of attributes: " + self.class.attribute_map.keys.inspect
        end
        h[k.to_sym] = v
      }

      if attributes.key?(:'make')
        self.make = attributes[:'make']
      end

      if attributes.key?(:'model')
        self.model = attributes[:'model']
      end

      if attributes.key?(:'model_identifier')
        self.model_identifier = attributes[:'model_identifier']
      end

      if attributes.key?(:'serial_number')
        self.serial_number = attributes[:'serial_number']
      end

      if attributes.key?(:'processor_speed_mhz')
        self.processor_speed_mhz = attributes[:'processor_speed_mhz']
      end

      if attributes.key?(:'processor_count')
        self.processor_count = attributes[:'processor_count']
      end

      if attributes.key?(:'core_count')
        self.core_count = attributes[:'core_count']
      end

      if attributes.key?(:'processor_type')
        self.processor_type = attributes[:'processor_type']
      end

      if attributes.key?(:'processor_architecture')
        self.processor_architecture = attributes[:'processor_architecture']
      end

      if attributes.key?(:'bus_speed_mhz')
        self.bus_speed_mhz = attributes[:'bus_speed_mhz']
      end

      if attributes.key?(:'cache_size_kilobytes')
        self.cache_size_kilobytes = attributes[:'cache_size_kilobytes']
      end

      if attributes.key?(:'network_adapter_type')
        self.network_adapter_type = attributes[:'network_adapter_type']
      end

      if attributes.key?(:'mac_address')
        self.mac_address = attributes[:'mac_address']
      end

      if attributes.key?(:'alt_network_adapter_type')
        self.alt_network_adapter_type = attributes[:'alt_network_adapter_type']
      end

      if attributes.key?(:'alt_mac_address')
        self.alt_mac_address = attributes[:'alt_mac_address']
      end

      if attributes.key?(:'total_ram_megabytes')
        self.total_ram_megabytes = attributes[:'total_ram_megabytes']
      end

      if attributes.key?(:'open_ram_slots')
        self.open_ram_slots = attributes[:'open_ram_slots']
      end

      if attributes.key?(:'battery_capacity_percent')
        self.battery_capacity_percent = attributes[:'battery_capacity_percent']
      end

      if attributes.key?(:'smc_version')
        self.smc_version = attributes[:'smc_version']
      end

      if attributes.key?(:'nic_speed')
        self.nic_speed = attributes[:'nic_speed']
      end

      if attributes.key?(:'optical_drive')
        self.optical_drive = attributes[:'optical_drive']
      end

      if attributes.key?(:'boot_rom')
        self.boot_rom = attributes[:'boot_rom']
      end

      if attributes.key?(:'ble_capable')
        self.ble_capable = attributes[:'ble_capable']
      end

      if attributes.key?(:'supports_ios_app_installs')
        self.supports_ios_app_installs = attributes[:'supports_ios_app_installs']
      end

      if attributes.key?(:'apple_silicon')
        self.apple_silicon = attributes[:'apple_silicon']
      end

      if attributes.key?(:'extension_attributes')
        if (value = attributes[:'extension_attributes']).is_a?(Array)
          self.extension_attributes = value
        end
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array.new
      if !@battery_capacity_percent.nil? && @battery_capacity_percent > 100
        invalid_properties.push('invalid value for "battery_capacity_percent", must be smaller than or equal to 100.')
      end

      if !@battery_capacity_percent.nil? && @battery_capacity_percent < 0
        invalid_properties.push('invalid value for "battery_capacity_percent", must be greater than or equal to 0.')
      end

      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      return false if !@battery_capacity_percent.nil? && @battery_capacity_percent > 100
      return false if !@battery_capacity_percent.nil? && @battery_capacity_percent < 0
      true
    end

    # Custom attribute writer method with validation
    # @param [Object] battery_capacity_percent Value to be assigned
    def battery_capacity_percent=(battery_capacity_percent)
      if !battery_capacity_percent.nil? && battery_capacity_percent > 100
        fail ArgumentError, 'invalid value for "battery_capacity_percent", must be smaller than or equal to 100.'
      end

      if !battery_capacity_percent.nil? && battery_capacity_percent < 0
        fail ArgumentError, 'invalid value for "battery_capacity_percent", must be greater than or equal to 0.'
      end

      @battery_capacity_percent = battery_capacity_percent
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          make == o.make &&
          model == o.model &&
          model_identifier == o.model_identifier &&
          serial_number == o.serial_number &&
          processor_speed_mhz == o.processor_speed_mhz &&
          processor_count == o.processor_count &&
          core_count == o.core_count &&
          processor_type == o.processor_type &&
          processor_architecture == o.processor_architecture &&
          bus_speed_mhz == o.bus_speed_mhz &&
          cache_size_kilobytes == o.cache_size_kilobytes &&
          network_adapter_type == o.network_adapter_type &&
          mac_address == o.mac_address &&
          alt_network_adapter_type == o.alt_network_adapter_type &&
          alt_mac_address == o.alt_mac_address &&
          total_ram_megabytes == o.total_ram_megabytes &&
          open_ram_slots == o.open_ram_slots &&
          battery_capacity_percent == o.battery_capacity_percent &&
          smc_version == o.smc_version &&
          nic_speed == o.nic_speed &&
          optical_drive == o.optical_drive &&
          boot_rom == o.boot_rom &&
          ble_capable == o.ble_capable &&
          supports_ios_app_installs == o.supports_ios_app_installs &&
          apple_silicon == o.apple_silicon &&
          extension_attributes == o.extension_attributes
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    def hash
      [make, model, model_identifier, serial_number, processor_speed_mhz, processor_count, core_count, processor_type, processor_architecture, bus_speed_mhz, cache_size_kilobytes, network_adapter_type, mac_address, alt_network_adapter_type, alt_mac_address, total_ram_megabytes, open_ram_slots, battery_capacity_percent, smc_version, nic_speed, optical_drive, boot_rom, ble_capable, supports_ios_app_installs, apple_silicon, extension_attributes].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def self.build_from_hash(attributes)
      new.build_from_hash(attributes)
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      attributes = attributes.transform_keys(&:to_sym)
      self.class.openapi_types.each_pair do |key, type|
        if attributes[self.class.attribute_map[key]].nil? && self.class.openapi_nullable.include?(key)
          self.send("#{key}=", nil)
        elsif type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            self.send("#{key}=", attributes[self.class.attribute_map[key]].map { |v| _deserialize($1, v) })
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        end
      end

      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :Time
        Time.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :Boolean
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        # models (e.g. Pet) or oneOf
        klass = JamfPro.const_get(type)
        klass.respond_to?(:openapi_one_of) ? klass.build(value) : klass.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        if value.nil?
          is_nullable = self.class.openapi_nullable.include?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end

        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end

end
