=begin
#Jamf Pro API

### Overview The Jamf Pro API is a RESTful API for Jamf Pro built to enable consistent and efficient programmatic access to Jamf Pro.<br/><br/> The swagger schema can be found [here](/api/schema/). 

The version of the OpenAPI document: production

Generated by: https://openapi-generator.tech
OpenAPI Generator version: 6.1.0-SNAPSHOT

=end

require 'date'
require 'time'

module JamfPro
  class ComputerOverview
    attr_accessor :id

    attr_accessor :location

    attr_accessor :name

    attr_accessor :udid

    attr_accessor :serial_number

    attr_accessor :last_contact_date

    attr_accessor :last_report_date

    attr_accessor :last_enrolled_date

    attr_accessor :operating_system_version

    attr_accessor :operating_system_build

    attr_accessor :ip_address

    attr_accessor :mac_address

    attr_accessor :asset_tag

    attr_accessor :model_identifier

    attr_accessor :mdm_access_rights

    attr_accessor :is_managed

    attr_accessor :management_id

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'id' => :'id',
        :'location' => :'location',
        :'name' => :'name',
        :'udid' => :'udid',
        :'serial_number' => :'serialNumber',
        :'last_contact_date' => :'lastContactDate',
        :'last_report_date' => :'lastReportDate',
        :'last_enrolled_date' => :'lastEnrolledDate',
        :'operating_system_version' => :'operatingSystemVersion',
        :'operating_system_build' => :'operatingSystemBuild',
        :'ip_address' => :'ipAddress',
        :'mac_address' => :'macAddress',
        :'asset_tag' => :'assetTag',
        :'model_identifier' => :'modelIdentifier',
        :'mdm_access_rights' => :'mdmAccessRights',
        :'is_managed' => :'isManaged',
        :'management_id' => :'managementId'
      }
    end

    # Returns all the JSON keys this model knows about
    def self.acceptable_attributes
      attribute_map.values
    end

    # Attribute type mapping.
    def self.openapi_types
      {
        :'id' => :'String',
        :'location' => :'ComputerLocation',
        :'name' => :'String',
        :'udid' => :'String',
        :'serial_number' => :'String',
        :'last_contact_date' => :'String',
        :'last_report_date' => :'String',
        :'last_enrolled_date' => :'String',
        :'operating_system_version' => :'String',
        :'operating_system_build' => :'String',
        :'ip_address' => :'String',
        :'mac_address' => :'String',
        :'asset_tag' => :'String',
        :'model_identifier' => :'String',
        :'mdm_access_rights' => :'Integer',
        :'is_managed' => :'Boolean',
        :'management_id' => :'String'
      }
    end

    # List of attributes with nullable: true
    def self.openapi_nullable
      Set.new([
      ])
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      if (!attributes.is_a?(Hash))
        fail ArgumentError, "The input argument (attributes) must be a hash in `JamfPro::ComputerOverview` initialize method"
      end

      # check to see if the attribute exists and convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h|
        if (!self.class.attribute_map.key?(k.to_sym))
          fail ArgumentError, "`#{k}` is not a valid attribute in `JamfPro::ComputerOverview`. Please check the name to make sure it's valid. List of attributes: " + self.class.attribute_map.keys.inspect
        end
        h[k.to_sym] = v
      }

      if attributes.key?(:'id')
        self.id = attributes[:'id']
      end

      if attributes.key?(:'location')
        self.location = attributes[:'location']
      end

      if attributes.key?(:'name')
        self.name = attributes[:'name']
      end

      if attributes.key?(:'udid')
        self.udid = attributes[:'udid']
      end

      if attributes.key?(:'serial_number')
        self.serial_number = attributes[:'serial_number']
      end

      if attributes.key?(:'last_contact_date')
        self.last_contact_date = attributes[:'last_contact_date']
      end

      if attributes.key?(:'last_report_date')
        self.last_report_date = attributes[:'last_report_date']
      end

      if attributes.key?(:'last_enrolled_date')
        self.last_enrolled_date = attributes[:'last_enrolled_date']
      end

      if attributes.key?(:'operating_system_version')
        self.operating_system_version = attributes[:'operating_system_version']
      end

      if attributes.key?(:'operating_system_build')
        self.operating_system_build = attributes[:'operating_system_build']
      end

      if attributes.key?(:'ip_address')
        self.ip_address = attributes[:'ip_address']
      end

      if attributes.key?(:'mac_address')
        self.mac_address = attributes[:'mac_address']
      end

      if attributes.key?(:'asset_tag')
        self.asset_tag = attributes[:'asset_tag']
      end

      if attributes.key?(:'model_identifier')
        self.model_identifier = attributes[:'model_identifier']
      end

      if attributes.key?(:'mdm_access_rights')
        self.mdm_access_rights = attributes[:'mdm_access_rights']
      end

      if attributes.key?(:'is_managed')
        self.is_managed = attributes[:'is_managed']
      end

      if attributes.key?(:'management_id')
        self.management_id = attributes[:'management_id']
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array.new
      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      true
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          id == o.id &&
          location == o.location &&
          name == o.name &&
          udid == o.udid &&
          serial_number == o.serial_number &&
          last_contact_date == o.last_contact_date &&
          last_report_date == o.last_report_date &&
          last_enrolled_date == o.last_enrolled_date &&
          operating_system_version == o.operating_system_version &&
          operating_system_build == o.operating_system_build &&
          ip_address == o.ip_address &&
          mac_address == o.mac_address &&
          asset_tag == o.asset_tag &&
          model_identifier == o.model_identifier &&
          mdm_access_rights == o.mdm_access_rights &&
          is_managed == o.is_managed &&
          management_id == o.management_id
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    def hash
      [id, location, name, udid, serial_number, last_contact_date, last_report_date, last_enrolled_date, operating_system_version, operating_system_build, ip_address, mac_address, asset_tag, model_identifier, mdm_access_rights, is_managed, management_id].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def self.build_from_hash(attributes)
      new.build_from_hash(attributes)
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      attributes = attributes.transform_keys(&:to_sym)
      self.class.openapi_types.each_pair do |key, type|
        if attributes[self.class.attribute_map[key]].nil? && self.class.openapi_nullable.include?(key)
          self.send("#{key}=", nil)
        elsif type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            self.send("#{key}=", attributes[self.class.attribute_map[key]].map { |v| _deserialize($1, v) })
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        end
      end

      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :Time
        Time.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :Boolean
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        # models (e.g. Pet) or oneOf
        klass = JamfPro.const_get(type)
        klass.respond_to?(:openapi_one_of) ? klass.build(value) : klass.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        if value.nil?
          is_nullable = self.class.openapi_nullable.include?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end

        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end

end
