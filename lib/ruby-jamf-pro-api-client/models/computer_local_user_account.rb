=begin
#Jamf Pro API

### Overview The Jamf Pro API is a RESTful API for Jamf Pro built to enable consistent and efficient programmatic access to Jamf Pro.<br/><br/> The swagger schema can be found [here](/api/schema/). 

The version of the OpenAPI document: production

Generated by: https://openapi-generator.tech
OpenAPI Generator version: 6.1.0-SNAPSHOT

=end

require 'date'
require 'time'

module JamfPro
  class ComputerLocalUserAccount
    attr_accessor :uid

    attr_accessor :username

    attr_accessor :full_name

    attr_accessor :admin

    attr_accessor :home_directory

    # Home directory size in MB.
    attr_accessor :home_directory_size_mb

    attr_accessor :file_vault2_enabled

    attr_accessor :user_account_type

    attr_accessor :password_min_length

    attr_accessor :password_max_age

    attr_accessor :password_min_complex_characters

    attr_accessor :password_history_depth

    attr_accessor :password_require_alphanumeric

    attr_accessor :computer_azure_active_directory_id

    attr_accessor :user_azure_active_directory_id

    attr_accessor :azure_active_directory_id

    class EnumAttributeValidator
      attr_reader :datatype
      attr_reader :allowable_values

      def initialize(datatype, allowable_values)
        @allowable_values = allowable_values.map do |value|
          case datatype.to_s
          when /Integer/i
            value.to_i
          when /Float/i
            value.to_f
          else
            value
          end
        end
      end

      def valid?(value)
        !value || allowable_values.include?(value)
      end
    end

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'uid' => :'uid',
        :'username' => :'username',
        :'full_name' => :'fullName',
        :'admin' => :'admin',
        :'home_directory' => :'homeDirectory',
        :'home_directory_size_mb' => :'homeDirectorySizeMb',
        :'file_vault2_enabled' => :'fileVault2Enabled',
        :'user_account_type' => :'userAccountType',
        :'password_min_length' => :'passwordMinLength',
        :'password_max_age' => :'passwordMaxAge',
        :'password_min_complex_characters' => :'passwordMinComplexCharacters',
        :'password_history_depth' => :'passwordHistoryDepth',
        :'password_require_alphanumeric' => :'passwordRequireAlphanumeric',
        :'computer_azure_active_directory_id' => :'computerAzureActiveDirectoryId',
        :'user_azure_active_directory_id' => :'userAzureActiveDirectoryId',
        :'azure_active_directory_id' => :'azureActiveDirectoryId'
      }
    end

    # Returns all the JSON keys this model knows about
    def self.acceptable_attributes
      attribute_map.values
    end

    # Attribute type mapping.
    def self.openapi_types
      {
        :'uid' => :'String',
        :'username' => :'String',
        :'full_name' => :'String',
        :'admin' => :'Boolean',
        :'home_directory' => :'String',
        :'home_directory_size_mb' => :'Integer',
        :'file_vault2_enabled' => :'Boolean',
        :'user_account_type' => :'String',
        :'password_min_length' => :'Integer',
        :'password_max_age' => :'Integer',
        :'password_min_complex_characters' => :'Integer',
        :'password_history_depth' => :'Integer',
        :'password_require_alphanumeric' => :'Boolean',
        :'computer_azure_active_directory_id' => :'String',
        :'user_azure_active_directory_id' => :'String',
        :'azure_active_directory_id' => :'String'
      }
    end

    # List of attributes with nullable: true
    def self.openapi_nullable
      Set.new([
      ])
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      if (!attributes.is_a?(Hash))
        fail ArgumentError, "The input argument (attributes) must be a hash in `JamfPro::ComputerLocalUserAccount` initialize method"
      end

      # check to see if the attribute exists and convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h|
        if (!self.class.attribute_map.key?(k.to_sym))
          fail ArgumentError, "`#{k}` is not a valid attribute in `JamfPro::ComputerLocalUserAccount`. Please check the name to make sure it's valid. List of attributes: " + self.class.attribute_map.keys.inspect
        end
        h[k.to_sym] = v
      }

      if attributes.key?(:'uid')
        self.uid = attributes[:'uid']
      end

      if attributes.key?(:'username')
        self.username = attributes[:'username']
      end

      if attributes.key?(:'full_name')
        self.full_name = attributes[:'full_name']
      end

      if attributes.key?(:'admin')
        self.admin = attributes[:'admin']
      end

      if attributes.key?(:'home_directory')
        self.home_directory = attributes[:'home_directory']
      end

      if attributes.key?(:'home_directory_size_mb')
        self.home_directory_size_mb = attributes[:'home_directory_size_mb']
      end

      if attributes.key?(:'file_vault2_enabled')
        self.file_vault2_enabled = attributes[:'file_vault2_enabled']
      end

      if attributes.key?(:'user_account_type')
        self.user_account_type = attributes[:'user_account_type']
      end

      if attributes.key?(:'password_min_length')
        self.password_min_length = attributes[:'password_min_length']
      end

      if attributes.key?(:'password_max_age')
        self.password_max_age = attributes[:'password_max_age']
      end

      if attributes.key?(:'password_min_complex_characters')
        self.password_min_complex_characters = attributes[:'password_min_complex_characters']
      end

      if attributes.key?(:'password_history_depth')
        self.password_history_depth = attributes[:'password_history_depth']
      end

      if attributes.key?(:'password_require_alphanumeric')
        self.password_require_alphanumeric = attributes[:'password_require_alphanumeric']
      end

      if attributes.key?(:'computer_azure_active_directory_id')
        self.computer_azure_active_directory_id = attributes[:'computer_azure_active_directory_id']
      end

      if attributes.key?(:'user_azure_active_directory_id')
        self.user_azure_active_directory_id = attributes[:'user_azure_active_directory_id']
      end

      if attributes.key?(:'azure_active_directory_id')
        self.azure_active_directory_id = attributes[:'azure_active_directory_id']
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array.new
      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      user_account_type_validator = EnumAttributeValidator.new('String', ["LOCAL", "MOBILE", "UNKNOWN"])
      return false unless user_account_type_validator.valid?(@user_account_type)
      azure_active_directory_id_validator = EnumAttributeValidator.new('String', ["ACTIVATED", "DEACTIVATED", "UNRESPONSIVE", "UNKNOWN"])
      return false unless azure_active_directory_id_validator.valid?(@azure_active_directory_id)
      true
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] user_account_type Object to be assigned
    def user_account_type=(user_account_type)
      validator = EnumAttributeValidator.new('String', ["LOCAL", "MOBILE", "UNKNOWN"])
      unless validator.valid?(user_account_type)
        fail ArgumentError, "invalid value for \"user_account_type\", must be one of #{validator.allowable_values}."
      end
      @user_account_type = user_account_type
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] azure_active_directory_id Object to be assigned
    def azure_active_directory_id=(azure_active_directory_id)
      validator = EnumAttributeValidator.new('String', ["ACTIVATED", "DEACTIVATED", "UNRESPONSIVE", "UNKNOWN"])
      unless validator.valid?(azure_active_directory_id)
        fail ArgumentError, "invalid value for \"azure_active_directory_id\", must be one of #{validator.allowable_values}."
      end
      @azure_active_directory_id = azure_active_directory_id
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          uid == o.uid &&
          username == o.username &&
          full_name == o.full_name &&
          admin == o.admin &&
          home_directory == o.home_directory &&
          home_directory_size_mb == o.home_directory_size_mb &&
          file_vault2_enabled == o.file_vault2_enabled &&
          user_account_type == o.user_account_type &&
          password_min_length == o.password_min_length &&
          password_max_age == o.password_max_age &&
          password_min_complex_characters == o.password_min_complex_characters &&
          password_history_depth == o.password_history_depth &&
          password_require_alphanumeric == o.password_require_alphanumeric &&
          computer_azure_active_directory_id == o.computer_azure_active_directory_id &&
          user_azure_active_directory_id == o.user_azure_active_directory_id &&
          azure_active_directory_id == o.azure_active_directory_id
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    def hash
      [uid, username, full_name, admin, home_directory, home_directory_size_mb, file_vault2_enabled, user_account_type, password_min_length, password_max_age, password_min_complex_characters, password_history_depth, password_require_alphanumeric, computer_azure_active_directory_id, user_azure_active_directory_id, azure_active_directory_id].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def self.build_from_hash(attributes)
      new.build_from_hash(attributes)
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      attributes = attributes.transform_keys(&:to_sym)
      self.class.openapi_types.each_pair do |key, type|
        if attributes[self.class.attribute_map[key]].nil? && self.class.openapi_nullable.include?(key)
          self.send("#{key}=", nil)
        elsif type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            self.send("#{key}=", attributes[self.class.attribute_map[key]].map { |v| _deserialize($1, v) })
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        end
      end

      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :Time
        Time.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :Boolean
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        # models (e.g. Pet) or oneOf
        klass = JamfPro.const_get(type)
        klass.respond_to?(:openapi_one_of) ? klass.build(value) : klass.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        if value.nil?
          is_nullable = self.class.openapi_nullable.include?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end

        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end

end
