=begin
#Jamf Pro API

### Overview The Jamf Pro API is a RESTful API for Jamf Pro built to enable consistent and efficient programmatic access to Jamf Pro.<br/><br/> The swagger schema can be found [here](/api/schema/). 

The version of the OpenAPI document: production

Generated by: https://openapi-generator.tech
OpenAPI Generator version: 6.1.0-SNAPSHOT

=end

require 'date'
require 'time'

module JamfPro
  class ComputerInventory
    attr_accessor :id

    attr_accessor :udid

    attr_accessor :general

    attr_accessor :disk_encryption

    attr_accessor :purchasing

    attr_accessor :applications

    attr_accessor :storage

    attr_accessor :user_and_location

    attr_accessor :configuration_profiles

    attr_accessor :printers

    attr_accessor :services

    attr_accessor :hardware

    attr_accessor :local_user_accounts

    attr_accessor :certificates

    attr_accessor :attachments

    attr_accessor :plugins

    attr_accessor :package_receipts

    attr_accessor :fonts

    attr_accessor :security

    attr_accessor :operating_system

    attr_accessor :licensed_software

    attr_accessor :ibeacons

    attr_accessor :software_updates

    attr_accessor :extension_attributes

    attr_accessor :content_caching

    attr_accessor :group_memberships

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'id' => :'id',
        :'udid' => :'udid',
        :'general' => :'general',
        :'disk_encryption' => :'diskEncryption',
        :'purchasing' => :'purchasing',
        :'applications' => :'applications',
        :'storage' => :'storage',
        :'user_and_location' => :'userAndLocation',
        :'configuration_profiles' => :'configurationProfiles',
        :'printers' => :'printers',
        :'services' => :'services',
        :'hardware' => :'hardware',
        :'local_user_accounts' => :'localUserAccounts',
        :'certificates' => :'certificates',
        :'attachments' => :'attachments',
        :'plugins' => :'plugins',
        :'package_receipts' => :'packageReceipts',
        :'fonts' => :'fonts',
        :'security' => :'security',
        :'operating_system' => :'operatingSystem',
        :'licensed_software' => :'licensedSoftware',
        :'ibeacons' => :'ibeacons',
        :'software_updates' => :'softwareUpdates',
        :'extension_attributes' => :'extensionAttributes',
        :'content_caching' => :'contentCaching',
        :'group_memberships' => :'groupMemberships'
      }
    end

    # Returns all the JSON keys this model knows about
    def self.acceptable_attributes
      attribute_map.values
    end

    # Attribute type mapping.
    def self.openapi_types
      {
        :'id' => :'String',
        :'udid' => :'String',
        :'general' => :'ComputerGeneral',
        :'disk_encryption' => :'ComputerDiskEncryption',
        :'purchasing' => :'ComputerPurchase',
        :'applications' => :'Array<ComputerApplication>',
        :'storage' => :'ComputerStorage',
        :'user_and_location' => :'ComputerUserAndLocation',
        :'configuration_profiles' => :'Array<ComputerConfigurationProfile>',
        :'printers' => :'Array<ComputerPrinter>',
        :'services' => :'Array<ComputerService>',
        :'hardware' => :'ComputerHardware',
        :'local_user_accounts' => :'Array<ComputerLocalUserAccount>',
        :'certificates' => :'Array<ComputerCertificate>',
        :'attachments' => :'Array<ComputerAttachment>',
        :'plugins' => :'Array<ComputerPlugin>',
        :'package_receipts' => :'ComputerPackageReceipts',
        :'fonts' => :'Array<ComputerFont>',
        :'security' => :'ComputerSecurity',
        :'operating_system' => :'ComputerOperatingSystem',
        :'licensed_software' => :'Array<ComputerLicensedSoftware>',
        :'ibeacons' => :'Array<ComputerIbeacon>',
        :'software_updates' => :'Array<ComputerSoftwareUpdate>',
        :'extension_attributes' => :'Array<ComputerExtensionAttribute>',
        :'content_caching' => :'ComputerContentCaching',
        :'group_memberships' => :'Array<GroupMembership>'
      }
    end

    # List of attributes with nullable: true
    def self.openapi_nullable
      Set.new([
      ])
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      if (!attributes.is_a?(Hash))
        fail ArgumentError, "The input argument (attributes) must be a hash in `JamfPro::ComputerInventory` initialize method"
      end

      # check to see if the attribute exists and convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h|
        if (!self.class.attribute_map.key?(k.to_sym))
          fail ArgumentError, "`#{k}` is not a valid attribute in `JamfPro::ComputerInventory`. Please check the name to make sure it's valid. List of attributes: " + self.class.attribute_map.keys.inspect
        end
        h[k.to_sym] = v
      }

      if attributes.key?(:'id')
        self.id = attributes[:'id']
      end

      if attributes.key?(:'udid')
        self.udid = attributes[:'udid']
      end

      if attributes.key?(:'general')
        self.general = attributes[:'general']
      end

      if attributes.key?(:'disk_encryption')
        self.disk_encryption = attributes[:'disk_encryption']
      end

      if attributes.key?(:'purchasing')
        self.purchasing = attributes[:'purchasing']
      end

      if attributes.key?(:'applications')
        if (value = attributes[:'applications']).is_a?(Array)
          self.applications = value
        end
      end

      if attributes.key?(:'storage')
        self.storage = attributes[:'storage']
      end

      if attributes.key?(:'user_and_location')
        self.user_and_location = attributes[:'user_and_location']
      end

      if attributes.key?(:'configuration_profiles')
        if (value = attributes[:'configuration_profiles']).is_a?(Array)
          self.configuration_profiles = value
        end
      end

      if attributes.key?(:'printers')
        if (value = attributes[:'printers']).is_a?(Array)
          self.printers = value
        end
      end

      if attributes.key?(:'services')
        if (value = attributes[:'services']).is_a?(Array)
          self.services = value
        end
      end

      if attributes.key?(:'hardware')
        self.hardware = attributes[:'hardware']
      end

      if attributes.key?(:'local_user_accounts')
        if (value = attributes[:'local_user_accounts']).is_a?(Array)
          self.local_user_accounts = value
        end
      end

      if attributes.key?(:'certificates')
        if (value = attributes[:'certificates']).is_a?(Array)
          self.certificates = value
        end
      end

      if attributes.key?(:'attachments')
        if (value = attributes[:'attachments']).is_a?(Array)
          self.attachments = value
        end
      end

      if attributes.key?(:'plugins')
        if (value = attributes[:'plugins']).is_a?(Array)
          self.plugins = value
        end
      end

      if attributes.key?(:'package_receipts')
        self.package_receipts = attributes[:'package_receipts']
      end

      if attributes.key?(:'fonts')
        if (value = attributes[:'fonts']).is_a?(Array)
          self.fonts = value
        end
      end

      if attributes.key?(:'security')
        self.security = attributes[:'security']
      end

      if attributes.key?(:'operating_system')
        self.operating_system = attributes[:'operating_system']
      end

      if attributes.key?(:'licensed_software')
        if (value = attributes[:'licensed_software']).is_a?(Array)
          self.licensed_software = value
        end
      end

      if attributes.key?(:'ibeacons')
        if (value = attributes[:'ibeacons']).is_a?(Array)
          self.ibeacons = value
        end
      end

      if attributes.key?(:'software_updates')
        if (value = attributes[:'software_updates']).is_a?(Array)
          self.software_updates = value
        end
      end

      if attributes.key?(:'extension_attributes')
        if (value = attributes[:'extension_attributes']).is_a?(Array)
          self.extension_attributes = value
        end
      end

      if attributes.key?(:'content_caching')
        self.content_caching = attributes[:'content_caching']
      end

      if attributes.key?(:'group_memberships')
        if (value = attributes[:'group_memberships']).is_a?(Array)
          self.group_memberships = value
        end
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array.new
      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      true
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          id == o.id &&
          udid == o.udid &&
          general == o.general &&
          disk_encryption == o.disk_encryption &&
          purchasing == o.purchasing &&
          applications == o.applications &&
          storage == o.storage &&
          user_and_location == o.user_and_location &&
          configuration_profiles == o.configuration_profiles &&
          printers == o.printers &&
          services == o.services &&
          hardware == o.hardware &&
          local_user_accounts == o.local_user_accounts &&
          certificates == o.certificates &&
          attachments == o.attachments &&
          plugins == o.plugins &&
          package_receipts == o.package_receipts &&
          fonts == o.fonts &&
          security == o.security &&
          operating_system == o.operating_system &&
          licensed_software == o.licensed_software &&
          ibeacons == o.ibeacons &&
          software_updates == o.software_updates &&
          extension_attributes == o.extension_attributes &&
          content_caching == o.content_caching &&
          group_memberships == o.group_memberships
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    def hash
      [id, udid, general, disk_encryption, purchasing, applications, storage, user_and_location, configuration_profiles, printers, services, hardware, local_user_accounts, certificates, attachments, plugins, package_receipts, fonts, security, operating_system, licensed_software, ibeacons, software_updates, extension_attributes, content_caching, group_memberships].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def self.build_from_hash(attributes)
      new.build_from_hash(attributes)
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      attributes = attributes.transform_keys(&:to_sym)
      self.class.openapi_types.each_pair do |key, type|
        if attributes[self.class.attribute_map[key]].nil? && self.class.openapi_nullable.include?(key)
          self.send("#{key}=", nil)
        elsif type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            self.send("#{key}=", attributes[self.class.attribute_map[key]].map { |v| _deserialize($1, v) })
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        end
      end

      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :Time
        Time.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :Boolean
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        # models (e.g. Pet) or oneOf
        klass = JamfPro.const_get(type)
        klass.respond_to?(:openapi_one_of) ? klass.build(value) : klass.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        if value.nil?
          is_nullable = self.class.openapi_nullable.include?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end

        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end

end
