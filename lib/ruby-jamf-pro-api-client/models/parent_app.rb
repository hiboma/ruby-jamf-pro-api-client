=begin
#Jamf Pro API

### Overview The Jamf Pro API is a RESTful API for Jamf Pro built to enable consistent and efficient programmatic access to Jamf Pro.<br/><br/> The swagger schema can be found [here](/api/schema/). 

The version of the OpenAPI document: production

Generated by: https://openapi-generator.tech
OpenAPI Generator version: 6.1.0-SNAPSHOT

=end

require 'date'
require 'time'

module JamfPro
  class ParentApp
    attr_accessor :timezone_id

    attr_accessor :restricted_times

    attr_accessor :device_group_id

    attr_accessor :is_enabled

    attr_accessor :allow_templates

    attr_accessor :disassociate_on_wipe_and_re_enroll

    attr_accessor :allow_clear_passcode

    attr_accessor :safelisted_apps

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'timezone_id' => :'timezoneId',
        :'restricted_times' => :'restrictedTimes',
        :'device_group_id' => :'deviceGroupId',
        :'is_enabled' => :'isEnabled',
        :'allow_templates' => :'allowTemplates',
        :'disassociate_on_wipe_and_re_enroll' => :'disassociateOnWipeAndReEnroll',
        :'allow_clear_passcode' => :'allowClearPasscode',
        :'safelisted_apps' => :'safelistedApps'
      }
    end

    # Returns all the JSON keys this model knows about
    def self.acceptable_attributes
      attribute_map.values
    end

    # Attribute type mapping.
    def self.openapi_types
      {
        :'timezone_id' => :'String',
        :'restricted_times' => :'ParentAppRestrictedTimes',
        :'device_group_id' => :'Integer',
        :'is_enabled' => :'Boolean',
        :'allow_templates' => :'Boolean',
        :'disassociate_on_wipe_and_re_enroll' => :'Boolean',
        :'allow_clear_passcode' => :'Boolean',
        :'safelisted_apps' => :'Array<SafelistedApp>'
      }
    end

    # List of attributes with nullable: true
    def self.openapi_nullable
      Set.new([
      ])
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      if (!attributes.is_a?(Hash))
        fail ArgumentError, "The input argument (attributes) must be a hash in `JamfPro::ParentApp` initialize method"
      end

      # check to see if the attribute exists and convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h|
        if (!self.class.attribute_map.key?(k.to_sym))
          fail ArgumentError, "`#{k}` is not a valid attribute in `JamfPro::ParentApp`. Please check the name to make sure it's valid. List of attributes: " + self.class.attribute_map.keys.inspect
        end
        h[k.to_sym] = v
      }

      if attributes.key?(:'timezone_id')
        self.timezone_id = attributes[:'timezone_id']
      end

      if attributes.key?(:'restricted_times')
        self.restricted_times = attributes[:'restricted_times']
      end

      if attributes.key?(:'device_group_id')
        self.device_group_id = attributes[:'device_group_id']
      end

      if attributes.key?(:'is_enabled')
        self.is_enabled = attributes[:'is_enabled']
      end

      if attributes.key?(:'allow_templates')
        self.allow_templates = attributes[:'allow_templates']
      end

      if attributes.key?(:'disassociate_on_wipe_and_re_enroll')
        self.disassociate_on_wipe_and_re_enroll = attributes[:'disassociate_on_wipe_and_re_enroll']
      end

      if attributes.key?(:'allow_clear_passcode')
        self.allow_clear_passcode = attributes[:'allow_clear_passcode']
      end

      if attributes.key?(:'safelisted_apps')
        if (value = attributes[:'safelisted_apps']).is_a?(Array)
          self.safelisted_apps = value
        end
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array.new
      if @timezone_id.nil?
        invalid_properties.push('invalid value for "timezone_id", timezone_id cannot be nil.')
      end

      if @restricted_times.nil?
        invalid_properties.push('invalid value for "restricted_times", restricted_times cannot be nil.')
      end

      if @device_group_id.nil?
        invalid_properties.push('invalid value for "device_group_id", device_group_id cannot be nil.')
      end

      if @is_enabled.nil?
        invalid_properties.push('invalid value for "is_enabled", is_enabled cannot be nil.')
      end

      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      return false if @timezone_id.nil?
      return false if @restricted_times.nil?
      return false if @device_group_id.nil?
      return false if @is_enabled.nil?
      true
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          timezone_id == o.timezone_id &&
          restricted_times == o.restricted_times &&
          device_group_id == o.device_group_id &&
          is_enabled == o.is_enabled &&
          allow_templates == o.allow_templates &&
          disassociate_on_wipe_and_re_enroll == o.disassociate_on_wipe_and_re_enroll &&
          allow_clear_passcode == o.allow_clear_passcode &&
          safelisted_apps == o.safelisted_apps
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    def hash
      [timezone_id, restricted_times, device_group_id, is_enabled, allow_templates, disassociate_on_wipe_and_re_enroll, allow_clear_passcode, safelisted_apps].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def self.build_from_hash(attributes)
      new.build_from_hash(attributes)
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      attributes = attributes.transform_keys(&:to_sym)
      self.class.openapi_types.each_pair do |key, type|
        if attributes[self.class.attribute_map[key]].nil? && self.class.openapi_nullable.include?(key)
          self.send("#{key}=", nil)
        elsif type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            self.send("#{key}=", attributes[self.class.attribute_map[key]].map { |v| _deserialize($1, v) })
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        end
      end

      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :Time
        Time.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :Boolean
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        # models (e.g. Pet) or oneOf
        klass = JamfPro.const_get(type)
        klass.respond_to?(:openapi_one_of) ? klass.build(value) : klass.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        if value.nil?
          is_nullable = self.class.openapi_nullable.include?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end

        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end

end
