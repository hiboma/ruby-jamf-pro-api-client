=begin
#Jamf Pro API

### Overview The Jamf Pro API is a RESTful API for Jamf Pro built to enable consistent and efficient programmatic access to Jamf Pro.<br/><br/> The swagger schema can be found [here](/api/schema/). 

The version of the OpenAPI document: production

Generated by: https://openapi-generator.tech
OpenAPI Generator version: 6.1.0-SNAPSHOT

=end

require 'date'
require 'time'

module JamfPro
  class MobileDeviceCertificateV2
    attr_accessor :common_name

    attr_accessor :identity

    attr_accessor :expiration_date_epoch

    attr_accessor :subject_name

    attr_accessor :serial_number

    attr_accessor :sha1_fingerprint

    attr_accessor :issued_date_epoch

    attr_accessor :certificate_status

    attr_accessor :lifecycle_status

    class EnumAttributeValidator
      attr_reader :datatype
      attr_reader :allowable_values

      def initialize(datatype, allowable_values)
        @allowable_values = allowable_values.map do |value|
          case datatype.to_s
          when /Integer/i
            value.to_i
          when /Float/i
            value.to_f
          else
            value
          end
        end
      end

      def valid?(value)
        !value || allowable_values.include?(value)
      end
    end

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'common_name' => :'commonName',
        :'identity' => :'identity',
        :'expiration_date_epoch' => :'expirationDateEpoch',
        :'subject_name' => :'subjectName',
        :'serial_number' => :'serialNumber',
        :'sha1_fingerprint' => :'sha1Fingerprint',
        :'issued_date_epoch' => :'issuedDateEpoch',
        :'certificate_status' => :'certificateStatus',
        :'lifecycle_status' => :'lifecycleStatus'
      }
    end

    # Returns all the JSON keys this model knows about
    def self.acceptable_attributes
      attribute_map.values
    end

    # Attribute type mapping.
    def self.openapi_types
      {
        :'common_name' => :'String',
        :'identity' => :'Boolean',
        :'expiration_date_epoch' => :'Time',
        :'subject_name' => :'String',
        :'serial_number' => :'String',
        :'sha1_fingerprint' => :'String',
        :'issued_date_epoch' => :'String',
        :'certificate_status' => :'String',
        :'lifecycle_status' => :'String'
      }
    end

    # List of attributes with nullable: true
    def self.openapi_nullable
      Set.new([
      ])
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      if (!attributes.is_a?(Hash))
        fail ArgumentError, "The input argument (attributes) must be a hash in `JamfPro::MobileDeviceCertificateV2` initialize method"
      end

      # check to see if the attribute exists and convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h|
        if (!self.class.attribute_map.key?(k.to_sym))
          fail ArgumentError, "`#{k}` is not a valid attribute in `JamfPro::MobileDeviceCertificateV2`. Please check the name to make sure it's valid. List of attributes: " + self.class.attribute_map.keys.inspect
        end
        h[k.to_sym] = v
      }

      if attributes.key?(:'common_name')
        self.common_name = attributes[:'common_name']
      end

      if attributes.key?(:'identity')
        self.identity = attributes[:'identity']
      end

      if attributes.key?(:'expiration_date_epoch')
        self.expiration_date_epoch = attributes[:'expiration_date_epoch']
      end

      if attributes.key?(:'subject_name')
        self.subject_name = attributes[:'subject_name']
      end

      if attributes.key?(:'serial_number')
        self.serial_number = attributes[:'serial_number']
      end

      if attributes.key?(:'sha1_fingerprint')
        self.sha1_fingerprint = attributes[:'sha1_fingerprint']
      end

      if attributes.key?(:'issued_date_epoch')
        self.issued_date_epoch = attributes[:'issued_date_epoch']
      end

      if attributes.key?(:'certificate_status')
        self.certificate_status = attributes[:'certificate_status']
      end

      if attributes.key?(:'lifecycle_status')
        self.lifecycle_status = attributes[:'lifecycle_status']
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array.new
      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      certificate_status_validator = EnumAttributeValidator.new('String', ["EXPIRING", "EXPIRED", "REVOKED", "PENDING_REVOKE", "ISSUED"])
      return false unless certificate_status_validator.valid?(@certificate_status)
      lifecycle_status_validator = EnumAttributeValidator.new('String', ["ACTIVE", "INACTIVE"])
      return false unless lifecycle_status_validator.valid?(@lifecycle_status)
      true
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] certificate_status Object to be assigned
    def certificate_status=(certificate_status)
      validator = EnumAttributeValidator.new('String', ["EXPIRING", "EXPIRED", "REVOKED", "PENDING_REVOKE", "ISSUED"])
      unless validator.valid?(certificate_status)
        fail ArgumentError, "invalid value for \"certificate_status\", must be one of #{validator.allowable_values}."
      end
      @certificate_status = certificate_status
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] lifecycle_status Object to be assigned
    def lifecycle_status=(lifecycle_status)
      validator = EnumAttributeValidator.new('String', ["ACTIVE", "INACTIVE"])
      unless validator.valid?(lifecycle_status)
        fail ArgumentError, "invalid value for \"lifecycle_status\", must be one of #{validator.allowable_values}."
      end
      @lifecycle_status = lifecycle_status
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          common_name == o.common_name &&
          identity == o.identity &&
          expiration_date_epoch == o.expiration_date_epoch &&
          subject_name == o.subject_name &&
          serial_number == o.serial_number &&
          sha1_fingerprint == o.sha1_fingerprint &&
          issued_date_epoch == o.issued_date_epoch &&
          certificate_status == o.certificate_status &&
          lifecycle_status == o.lifecycle_status
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    def hash
      [common_name, identity, expiration_date_epoch, subject_name, serial_number, sha1_fingerprint, issued_date_epoch, certificate_status, lifecycle_status].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def self.build_from_hash(attributes)
      new.build_from_hash(attributes)
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      attributes = attributes.transform_keys(&:to_sym)
      self.class.openapi_types.each_pair do |key, type|
        if attributes[self.class.attribute_map[key]].nil? && self.class.openapi_nullable.include?(key)
          self.send("#{key}=", nil)
        elsif type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            self.send("#{key}=", attributes[self.class.attribute_map[key]].map { |v| _deserialize($1, v) })
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        end
      end

      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :Time
        Time.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :Boolean
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        # models (e.g. Pet) or oneOf
        klass = JamfPro.const_get(type)
        klass.respond_to?(:openapi_one_of) ? klass.build(value) : klass.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        if value.nil?
          is_nullable = self.class.openapi_nullable.include?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end

        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end

end
