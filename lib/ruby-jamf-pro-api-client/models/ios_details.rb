=begin
#Jamf Pro API

### Overview The Jamf Pro API is a RESTful API for Jamf Pro built to enable consistent and efficient programmatic access to Jamf Pro.<br/><br/> The swagger schema can be found [here](/api/schema/). 

The version of the OpenAPI document: production

Generated by: https://openapi-generator.tech
OpenAPI Generator version: 6.1.0-SNAPSHOT

=end

require 'date'
require 'time'

module JamfPro
  # will be populated if the type is ios.
  class IosDetails
    attr_accessor :model

    attr_accessor :model_identifier

    attr_accessor :model_number

    attr_accessor :is_supervised

    attr_accessor :battery_level

    attr_accessor :last_backup_timestamp

    attr_accessor :capacity_mb

    attr_accessor :available_mb

    attr_accessor :percentage_used

    attr_accessor :is_shared

    attr_accessor :is_device_locator_service_enabled

    attr_accessor :is_do_not_disturb_enabled

    attr_accessor :is_cloud_backup_enabled

    attr_accessor :last_cloud_backup_timestamp

    attr_accessor :is_location_services_enabled

    attr_accessor :is_i_tunes_store_account_active

    attr_accessor :is_ble_capable

    attr_accessor :computer

    attr_accessor :purchasing

    attr_accessor :security

    attr_accessor :network

    attr_accessor :applications

    attr_accessor :certificates

    attr_accessor :ebooks

    attr_accessor :configuration_profiles

    attr_accessor :provisioning_profiles

    attr_accessor :attachments

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'model' => :'model',
        :'model_identifier' => :'modelIdentifier',
        :'model_number' => :'modelNumber',
        :'is_supervised' => :'isSupervised',
        :'battery_level' => :'batteryLevel',
        :'last_backup_timestamp' => :'lastBackupTimestamp',
        :'capacity_mb' => :'capacityMb',
        :'available_mb' => :'availableMb',
        :'percentage_used' => :'percentageUsed',
        :'is_shared' => :'isShared',
        :'is_device_locator_service_enabled' => :'isDeviceLocatorServiceEnabled',
        :'is_do_not_disturb_enabled' => :'isDoNotDisturbEnabled',
        :'is_cloud_backup_enabled' => :'isCloudBackupEnabled',
        :'last_cloud_backup_timestamp' => :'lastCloudBackupTimestamp',
        :'is_location_services_enabled' => :'isLocationServicesEnabled',
        :'is_i_tunes_store_account_active' => :'isITunesStoreAccountActive',
        :'is_ble_capable' => :'isBleCapable',
        :'computer' => :'computer',
        :'purchasing' => :'purchasing',
        :'security' => :'security',
        :'network' => :'network',
        :'applications' => :'applications',
        :'certificates' => :'certificates',
        :'ebooks' => :'ebooks',
        :'configuration_profiles' => :'configurationProfiles',
        :'provisioning_profiles' => :'provisioningProfiles',
        :'attachments' => :'attachments'
      }
    end

    # Returns all the JSON keys this model knows about
    def self.acceptable_attributes
      attribute_map.values
    end

    # Attribute type mapping.
    def self.openapi_types
      {
        :'model' => :'String',
        :'model_identifier' => :'String',
        :'model_number' => :'String',
        :'is_supervised' => :'Boolean',
        :'battery_level' => :'Integer',
        :'last_backup_timestamp' => :'Time',
        :'capacity_mb' => :'Integer',
        :'available_mb' => :'Integer',
        :'percentage_used' => :'Integer',
        :'is_shared' => :'Boolean',
        :'is_device_locator_service_enabled' => :'Boolean',
        :'is_do_not_disturb_enabled' => :'Boolean',
        :'is_cloud_backup_enabled' => :'Boolean',
        :'last_cloud_backup_timestamp' => :'Time',
        :'is_location_services_enabled' => :'Boolean',
        :'is_i_tunes_store_account_active' => :'Boolean',
        :'is_ble_capable' => :'Boolean',
        :'computer' => :'IdAndName',
        :'purchasing' => :'Purchasing',
        :'security' => :'Security',
        :'network' => :'Network',
        :'applications' => :'Array<MobileDeviceApplication>',
        :'certificates' => :'Array<MobileDeviceCertificateV1>',
        :'ebooks' => :'Array<MobileDeviceEbook>',
        :'configuration_profiles' => :'Array<ConfigurationProfile>',
        :'provisioning_profiles' => :'Array<ProvisioningProfile>',
        :'attachments' => :'Array<MobileDeviceAttachment>'
      }
    end

    # List of attributes with nullable: true
    def self.openapi_nullable
      Set.new([
      ])
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      if (!attributes.is_a?(Hash))
        fail ArgumentError, "The input argument (attributes) must be a hash in `JamfPro::IosDetails` initialize method"
      end

      # check to see if the attribute exists and convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h|
        if (!self.class.attribute_map.key?(k.to_sym))
          fail ArgumentError, "`#{k}` is not a valid attribute in `JamfPro::IosDetails`. Please check the name to make sure it's valid. List of attributes: " + self.class.attribute_map.keys.inspect
        end
        h[k.to_sym] = v
      }

      if attributes.key?(:'model')
        self.model = attributes[:'model']
      end

      if attributes.key?(:'model_identifier')
        self.model_identifier = attributes[:'model_identifier']
      end

      if attributes.key?(:'model_number')
        self.model_number = attributes[:'model_number']
      end

      if attributes.key?(:'is_supervised')
        self.is_supervised = attributes[:'is_supervised']
      end

      if attributes.key?(:'battery_level')
        self.battery_level = attributes[:'battery_level']
      end

      if attributes.key?(:'last_backup_timestamp')
        self.last_backup_timestamp = attributes[:'last_backup_timestamp']
      end

      if attributes.key?(:'capacity_mb')
        self.capacity_mb = attributes[:'capacity_mb']
      end

      if attributes.key?(:'available_mb')
        self.available_mb = attributes[:'available_mb']
      end

      if attributes.key?(:'percentage_used')
        self.percentage_used = attributes[:'percentage_used']
      end

      if attributes.key?(:'is_shared')
        self.is_shared = attributes[:'is_shared']
      end

      if attributes.key?(:'is_device_locator_service_enabled')
        self.is_device_locator_service_enabled = attributes[:'is_device_locator_service_enabled']
      end

      if attributes.key?(:'is_do_not_disturb_enabled')
        self.is_do_not_disturb_enabled = attributes[:'is_do_not_disturb_enabled']
      end

      if attributes.key?(:'is_cloud_backup_enabled')
        self.is_cloud_backup_enabled = attributes[:'is_cloud_backup_enabled']
      end

      if attributes.key?(:'last_cloud_backup_timestamp')
        self.last_cloud_backup_timestamp = attributes[:'last_cloud_backup_timestamp']
      end

      if attributes.key?(:'is_location_services_enabled')
        self.is_location_services_enabled = attributes[:'is_location_services_enabled']
      end

      if attributes.key?(:'is_i_tunes_store_account_active')
        self.is_i_tunes_store_account_active = attributes[:'is_i_tunes_store_account_active']
      end

      if attributes.key?(:'is_ble_capable')
        self.is_ble_capable = attributes[:'is_ble_capable']
      end

      if attributes.key?(:'computer')
        self.computer = attributes[:'computer']
      end

      if attributes.key?(:'purchasing')
        self.purchasing = attributes[:'purchasing']
      end

      if attributes.key?(:'security')
        self.security = attributes[:'security']
      end

      if attributes.key?(:'network')
        self.network = attributes[:'network']
      end

      if attributes.key?(:'applications')
        if (value = attributes[:'applications']).is_a?(Array)
          self.applications = value
        end
      end

      if attributes.key?(:'certificates')
        if (value = attributes[:'certificates']).is_a?(Array)
          self.certificates = value
        end
      end

      if attributes.key?(:'ebooks')
        if (value = attributes[:'ebooks']).is_a?(Array)
          self.ebooks = value
        end
      end

      if attributes.key?(:'configuration_profiles')
        if (value = attributes[:'configuration_profiles']).is_a?(Array)
          self.configuration_profiles = value
        end
      end

      if attributes.key?(:'provisioning_profiles')
        if (value = attributes[:'provisioning_profiles']).is_a?(Array)
          self.provisioning_profiles = value
        end
      end

      if attributes.key?(:'attachments')
        if (value = attributes[:'attachments']).is_a?(Array)
          self.attachments = value
        end
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array.new
      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      true
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          model == o.model &&
          model_identifier == o.model_identifier &&
          model_number == o.model_number &&
          is_supervised == o.is_supervised &&
          battery_level == o.battery_level &&
          last_backup_timestamp == o.last_backup_timestamp &&
          capacity_mb == o.capacity_mb &&
          available_mb == o.available_mb &&
          percentage_used == o.percentage_used &&
          is_shared == o.is_shared &&
          is_device_locator_service_enabled == o.is_device_locator_service_enabled &&
          is_do_not_disturb_enabled == o.is_do_not_disturb_enabled &&
          is_cloud_backup_enabled == o.is_cloud_backup_enabled &&
          last_cloud_backup_timestamp == o.last_cloud_backup_timestamp &&
          is_location_services_enabled == o.is_location_services_enabled &&
          is_i_tunes_store_account_active == o.is_i_tunes_store_account_active &&
          is_ble_capable == o.is_ble_capable &&
          computer == o.computer &&
          purchasing == o.purchasing &&
          security == o.security &&
          network == o.network &&
          applications == o.applications &&
          certificates == o.certificates &&
          ebooks == o.ebooks &&
          configuration_profiles == o.configuration_profiles &&
          provisioning_profiles == o.provisioning_profiles &&
          attachments == o.attachments
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    def hash
      [model, model_identifier, model_number, is_supervised, battery_level, last_backup_timestamp, capacity_mb, available_mb, percentage_used, is_shared, is_device_locator_service_enabled, is_do_not_disturb_enabled, is_cloud_backup_enabled, last_cloud_backup_timestamp, is_location_services_enabled, is_i_tunes_store_account_active, is_ble_capable, computer, purchasing, security, network, applications, certificates, ebooks, configuration_profiles, provisioning_profiles, attachments].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def self.build_from_hash(attributes)
      new.build_from_hash(attributes)
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      attributes = attributes.transform_keys(&:to_sym)
      self.class.openapi_types.each_pair do |key, type|
        if attributes[self.class.attribute_map[key]].nil? && self.class.openapi_nullable.include?(key)
          self.send("#{key}=", nil)
        elsif type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            self.send("#{key}=", attributes[self.class.attribute_map[key]].map { |v| _deserialize($1, v) })
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        end
      end

      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :Time
        Time.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :Boolean
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        # models (e.g. Pet) or oneOf
        klass = JamfPro.const_get(type)
        klass.respond_to?(:openapi_one_of) ? klass.build(value) : klass.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        if value.nil?
          is_nullable = self.class.openapi_nullable.include?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end

        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end

end
