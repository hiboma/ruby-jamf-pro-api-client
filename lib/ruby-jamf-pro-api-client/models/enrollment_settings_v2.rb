=begin
#Jamf Pro API

### Overview The Jamf Pro API is a RESTful API for Jamf Pro built to enable consistent and efficient programmatic access to Jamf Pro.<br/><br/> The swagger schema can be found [here](/api/schema/). 

The version of the OpenAPI document: production

Generated by: https://openapi-generator.tech
OpenAPI Generator version: 6.1.0-SNAPSHOT

=end

require 'date'
require 'time'

module JamfPro
  class EnrollmentSettingsV2
    attr_accessor :install_single_profile

    attr_accessor :signing_mdm_profile_enabled

    attr_accessor :mdm_signing_certificate

    attr_accessor :restrict_reenrollment

    attr_accessor :flush_location_information

    attr_accessor :flush_location_history_information

    attr_accessor :flush_policy_history

    attr_accessor :flush_extension_attributes

    attr_accessor :flush_mdm_commands_on_reenroll

    attr_accessor :mac_os_enterprise_enrollment_enabled

    attr_accessor :management_username

    attr_accessor :management_password

    attr_accessor :management_password_set

    attr_accessor :password_type

    attr_accessor :random_password_length

    attr_accessor :create_management_account

    attr_accessor :hide_management_account

    attr_accessor :allow_ssh_only_management_account

    attr_accessor :ensure_ssh_running

    attr_accessor :launch_self_service

    attr_accessor :sign_quick_add

    attr_accessor :developer_certificate_identity

    attr_accessor :developer_certificate_identity_details

    attr_accessor :mdm_signing_certificate_details

    attr_accessor :ios_enterprise_enrollment_enabled

    attr_accessor :ios_personal_enrollment_enabled

    attr_accessor :personal_device_enrollment_type

    attr_accessor :account_driven_user_enrollment_enabled

    class EnumAttributeValidator
      attr_reader :datatype
      attr_reader :allowable_values

      def initialize(datatype, allowable_values)
        @allowable_values = allowable_values.map do |value|
          case datatype.to_s
          when /Integer/i
            value.to_i
          when /Float/i
            value.to_f
          else
            value
          end
        end
      end

      def valid?(value)
        !value || allowable_values.include?(value)
      end
    end

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'install_single_profile' => :'installSingleProfile',
        :'signing_mdm_profile_enabled' => :'signingMdmProfileEnabled',
        :'mdm_signing_certificate' => :'mdmSigningCertificate',
        :'restrict_reenrollment' => :'restrictReenrollment',
        :'flush_location_information' => :'flushLocationInformation',
        :'flush_location_history_information' => :'flushLocationHistoryInformation',
        :'flush_policy_history' => :'flushPolicyHistory',
        :'flush_extension_attributes' => :'flushExtensionAttributes',
        :'flush_mdm_commands_on_reenroll' => :'flushMdmCommandsOnReenroll',
        :'mac_os_enterprise_enrollment_enabled' => :'macOsEnterpriseEnrollmentEnabled',
        :'management_username' => :'managementUsername',
        :'management_password' => :'managementPassword',
        :'management_password_set' => :'managementPasswordSet',
        :'password_type' => :'passwordType',
        :'random_password_length' => :'randomPasswordLength',
        :'create_management_account' => :'createManagementAccount',
        :'hide_management_account' => :'hideManagementAccount',
        :'allow_ssh_only_management_account' => :'allowSshOnlyManagementAccount',
        :'ensure_ssh_running' => :'ensureSshRunning',
        :'launch_self_service' => :'launchSelfService',
        :'sign_quick_add' => :'signQuickAdd',
        :'developer_certificate_identity' => :'developerCertificateIdentity',
        :'developer_certificate_identity_details' => :'developerCertificateIdentityDetails',
        :'mdm_signing_certificate_details' => :'mdmSigningCertificateDetails',
        :'ios_enterprise_enrollment_enabled' => :'iosEnterpriseEnrollmentEnabled',
        :'ios_personal_enrollment_enabled' => :'iosPersonalEnrollmentEnabled',
        :'personal_device_enrollment_type' => :'personalDeviceEnrollmentType',
        :'account_driven_user_enrollment_enabled' => :'accountDrivenUserEnrollmentEnabled'
      }
    end

    # Returns all the JSON keys this model knows about
    def self.acceptable_attributes
      attribute_map.values
    end

    # Attribute type mapping.
    def self.openapi_types
      {
        :'install_single_profile' => :'Boolean',
        :'signing_mdm_profile_enabled' => :'Boolean',
        :'mdm_signing_certificate' => :'CertificateIdentityV2',
        :'restrict_reenrollment' => :'Boolean',
        :'flush_location_information' => :'Boolean',
        :'flush_location_history_information' => :'Boolean',
        :'flush_policy_history' => :'Boolean',
        :'flush_extension_attributes' => :'Boolean',
        :'flush_mdm_commands_on_reenroll' => :'String',
        :'mac_os_enterprise_enrollment_enabled' => :'Boolean',
        :'management_username' => :'String',
        :'management_password' => :'String',
        :'management_password_set' => :'Boolean',
        :'password_type' => :'String',
        :'random_password_length' => :'Integer',
        :'create_management_account' => :'Boolean',
        :'hide_management_account' => :'Boolean',
        :'allow_ssh_only_management_account' => :'Boolean',
        :'ensure_ssh_running' => :'Boolean',
        :'launch_self_service' => :'Boolean',
        :'sign_quick_add' => :'Boolean',
        :'developer_certificate_identity' => :'CertificateIdentityV2',
        :'developer_certificate_identity_details' => :'CertificateDetails',
        :'mdm_signing_certificate_details' => :'CertificateDetails',
        :'ios_enterprise_enrollment_enabled' => :'Boolean',
        :'ios_personal_enrollment_enabled' => :'Boolean',
        :'personal_device_enrollment_type' => :'String',
        :'account_driven_user_enrollment_enabled' => :'Boolean'
      }
    end

    # List of attributes with nullable: true
    def self.openapi_nullable
      Set.new([
      ])
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      if (!attributes.is_a?(Hash))
        fail ArgumentError, "The input argument (attributes) must be a hash in `JamfPro::EnrollmentSettingsV2` initialize method"
      end

      # check to see if the attribute exists and convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h|
        if (!self.class.attribute_map.key?(k.to_sym))
          fail ArgumentError, "`#{k}` is not a valid attribute in `JamfPro::EnrollmentSettingsV2`. Please check the name to make sure it's valid. List of attributes: " + self.class.attribute_map.keys.inspect
        end
        h[k.to_sym] = v
      }

      if attributes.key?(:'install_single_profile')
        self.install_single_profile = attributes[:'install_single_profile']
      else
        self.install_single_profile = false
      end

      if attributes.key?(:'signing_mdm_profile_enabled')
        self.signing_mdm_profile_enabled = attributes[:'signing_mdm_profile_enabled']
      else
        self.signing_mdm_profile_enabled = false
      end

      if attributes.key?(:'mdm_signing_certificate')
        self.mdm_signing_certificate = attributes[:'mdm_signing_certificate']
      end

      if attributes.key?(:'restrict_reenrollment')
        self.restrict_reenrollment = attributes[:'restrict_reenrollment']
      else
        self.restrict_reenrollment = false
      end

      if attributes.key?(:'flush_location_information')
        self.flush_location_information = attributes[:'flush_location_information']
      else
        self.flush_location_information = false
      end

      if attributes.key?(:'flush_location_history_information')
        self.flush_location_history_information = attributes[:'flush_location_history_information']
      else
        self.flush_location_history_information = false
      end

      if attributes.key?(:'flush_policy_history')
        self.flush_policy_history = attributes[:'flush_policy_history']
      else
        self.flush_policy_history = false
      end

      if attributes.key?(:'flush_extension_attributes')
        self.flush_extension_attributes = attributes[:'flush_extension_attributes']
      else
        self.flush_extension_attributes = false
      end

      if attributes.key?(:'flush_mdm_commands_on_reenroll')
        self.flush_mdm_commands_on_reenroll = attributes[:'flush_mdm_commands_on_reenroll']
      else
        self.flush_mdm_commands_on_reenroll = 'DELETE_EVERYTHING_EXCEPT_ACKNOWLEDGED'
      end

      if attributes.key?(:'mac_os_enterprise_enrollment_enabled')
        self.mac_os_enterprise_enrollment_enabled = attributes[:'mac_os_enterprise_enrollment_enabled']
      else
        self.mac_os_enterprise_enrollment_enabled = false
      end

      if attributes.key?(:'management_username')
        self.management_username = attributes[:'management_username']
      else
        self.management_username = ''
      end

      if attributes.key?(:'management_password')
        self.management_password = attributes[:'management_password']
      else
        self.management_password = 'null'
      end

      if attributes.key?(:'management_password_set')
        self.management_password_set = attributes[:'management_password_set']
      end

      if attributes.key?(:'password_type')
        self.password_type = attributes[:'password_type']
      else
        self.password_type = 'STATIC'
      end

      if attributes.key?(:'random_password_length')
        self.random_password_length = attributes[:'random_password_length']
      else
        self.random_password_length = 8
      end

      if attributes.key?(:'create_management_account')
        self.create_management_account = attributes[:'create_management_account']
      else
        self.create_management_account = true
      end

      if attributes.key?(:'hide_management_account')
        self.hide_management_account = attributes[:'hide_management_account']
      else
        self.hide_management_account = false
      end

      if attributes.key?(:'allow_ssh_only_management_account')
        self.allow_ssh_only_management_account = attributes[:'allow_ssh_only_management_account']
      else
        self.allow_ssh_only_management_account = false
      end

      if attributes.key?(:'ensure_ssh_running')
        self.ensure_ssh_running = attributes[:'ensure_ssh_running']
      else
        self.ensure_ssh_running = true
      end

      if attributes.key?(:'launch_self_service')
        self.launch_self_service = attributes[:'launch_self_service']
      else
        self.launch_self_service = false
      end

      if attributes.key?(:'sign_quick_add')
        self.sign_quick_add = attributes[:'sign_quick_add']
      else
        self.sign_quick_add = false
      end

      if attributes.key?(:'developer_certificate_identity')
        self.developer_certificate_identity = attributes[:'developer_certificate_identity']
      end

      if attributes.key?(:'developer_certificate_identity_details')
        self.developer_certificate_identity_details = attributes[:'developer_certificate_identity_details']
      end

      if attributes.key?(:'mdm_signing_certificate_details')
        self.mdm_signing_certificate_details = attributes[:'mdm_signing_certificate_details']
      end

      if attributes.key?(:'ios_enterprise_enrollment_enabled')
        self.ios_enterprise_enrollment_enabled = attributes[:'ios_enterprise_enrollment_enabled']
      else
        self.ios_enterprise_enrollment_enabled = true
      end

      if attributes.key?(:'ios_personal_enrollment_enabled')
        self.ios_personal_enrollment_enabled = attributes[:'ios_personal_enrollment_enabled']
      else
        self.ios_personal_enrollment_enabled = false
      end

      if attributes.key?(:'personal_device_enrollment_type')
        self.personal_device_enrollment_type = attributes[:'personal_device_enrollment_type']
      else
        self.personal_device_enrollment_type = 'PERSONALDEVICEPROFILES'
      end

      if attributes.key?(:'account_driven_user_enrollment_enabled')
        self.account_driven_user_enrollment_enabled = attributes[:'account_driven_user_enrollment_enabled']
      else
        self.account_driven_user_enrollment_enabled = false
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array.new
      if @management_username.nil?
        invalid_properties.push('invalid value for "management_username", management_username cannot be nil.')
      end

      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      flush_mdm_commands_on_reenroll_validator = EnumAttributeValidator.new('String', ["DELETE_NOTHING", "DELETE_ERRORS", "DELETE_EVERYTHING_EXCEPT_ACKNOWLEDGED", "DELETE_EVERYTHING"])
      return false unless flush_mdm_commands_on_reenroll_validator.valid?(@flush_mdm_commands_on_reenroll)
      return false if @management_username.nil?
      password_type_validator = EnumAttributeValidator.new('String', ["STATIC", "RANDOM"])
      return false unless password_type_validator.valid?(@password_type)
      personal_device_enrollment_type_validator = EnumAttributeValidator.new('String', ["USERENROLLMENT", "PERSONALDEVICEPROFILES"])
      return false unless personal_device_enrollment_type_validator.valid?(@personal_device_enrollment_type)
      true
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] flush_mdm_commands_on_reenroll Object to be assigned
    def flush_mdm_commands_on_reenroll=(flush_mdm_commands_on_reenroll)
      validator = EnumAttributeValidator.new('String', ["DELETE_NOTHING", "DELETE_ERRORS", "DELETE_EVERYTHING_EXCEPT_ACKNOWLEDGED", "DELETE_EVERYTHING"])
      unless validator.valid?(flush_mdm_commands_on_reenroll)
        fail ArgumentError, "invalid value for \"flush_mdm_commands_on_reenroll\", must be one of #{validator.allowable_values}."
      end
      @flush_mdm_commands_on_reenroll = flush_mdm_commands_on_reenroll
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] password_type Object to be assigned
    def password_type=(password_type)
      validator = EnumAttributeValidator.new('String', ["STATIC", "RANDOM"])
      unless validator.valid?(password_type)
        fail ArgumentError, "invalid value for \"password_type\", must be one of #{validator.allowable_values}."
      end
      @password_type = password_type
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] personal_device_enrollment_type Object to be assigned
    def personal_device_enrollment_type=(personal_device_enrollment_type)
      validator = EnumAttributeValidator.new('String', ["USERENROLLMENT", "PERSONALDEVICEPROFILES"])
      unless validator.valid?(personal_device_enrollment_type)
        fail ArgumentError, "invalid value for \"personal_device_enrollment_type\", must be one of #{validator.allowable_values}."
      end
      @personal_device_enrollment_type = personal_device_enrollment_type
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          install_single_profile == o.install_single_profile &&
          signing_mdm_profile_enabled == o.signing_mdm_profile_enabled &&
          mdm_signing_certificate == o.mdm_signing_certificate &&
          restrict_reenrollment == o.restrict_reenrollment &&
          flush_location_information == o.flush_location_information &&
          flush_location_history_information == o.flush_location_history_information &&
          flush_policy_history == o.flush_policy_history &&
          flush_extension_attributes == o.flush_extension_attributes &&
          flush_mdm_commands_on_reenroll == o.flush_mdm_commands_on_reenroll &&
          mac_os_enterprise_enrollment_enabled == o.mac_os_enterprise_enrollment_enabled &&
          management_username == o.management_username &&
          management_password == o.management_password &&
          management_password_set == o.management_password_set &&
          password_type == o.password_type &&
          random_password_length == o.random_password_length &&
          create_management_account == o.create_management_account &&
          hide_management_account == o.hide_management_account &&
          allow_ssh_only_management_account == o.allow_ssh_only_management_account &&
          ensure_ssh_running == o.ensure_ssh_running &&
          launch_self_service == o.launch_self_service &&
          sign_quick_add == o.sign_quick_add &&
          developer_certificate_identity == o.developer_certificate_identity &&
          developer_certificate_identity_details == o.developer_certificate_identity_details &&
          mdm_signing_certificate_details == o.mdm_signing_certificate_details &&
          ios_enterprise_enrollment_enabled == o.ios_enterprise_enrollment_enabled &&
          ios_personal_enrollment_enabled == o.ios_personal_enrollment_enabled &&
          personal_device_enrollment_type == o.personal_device_enrollment_type &&
          account_driven_user_enrollment_enabled == o.account_driven_user_enrollment_enabled
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    def hash
      [install_single_profile, signing_mdm_profile_enabled, mdm_signing_certificate, restrict_reenrollment, flush_location_information, flush_location_history_information, flush_policy_history, flush_extension_attributes, flush_mdm_commands_on_reenroll, mac_os_enterprise_enrollment_enabled, management_username, management_password, management_password_set, password_type, random_password_length, create_management_account, hide_management_account, allow_ssh_only_management_account, ensure_ssh_running, launch_self_service, sign_quick_add, developer_certificate_identity, developer_certificate_identity_details, mdm_signing_certificate_details, ios_enterprise_enrollment_enabled, ios_personal_enrollment_enabled, personal_device_enrollment_type, account_driven_user_enrollment_enabled].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def self.build_from_hash(attributes)
      new.build_from_hash(attributes)
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      attributes = attributes.transform_keys(&:to_sym)
      self.class.openapi_types.each_pair do |key, type|
        if attributes[self.class.attribute_map[key]].nil? && self.class.openapi_nullable.include?(key)
          self.send("#{key}=", nil)
        elsif type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            self.send("#{key}=", attributes[self.class.attribute_map[key]].map { |v| _deserialize($1, v) })
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        end
      end

      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :Time
        Time.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :Boolean
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        # models (e.g. Pet) or oneOf
        klass = JamfPro.const_get(type)
        klass.respond_to?(:openapi_one_of) ? klass.build(value) : klass.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        if value.nil?
          is_nullable = self.class.openapi_nullable.include?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end

        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end

end
