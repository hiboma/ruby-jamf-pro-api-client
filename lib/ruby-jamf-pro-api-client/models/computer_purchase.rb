=begin
#Jamf Pro API

### Overview The Jamf Pro API is a RESTful API for Jamf Pro built to enable consistent and efficient programmatic access to Jamf Pro.<br/><br/> The swagger schema can be found [here](/api/schema/). 

The version of the OpenAPI document: production

Generated by: https://openapi-generator.tech
OpenAPI Generator version: 6.1.0-SNAPSHOT

=end

require 'date'
require 'time'

module JamfPro
  class ComputerPurchase
    attr_accessor :leased

    attr_accessor :purchased

    attr_accessor :po_number

    attr_accessor :po_date

    attr_accessor :vendor

    attr_accessor :warranty_date

    attr_accessor :apple_care_id

    attr_accessor :lease_date

    attr_accessor :purchase_price

    attr_accessor :life_expectancy

    attr_accessor :purchasing_account

    attr_accessor :purchasing_contact

    attr_accessor :extension_attributes

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'leased' => :'leased',
        :'purchased' => :'purchased',
        :'po_number' => :'poNumber',
        :'po_date' => :'poDate',
        :'vendor' => :'vendor',
        :'warranty_date' => :'warrantyDate',
        :'apple_care_id' => :'appleCareId',
        :'lease_date' => :'leaseDate',
        :'purchase_price' => :'purchasePrice',
        :'life_expectancy' => :'lifeExpectancy',
        :'purchasing_account' => :'purchasingAccount',
        :'purchasing_contact' => :'purchasingContact',
        :'extension_attributes' => :'extensionAttributes'
      }
    end

    # Returns all the JSON keys this model knows about
    def self.acceptable_attributes
      attribute_map.values
    end

    # Attribute type mapping.
    def self.openapi_types
      {
        :'leased' => :'Boolean',
        :'purchased' => :'Boolean',
        :'po_number' => :'String',
        :'po_date' => :'Date',
        :'vendor' => :'String',
        :'warranty_date' => :'Date',
        :'apple_care_id' => :'String',
        :'lease_date' => :'Date',
        :'purchase_price' => :'String',
        :'life_expectancy' => :'Integer',
        :'purchasing_account' => :'String',
        :'purchasing_contact' => :'String',
        :'extension_attributes' => :'Array<ComputerExtensionAttribute>'
      }
    end

    # List of attributes with nullable: true
    def self.openapi_nullable
      Set.new([
      ])
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      if (!attributes.is_a?(Hash))
        fail ArgumentError, "The input argument (attributes) must be a hash in `JamfPro::ComputerPurchase` initialize method"
      end

      # check to see if the attribute exists and convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h|
        if (!self.class.attribute_map.key?(k.to_sym))
          fail ArgumentError, "`#{k}` is not a valid attribute in `JamfPro::ComputerPurchase`. Please check the name to make sure it's valid. List of attributes: " + self.class.attribute_map.keys.inspect
        end
        h[k.to_sym] = v
      }

      if attributes.key?(:'leased')
        self.leased = attributes[:'leased']
      end

      if attributes.key?(:'purchased')
        self.purchased = attributes[:'purchased']
      end

      if attributes.key?(:'po_number')
        self.po_number = attributes[:'po_number']
      end

      if attributes.key?(:'po_date')
        self.po_date = attributes[:'po_date']
      end

      if attributes.key?(:'vendor')
        self.vendor = attributes[:'vendor']
      end

      if attributes.key?(:'warranty_date')
        self.warranty_date = attributes[:'warranty_date']
      end

      if attributes.key?(:'apple_care_id')
        self.apple_care_id = attributes[:'apple_care_id']
      end

      if attributes.key?(:'lease_date')
        self.lease_date = attributes[:'lease_date']
      end

      if attributes.key?(:'purchase_price')
        self.purchase_price = attributes[:'purchase_price']
      end

      if attributes.key?(:'life_expectancy')
        self.life_expectancy = attributes[:'life_expectancy']
      end

      if attributes.key?(:'purchasing_account')
        self.purchasing_account = attributes[:'purchasing_account']
      end

      if attributes.key?(:'purchasing_contact')
        self.purchasing_contact = attributes[:'purchasing_contact']
      end

      if attributes.key?(:'extension_attributes')
        if (value = attributes[:'extension_attributes']).is_a?(Array)
          self.extension_attributes = value
        end
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array.new
      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      true
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          leased == o.leased &&
          purchased == o.purchased &&
          po_number == o.po_number &&
          po_date == o.po_date &&
          vendor == o.vendor &&
          warranty_date == o.warranty_date &&
          apple_care_id == o.apple_care_id &&
          lease_date == o.lease_date &&
          purchase_price == o.purchase_price &&
          life_expectancy == o.life_expectancy &&
          purchasing_account == o.purchasing_account &&
          purchasing_contact == o.purchasing_contact &&
          extension_attributes == o.extension_attributes
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    def hash
      [leased, purchased, po_number, po_date, vendor, warranty_date, apple_care_id, lease_date, purchase_price, life_expectancy, purchasing_account, purchasing_contact, extension_attributes].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def self.build_from_hash(attributes)
      new.build_from_hash(attributes)
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      attributes = attributes.transform_keys(&:to_sym)
      self.class.openapi_types.each_pair do |key, type|
        if attributes[self.class.attribute_map[key]].nil? && self.class.openapi_nullable.include?(key)
          self.send("#{key}=", nil)
        elsif type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            self.send("#{key}=", attributes[self.class.attribute_map[key]].map { |v| _deserialize($1, v) })
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        end
      end

      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :Time
        Time.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :Boolean
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        # models (e.g. Pet) or oneOf
        klass = JamfPro.const_get(type)
        klass.respond_to?(:openapi_one_of) ? klass.build(value) : klass.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        if value.nil?
          is_nullable = self.class.openapi_nullable.include?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end

        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end

end
