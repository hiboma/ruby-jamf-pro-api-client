=begin
#Jamf Pro API

### Overview The Jamf Pro API is a RESTful API for Jamf Pro built to enable consistent and efficient programmatic access to Jamf Pro.<br/><br/> The swagger schema can be found [here](/api/schema/). 

The version of the OpenAPI document: production

Generated by: https://openapi-generator.tech
OpenAPI Generator version: 6.1.0-SNAPSHOT

=end

require 'date'
require 'time'

module JamfPro
  class EnrollmentCustomizationPanelSsoAuth
    attr_accessor :display_name

    attr_accessor :rank

    attr_accessor :is_use_jamf_connect

    attr_accessor :long_name_attribute

    attr_accessor :short_name_attribute

    attr_accessor :is_group_enrollment_access_enabled

    attr_accessor :group_enrollment_access_name

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'display_name' => :'displayName',
        :'rank' => :'rank',
        :'is_use_jamf_connect' => :'isUseJamfConnect',
        :'long_name_attribute' => :'longNameAttribute',
        :'short_name_attribute' => :'shortNameAttribute',
        :'is_group_enrollment_access_enabled' => :'isGroupEnrollmentAccessEnabled',
        :'group_enrollment_access_name' => :'groupEnrollmentAccessName'
      }
    end

    # Returns all the JSON keys this model knows about
    def self.acceptable_attributes
      attribute_map.values
    end

    # Attribute type mapping.
    def self.openapi_types
      {
        :'display_name' => :'String',
        :'rank' => :'Integer',
        :'is_use_jamf_connect' => :'Boolean',
        :'long_name_attribute' => :'String',
        :'short_name_attribute' => :'String',
        :'is_group_enrollment_access_enabled' => :'Boolean',
        :'group_enrollment_access_name' => :'String'
      }
    end

    # List of attributes with nullable: true
    def self.openapi_nullable
      Set.new([
      ])
    end

    # List of class defined in allOf (OpenAPI v3)
    def self.openapi_all_of
      [
      :'EnrollmentCustomizationPanel',
      :'EnrollmentCustomizationPanelSsoAuthAllOf'
      ]
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      if (!attributes.is_a?(Hash))
        fail ArgumentError, "The input argument (attributes) must be a hash in `JamfPro::EnrollmentCustomizationPanelSsoAuth` initialize method"
      end

      # check to see if the attribute exists and convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h|
        if (!self.class.attribute_map.key?(k.to_sym))
          fail ArgumentError, "`#{k}` is not a valid attribute in `JamfPro::EnrollmentCustomizationPanelSsoAuth`. Please check the name to make sure it's valid. List of attributes: " + self.class.attribute_map.keys.inspect
        end
        h[k.to_sym] = v
      }

      if attributes.key?(:'display_name')
        self.display_name = attributes[:'display_name']
      end

      if attributes.key?(:'rank')
        self.rank = attributes[:'rank']
      end

      if attributes.key?(:'is_use_jamf_connect')
        self.is_use_jamf_connect = attributes[:'is_use_jamf_connect']
      end

      if attributes.key?(:'long_name_attribute')
        self.long_name_attribute = attributes[:'long_name_attribute']
      end

      if attributes.key?(:'short_name_attribute')
        self.short_name_attribute = attributes[:'short_name_attribute']
      end

      if attributes.key?(:'is_group_enrollment_access_enabled')
        self.is_group_enrollment_access_enabled = attributes[:'is_group_enrollment_access_enabled']
      end

      if attributes.key?(:'group_enrollment_access_name')
        self.group_enrollment_access_name = attributes[:'group_enrollment_access_name']
      else
        self.group_enrollment_access_name = ''
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array.new
      if @display_name.nil?
        invalid_properties.push('invalid value for "display_name", display_name cannot be nil.')
      end

      if @rank.nil?
        invalid_properties.push('invalid value for "rank", rank cannot be nil.')
      end

      if @is_use_jamf_connect.nil?
        invalid_properties.push('invalid value for "is_use_jamf_connect", is_use_jamf_connect cannot be nil.')
      end

      if @long_name_attribute.nil?
        invalid_properties.push('invalid value for "long_name_attribute", long_name_attribute cannot be nil.')
      end

      if @short_name_attribute.nil?
        invalid_properties.push('invalid value for "short_name_attribute", short_name_attribute cannot be nil.')
      end

      if @is_group_enrollment_access_enabled.nil?
        invalid_properties.push('invalid value for "is_group_enrollment_access_enabled", is_group_enrollment_access_enabled cannot be nil.')
      end

      if @group_enrollment_access_name.nil?
        invalid_properties.push('invalid value for "group_enrollment_access_name", group_enrollment_access_name cannot be nil.')
      end

      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      return false if @display_name.nil?
      return false if @rank.nil?
      return false if @is_use_jamf_connect.nil?
      return false if @long_name_attribute.nil?
      return false if @short_name_attribute.nil?
      return false if @is_group_enrollment_access_enabled.nil?
      return false if @group_enrollment_access_name.nil?
      true
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          display_name == o.display_name &&
          rank == o.rank &&
          is_use_jamf_connect == o.is_use_jamf_connect &&
          long_name_attribute == o.long_name_attribute &&
          short_name_attribute == o.short_name_attribute &&
          is_group_enrollment_access_enabled == o.is_group_enrollment_access_enabled &&
          group_enrollment_access_name == o.group_enrollment_access_name
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    def hash
      [display_name, rank, is_use_jamf_connect, long_name_attribute, short_name_attribute, is_group_enrollment_access_enabled, group_enrollment_access_name].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def self.build_from_hash(attributes)
      new.build_from_hash(attributes)
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      attributes = attributes.transform_keys(&:to_sym)
      self.class.openapi_types.each_pair do |key, type|
        if attributes[self.class.attribute_map[key]].nil? && self.class.openapi_nullable.include?(key)
          self.send("#{key}=", nil)
        elsif type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            self.send("#{key}=", attributes[self.class.attribute_map[key]].map { |v| _deserialize($1, v) })
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        end
      end

      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :Time
        Time.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :Boolean
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        # models (e.g. Pet) or oneOf
        klass = JamfPro.const_get(type)
        klass.respond_to?(:openapi_one_of) ? klass.build(value) : klass.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        if value.nil?
          is_nullable = self.class.openapi_nullable.include?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end

        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end

end
