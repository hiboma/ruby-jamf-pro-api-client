=begin
#Jamf Pro API

### Overview The Jamf Pro API is a RESTful API for Jamf Pro built to enable consistent and efficient programmatic access to Jamf Pro.<br/><br/> The swagger schema can be found [here](/api/schema/). 

The version of the OpenAPI document: production

Generated by: https://openapi-generator.tech
OpenAPI Generator version: 6.1.0-SNAPSHOT

=end

require 'date'
require 'time'

module JamfPro
  class SsoSettings
    attr_accessor :sso_for_enrollment_enabled

    attr_accessor :sso_bypass_allowed

    attr_accessor :sso_enabled

    attr_accessor :sso_for_mac_os_self_service_enabled

    attr_accessor :token_expiration_disabled

    attr_accessor :user_attribute_enabled

    attr_accessor :user_attribute_name

    attr_accessor :user_mapping

    attr_accessor :group_enrollment_access_enabled

    attr_accessor :group_attribute_name

    attr_accessor :group_rdn_key

    attr_accessor :group_enrollment_access_name

    attr_accessor :idp_provider_type

    attr_accessor :idp_url

    attr_accessor :entity_id

    attr_accessor :metadata_file_name

    attr_accessor :other_provider_type_name

    attr_accessor :federation_metadata_file

    attr_accessor :metadata_source

    attr_accessor :session_timeout

    class EnumAttributeValidator
      attr_reader :datatype
      attr_reader :allowable_values

      def initialize(datatype, allowable_values)
        @allowable_values = allowable_values.map do |value|
          case datatype.to_s
          when /Integer/i
            value.to_i
          when /Float/i
            value.to_f
          else
            value
          end
        end
      end

      def valid?(value)
        !value || allowable_values.include?(value)
      end
    end

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'sso_for_enrollment_enabled' => :'ssoForEnrollmentEnabled',
        :'sso_bypass_allowed' => :'ssoBypassAllowed',
        :'sso_enabled' => :'ssoEnabled',
        :'sso_for_mac_os_self_service_enabled' => :'ssoForMacOsSelfServiceEnabled',
        :'token_expiration_disabled' => :'tokenExpirationDisabled',
        :'user_attribute_enabled' => :'userAttributeEnabled',
        :'user_attribute_name' => :'userAttributeName',
        :'user_mapping' => :'userMapping',
        :'group_enrollment_access_enabled' => :'groupEnrollmentAccessEnabled',
        :'group_attribute_name' => :'groupAttributeName',
        :'group_rdn_key' => :'groupRdnKey',
        :'group_enrollment_access_name' => :'groupEnrollmentAccessName',
        :'idp_provider_type' => :'idpProviderType',
        :'idp_url' => :'idpUrl',
        :'entity_id' => :'entityId',
        :'metadata_file_name' => :'metadataFileName',
        :'other_provider_type_name' => :'otherProviderTypeName',
        :'federation_metadata_file' => :'federationMetadataFile',
        :'metadata_source' => :'metadataSource',
        :'session_timeout' => :'sessionTimeout'
      }
    end

    # Returns all the JSON keys this model knows about
    def self.acceptable_attributes
      attribute_map.values
    end

    # Attribute type mapping.
    def self.openapi_types
      {
        :'sso_for_enrollment_enabled' => :'Boolean',
        :'sso_bypass_allowed' => :'Boolean',
        :'sso_enabled' => :'Boolean',
        :'sso_for_mac_os_self_service_enabled' => :'Boolean',
        :'token_expiration_disabled' => :'Boolean',
        :'user_attribute_enabled' => :'Boolean',
        :'user_attribute_name' => :'String',
        :'user_mapping' => :'String',
        :'group_enrollment_access_enabled' => :'Boolean',
        :'group_attribute_name' => :'String',
        :'group_rdn_key' => :'String',
        :'group_enrollment_access_name' => :'String',
        :'idp_provider_type' => :'String',
        :'idp_url' => :'String',
        :'entity_id' => :'String',
        :'metadata_file_name' => :'String',
        :'other_provider_type_name' => :'String',
        :'federation_metadata_file' => :'String',
        :'metadata_source' => :'String',
        :'session_timeout' => :'Integer'
      }
    end

    # List of attributes with nullable: true
    def self.openapi_nullable
      Set.new([
      ])
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      if (!attributes.is_a?(Hash))
        fail ArgumentError, "The input argument (attributes) must be a hash in `JamfPro::SsoSettings` initialize method"
      end

      # check to see if the attribute exists and convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h|
        if (!self.class.attribute_map.key?(k.to_sym))
          fail ArgumentError, "`#{k}` is not a valid attribute in `JamfPro::SsoSettings`. Please check the name to make sure it's valid. List of attributes: " + self.class.attribute_map.keys.inspect
        end
        h[k.to_sym] = v
      }

      if attributes.key?(:'sso_for_enrollment_enabled')
        self.sso_for_enrollment_enabled = attributes[:'sso_for_enrollment_enabled']
      else
        self.sso_for_enrollment_enabled = false
      end

      if attributes.key?(:'sso_bypass_allowed')
        self.sso_bypass_allowed = attributes[:'sso_bypass_allowed']
      else
        self.sso_bypass_allowed = false
      end

      if attributes.key?(:'sso_enabled')
        self.sso_enabled = attributes[:'sso_enabled']
      else
        self.sso_enabled = false
      end

      if attributes.key?(:'sso_for_mac_os_self_service_enabled')
        self.sso_for_mac_os_self_service_enabled = attributes[:'sso_for_mac_os_self_service_enabled']
      else
        self.sso_for_mac_os_self_service_enabled = false
      end

      if attributes.key?(:'token_expiration_disabled')
        self.token_expiration_disabled = attributes[:'token_expiration_disabled']
      else
        self.token_expiration_disabled = false
      end

      if attributes.key?(:'user_attribute_enabled')
        self.user_attribute_enabled = attributes[:'user_attribute_enabled']
      else
        self.user_attribute_enabled = false
      end

      if attributes.key?(:'user_attribute_name')
        self.user_attribute_name = attributes[:'user_attribute_name']
      else
        self.user_attribute_name = ' '
      end

      if attributes.key?(:'user_mapping')
        self.user_mapping = attributes[:'user_mapping']
      end

      if attributes.key?(:'group_enrollment_access_enabled')
        self.group_enrollment_access_enabled = attributes[:'group_enrollment_access_enabled']
      else
        self.group_enrollment_access_enabled = false
      end

      if attributes.key?(:'group_attribute_name')
        self.group_attribute_name = attributes[:'group_attribute_name']
      else
        self.group_attribute_name = 'http://schemas.xmlsoap.org/claims/Group'
      end

      if attributes.key?(:'group_rdn_key')
        self.group_rdn_key = attributes[:'group_rdn_key']
      else
        self.group_rdn_key = ' '
      end

      if attributes.key?(:'group_enrollment_access_name')
        self.group_enrollment_access_name = attributes[:'group_enrollment_access_name']
      else
        self.group_enrollment_access_name = ' '
      end

      if attributes.key?(:'idp_provider_type')
        self.idp_provider_type = attributes[:'idp_provider_type']
      end

      if attributes.key?(:'idp_url')
        self.idp_url = attributes[:'idp_url']
      end

      if attributes.key?(:'entity_id')
        self.entity_id = attributes[:'entity_id']
      end

      if attributes.key?(:'metadata_file_name')
        self.metadata_file_name = attributes[:'metadata_file_name']
      end

      if attributes.key?(:'other_provider_type_name')
        self.other_provider_type_name = attributes[:'other_provider_type_name']
      else
        self.other_provider_type_name = ' '
      end

      if attributes.key?(:'federation_metadata_file')
        self.federation_metadata_file = attributes[:'federation_metadata_file']
      end

      if attributes.key?(:'metadata_source')
        self.metadata_source = attributes[:'metadata_source']
      end

      if attributes.key?(:'session_timeout')
        self.session_timeout = attributes[:'session_timeout']
      else
        self.session_timeout = 480
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array.new
      if @sso_for_enrollment_enabled.nil?
        invalid_properties.push('invalid value for "sso_for_enrollment_enabled", sso_for_enrollment_enabled cannot be nil.')
      end

      if @sso_bypass_allowed.nil?
        invalid_properties.push('invalid value for "sso_bypass_allowed", sso_bypass_allowed cannot be nil.')
      end

      if @sso_enabled.nil?
        invalid_properties.push('invalid value for "sso_enabled", sso_enabled cannot be nil.')
      end

      if @sso_for_mac_os_self_service_enabled.nil?
        invalid_properties.push('invalid value for "sso_for_mac_os_self_service_enabled", sso_for_mac_os_self_service_enabled cannot be nil.')
      end

      if @token_expiration_disabled.nil?
        invalid_properties.push('invalid value for "token_expiration_disabled", token_expiration_disabled cannot be nil.')
      end

      if @user_attribute_enabled.nil?
        invalid_properties.push('invalid value for "user_attribute_enabled", user_attribute_enabled cannot be nil.')
      end

      if @user_mapping.nil?
        invalid_properties.push('invalid value for "user_mapping", user_mapping cannot be nil.')
      end

      if @group_enrollment_access_enabled.nil?
        invalid_properties.push('invalid value for "group_enrollment_access_enabled", group_enrollment_access_enabled cannot be nil.')
      end

      if @group_attribute_name.nil?
        invalid_properties.push('invalid value for "group_attribute_name", group_attribute_name cannot be nil.')
      end

      if @group_rdn_key.nil?
        invalid_properties.push('invalid value for "group_rdn_key", group_rdn_key cannot be nil.')
      end

      if @idp_provider_type.nil?
        invalid_properties.push('invalid value for "idp_provider_type", idp_provider_type cannot be nil.')
      end

      if @entity_id.nil?
        invalid_properties.push('invalid value for "entity_id", entity_id cannot be nil.')
      end

      pattern = Regexp.new(/^(?:[A-Za-z0-9+\/]{4})*(?:[A-Za-z0-9+\/]{2}==|[A-Za-z0-9+\/]{3}=)?$/)
      if !@federation_metadata_file.nil? && @federation_metadata_file !~ pattern
        invalid_properties.push("invalid value for \"federation_metadata_file\", must conform to the pattern #{pattern}.")
      end

      if @metadata_source.nil?
        invalid_properties.push('invalid value for "metadata_source", metadata_source cannot be nil.')
      end

      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      return false if @sso_for_enrollment_enabled.nil?
      return false if @sso_bypass_allowed.nil?
      return false if @sso_enabled.nil?
      return false if @sso_for_mac_os_self_service_enabled.nil?
      return false if @token_expiration_disabled.nil?
      return false if @user_attribute_enabled.nil?
      return false if @user_mapping.nil?
      user_mapping_validator = EnumAttributeValidator.new('String', ["USERNAME", "EMAIL"])
      return false unless user_mapping_validator.valid?(@user_mapping)
      return false if @group_enrollment_access_enabled.nil?
      return false if @group_attribute_name.nil?
      return false if @group_rdn_key.nil?
      return false if @idp_provider_type.nil?
      idp_provider_type_validator = EnumAttributeValidator.new('String', ["ADFS", "OKTA", "GOOGLE", "SHIBBOLETH", "ONELOGIN", "PING", "CENTRIFY", "AZURE", "OTHER"])
      return false unless idp_provider_type_validator.valid?(@idp_provider_type)
      return false if @entity_id.nil?
      return false if !@federation_metadata_file.nil? && @federation_metadata_file !~ Regexp.new(/^(?:[A-Za-z0-9+\/]{4})*(?:[A-Za-z0-9+\/]{2}==|[A-Za-z0-9+\/]{3}=)?$/)
      return false if @metadata_source.nil?
      metadata_source_validator = EnumAttributeValidator.new('String', ["URL", "FILE", "UNKNOWN"])
      return false unless metadata_source_validator.valid?(@metadata_source)
      true
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] user_mapping Object to be assigned
    def user_mapping=(user_mapping)
      validator = EnumAttributeValidator.new('String', ["USERNAME", "EMAIL"])
      unless validator.valid?(user_mapping)
        fail ArgumentError, "invalid value for \"user_mapping\", must be one of #{validator.allowable_values}."
      end
      @user_mapping = user_mapping
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] idp_provider_type Object to be assigned
    def idp_provider_type=(idp_provider_type)
      validator = EnumAttributeValidator.new('String', ["ADFS", "OKTA", "GOOGLE", "SHIBBOLETH", "ONELOGIN", "PING", "CENTRIFY", "AZURE", "OTHER"])
      unless validator.valid?(idp_provider_type)
        fail ArgumentError, "invalid value for \"idp_provider_type\", must be one of #{validator.allowable_values}."
      end
      @idp_provider_type = idp_provider_type
    end

    # Custom attribute writer method with validation
    # @param [Object] federation_metadata_file Value to be assigned
    def federation_metadata_file=(federation_metadata_file)
      pattern = Regexp.new(/^(?:[A-Za-z0-9+\/]{4})*(?:[A-Za-z0-9+\/]{2}==|[A-Za-z0-9+\/]{3}=)?$/)
      if !federation_metadata_file.nil? && federation_metadata_file !~ pattern
        fail ArgumentError, "invalid value for \"federation_metadata_file\", must conform to the pattern #{pattern}."
      end

      @federation_metadata_file = federation_metadata_file
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] metadata_source Object to be assigned
    def metadata_source=(metadata_source)
      validator = EnumAttributeValidator.new('String', ["URL", "FILE", "UNKNOWN"])
      unless validator.valid?(metadata_source)
        fail ArgumentError, "invalid value for \"metadata_source\", must be one of #{validator.allowable_values}."
      end
      @metadata_source = metadata_source
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          sso_for_enrollment_enabled == o.sso_for_enrollment_enabled &&
          sso_bypass_allowed == o.sso_bypass_allowed &&
          sso_enabled == o.sso_enabled &&
          sso_for_mac_os_self_service_enabled == o.sso_for_mac_os_self_service_enabled &&
          token_expiration_disabled == o.token_expiration_disabled &&
          user_attribute_enabled == o.user_attribute_enabled &&
          user_attribute_name == o.user_attribute_name &&
          user_mapping == o.user_mapping &&
          group_enrollment_access_enabled == o.group_enrollment_access_enabled &&
          group_attribute_name == o.group_attribute_name &&
          group_rdn_key == o.group_rdn_key &&
          group_enrollment_access_name == o.group_enrollment_access_name &&
          idp_provider_type == o.idp_provider_type &&
          idp_url == o.idp_url &&
          entity_id == o.entity_id &&
          metadata_file_name == o.metadata_file_name &&
          other_provider_type_name == o.other_provider_type_name &&
          federation_metadata_file == o.federation_metadata_file &&
          metadata_source == o.metadata_source &&
          session_timeout == o.session_timeout
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    def hash
      [sso_for_enrollment_enabled, sso_bypass_allowed, sso_enabled, sso_for_mac_os_self_service_enabled, token_expiration_disabled, user_attribute_enabled, user_attribute_name, user_mapping, group_enrollment_access_enabled, group_attribute_name, group_rdn_key, group_enrollment_access_name, idp_provider_type, idp_url, entity_id, metadata_file_name, other_provider_type_name, federation_metadata_file, metadata_source, session_timeout].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def self.build_from_hash(attributes)
      new.build_from_hash(attributes)
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      attributes = attributes.transform_keys(&:to_sym)
      self.class.openapi_types.each_pair do |key, type|
        if attributes[self.class.attribute_map[key]].nil? && self.class.openapi_nullable.include?(key)
          self.send("#{key}=", nil)
        elsif type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            self.send("#{key}=", attributes[self.class.attribute_map[key]].map { |v| _deserialize($1, v) })
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        end
      end

      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :Time
        Time.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :Boolean
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        # models (e.g. Pet) or oneOf
        klass = JamfPro.const_get(type)
        klass.respond_to?(:openapi_one_of) ? klass.build(value) : klass.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        if value.nil?
          is_nullable = self.class.openapi_nullable.include?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end

        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end

end
