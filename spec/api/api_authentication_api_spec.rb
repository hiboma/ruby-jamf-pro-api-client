=begin
#Jamf Pro API

### Overview The Jamf Pro API is a RESTful API for Jamf Pro built to enable consistent and efficient programmatic access to Jamf Pro.<br/><br/> The swagger schema can be found [here](/api/schema/). 

The version of the OpenAPI document: production

Generated by: https://openapi-generator.tech
OpenAPI Generator version: 6.1.0-SNAPSHOT

=end

require 'spec_helper'
require 'json'

# Unit tests for JamfPro::ApiAuthenticationApi
# Automatically generated by openapi-generator (https://openapi-generator.tech)
# Please update as you see appropriate
describe 'ApiAuthenticationApi' do
  before do
    # run before each test
    @api_instance = JamfPro::ApiAuthenticationApi.new
  end

  after do
    # run after each test
  end

  describe 'test an instance of ApiAuthenticationApi' do
    it 'should create an instance of ApiAuthenticationApi' do
      expect(@api_instance).to be_instance_of(JamfPro::ApiAuthenticationApi)
    end
  end

  # unit tests for auth_current_post
  # Get the authorization details associated with the current API token 
  # Get the authorization details associated with the current API token for the users current site
  # @param [Hash] opts the optional parameters
  # @return [CurrentAuthorization]
  describe 'auth_current_post test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for auth_get
  # Get all the Authorization details associated with the current api 
  # Get all the authorization details associated with the current api token
  # @param [Hash] opts the optional parameters
  # @return [Authorization]
  describe 'auth_get test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for auth_invalidate_token_post
  # Invalidate current token 
  # Invalidates current token
  # @param [Hash] opts the optional parameters
  # @return [nil]
  describe 'auth_invalidate_token_post test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for auth_keep_alive_post
  # Invalidate existing token and generates new token 
  # Invalidates existing token and generates new token with extended expiration based on existing token credentials.
  # @param [Hash] opts the optional parameters
  # @return [AuthToken]
  describe 'auth_keep_alive_post test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for auth_tokens_post
  # Create a token based on other authentication details (basic, etc.) 
  # Create a token based on other authentication details (basic, etc.) 
  # @param [Hash] opts the optional parameters
  # @return [AuthToken]
  describe 'auth_tokens_post test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for v1_auth_get
  # Get all the Authorization details associated with the current api 
  # Get all the authorization details associated with the current api token
  # @param [Hash] opts the optional parameters
  # @return [AuthorizationV1]
  describe 'v1_auth_get test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for v1_auth_invalidate_token_post
  # Invalidate current token 
  # Invalidates current token
  # @param [Hash] opts the optional parameters
  # @return [nil]
  describe 'v1_auth_invalidate_token_post test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for v1_auth_keep_alive_post
  # Invalidate existing token and generates new token 
  # Invalidates existing token and generates new token with extended expiration based on existing token credentials.
  # @param [Hash] opts the optional parameters
  # @return [AuthTokenV1]
  describe 'v1_auth_keep_alive_post test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for v1_auth_token_post
  # Create a token based on other authentication details (basic, etc.) 
  # Create a token based on other authentication details (basic, etc.) 
  # @param [Hash] opts the optional parameters
  # @return [AuthTokenV1]
  describe 'v1_auth_token_post test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

end
