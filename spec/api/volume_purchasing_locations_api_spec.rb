=begin
#Jamf Pro API

### Overview The Jamf Pro API is a RESTful API for Jamf Pro built to enable consistent and efficient programmatic access to Jamf Pro.<br/><br/> The swagger schema can be found [here](/api/schema/). 

The version of the OpenAPI document: production

Generated by: https://openapi-generator.tech
OpenAPI Generator version: 6.1.0-SNAPSHOT

=end

require 'spec_helper'
require 'json'

# Unit tests for JamfPro::VolumePurchasingLocationsApi
# Automatically generated by openapi-generator (https://openapi-generator.tech)
# Please update as you see appropriate
describe 'VolumePurchasingLocationsApi' do
  before do
    # run before each test
    @api_instance = JamfPro::VolumePurchasingLocationsApi.new
  end

  after do
    # run after each test
  end

  describe 'test an instance of VolumePurchasingLocationsApi' do
    it 'should create an instance of VolumePurchasingLocationsApi' do
      expect(@api_instance).to be_instance_of(JamfPro::VolumePurchasingLocationsApi)
    end
  end

  # unit tests for v1_volume_purchasing_locations_get
  # Retrieve Volume Purchasing Locations
  # Retrieves Volume Purchasing Locations
  # @param [Hash] opts the optional parameters
  # @option opts [Integer] :page 
  # @option opts [Integer] :page_size 
  # @option opts [Array<String>] :sort Sorting criteria in the format: property:asc/desc. Default sort is id:asc. Multiple sort criteria are supported and must be separated with a comma.
  # @option opts [String] :filter Query in the RSQL format, allowing to filter Volume Purchasing Location collection. Default filter is empty query - returning all results for the requested page. Fields allowed in the query: id, name, appleId, organizationName, tokenExpiration, countryCode, locationName, automaticallyPopulatePurchasedContent, and sendNotificationWhenNoLongerAssigned. This param can be combined with paging and sorting.
  # @return [VolumePurchasingLocations]
  describe 'v1_volume_purchasing_locations_get test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for v1_volume_purchasing_locations_id_delete
  # Delete a Volume Purchasing Location with the supplied id
  # Deletes a Volume Purchasing Location with the supplied id
  # @param id Volume Purchasing Location identifier
  # @param [Hash] opts the optional parameters
  # @return [nil]
  describe 'v1_volume_purchasing_locations_id_delete test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for v1_volume_purchasing_locations_id_get
  # Retrieve a Volume Purchasing Location with the supplied id
  # Retrieves a Volume Purchasing Location with the supplied id
  # @param id Volume Purchasing Location identifier
  # @param [Hash] opts the optional parameters
  # @return [VolumePurchasingLocation]
  describe 'v1_volume_purchasing_locations_id_get test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for v1_volume_purchasing_locations_id_history_get
  # Get specified Volume Purchasing Location history object 
  # Gets specified Volume Purchasing Location history object 
  # @param id instance id of Volume Purchasing Location history record
  # @param [Hash] opts the optional parameters
  # @option opts [Integer] :page 
  # @option opts [Integer] :page_size 
  # @option opts [Array<String>] :sort Sorting criteria in the format: property:asc/desc. Default sort is date:desc. Multiple sort criteria are supported and must be separated with a comma. 
  # @option opts [String] :filter Query in the RSQL format, allowing to filter history notes collection. Default filter is empty query - returning all results for the requested page. Fields allowed in the query: username, date, note, details. This param can be combined with paging and sorting. Example: filter&#x3D;username!&#x3D;admin and details&#x3D;&#x3D;*disabled* and date&lt;2019-12-15
  # @return [HistorySearchResults]
  describe 'v1_volume_purchasing_locations_id_history_get test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for v1_volume_purchasing_locations_id_patch
  # Update a Volume Purchasing Location
  # Updates a Volume Purchasing Location
  # @param id Volume Purchasing Location identifier
  # @param volume_purchasing_location_patch Volume Purchasing Location to update
  # @param [Hash] opts the optional parameters
  # @return [VolumePurchasingLocation]
  describe 'v1_volume_purchasing_locations_id_patch test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for v1_volume_purchasing_locations_id_reclaim_post
  # Reclaim a Volume Purchasing Location with the supplied id
  # Reclaims a Volume Purchasing Location with the supplied id
  # @param id Volume Purchasing Location identifier
  # @param [Hash] opts the optional parameters
  # @return [nil]
  describe 'v1_volume_purchasing_locations_id_reclaim_post test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for v1_volume_purchasing_locations_id_revoke_licenses_post
  # Revoke licenses for a Volume Purchasing Location with the supplied id
  # Revokes licenses for a Volume Purchasing Location with the supplied id. The licenses must be revokable - any asset whose licenses are irrevocable will not be revoked.
  # @param id Volume Purchasing Location identifier
  # @param [Hash] opts the optional parameters
  # @return [nil]
  describe 'v1_volume_purchasing_locations_id_revoke_licenses_post test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for v1_volume_purchasing_locations_post
  # Create a Volume Purchasing Location
  # Creates a Volume Purchasing Location using an sToken
  # @param volume_purchasing_location_post Volume Purchasing Location to create
  # @param [Hash] opts the optional parameters
  # @return [HrefResponse]
  describe 'v1_volume_purchasing_locations_post test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

end
