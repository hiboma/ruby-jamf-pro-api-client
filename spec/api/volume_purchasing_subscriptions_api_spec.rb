=begin
#Jamf Pro API

### Overview The Jamf Pro API is a RESTful API for Jamf Pro built to enable consistent and efficient programmatic access to Jamf Pro.<br/><br/> The swagger schema can be found [here](/api/schema/). 

The version of the OpenAPI document: production

Generated by: https://openapi-generator.tech
OpenAPI Generator version: 6.1.0-SNAPSHOT

=end

require 'spec_helper'
require 'json'

# Unit tests for JamfPro::VolumePurchasingSubscriptionsApi
# Automatically generated by openapi-generator (https://openapi-generator.tech)
# Please update as you see appropriate
describe 'VolumePurchasingSubscriptionsApi' do
  before do
    # run before each test
    @api_instance = JamfPro::VolumePurchasingSubscriptionsApi.new
  end

  after do
    # run after each test
  end

  describe 'test an instance of VolumePurchasingSubscriptionsApi' do
    it 'should create an instance of VolumePurchasingSubscriptionsApi' do
      expect(@api_instance).to be_instance_of(JamfPro::VolumePurchasingSubscriptionsApi)
    end
  end

  # unit tests for v1_volume_purchasing_subscriptions_get
  # Retrieve Volume Purchasing Subscriptions
  # Retrieves Volume Purchasing Subscriptions
  # @param [Hash] opts the optional parameters
  # @option opts [Integer] :page 
  # @option opts [Integer] :page_size 
  # @option opts [Array<String>] :sort Sorting criteria in the format: property:asc/desc. Default sort is id:asc. Multiple sort criteria are supported and must be separated with a comma. Allowable properties are id, name, and enabled.
  # @return [VolumePurchasingSubscriptions]
  describe 'v1_volume_purchasing_subscriptions_get test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for v1_volume_purchasing_subscriptions_id_delete
  # Delete a Volume Purchasing Subscription with the supplied id
  # Deletes a Volume Purchasing Subscription with the supplied id
  # @param id Volume Purchasing Subscription identifier
  # @param [Hash] opts the optional parameters
  # @return [nil]
  describe 'v1_volume_purchasing_subscriptions_id_delete test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for v1_volume_purchasing_subscriptions_id_get
  # Retrieve a Volume Purchasing Subscription with the supplied id
  # Retrieves a Volume Purchasing Subscription with the supplied id
  # @param id Volume Purchasing Subscription identifier
  # @param [Hash] opts the optional parameters
  # @return [VolumePurchasingSubscription]
  describe 'v1_volume_purchasing_subscriptions_id_get test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for v1_volume_purchasing_subscriptions_id_put
  # Update a Volume Purchasing Subscription
  # Updates a Volume Purchasing Subscription
  # @param id Volume Purchasing Subscription identifier
  # @param volume_purchasing_subscription_base Volume Purchasing Subscription to update
  # @param [Hash] opts the optional parameters
  # @return [VolumePurchasingSubscription]
  describe 'v1_volume_purchasing_subscriptions_id_put test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for v1_volume_purchasing_subscriptions_post
  # Create a Volume Purchasing Subscription
  # Creates a Volume Purchasing Subscription
  # @param volume_purchasing_subscription_base Volume Purchasing Subscription to create
  # @param [Hash] opts the optional parameters
  # @return [HrefResponse]
  describe 'v1_volume_purchasing_subscriptions_post test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

end
