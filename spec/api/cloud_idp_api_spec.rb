=begin
#Jamf Pro API

### Overview The Jamf Pro API is a RESTful API for Jamf Pro built to enable consistent and efficient programmatic access to Jamf Pro.<br/><br/> The swagger schema can be found [here](/api/schema/). 

The version of the OpenAPI document: production

Generated by: https://openapi-generator.tech
OpenAPI Generator version: 6.1.0-SNAPSHOT

=end

require 'spec_helper'
require 'json'

# Unit tests for JamfPro::CloudIdpApi
# Automatically generated by openapi-generator (https://openapi-generator.tech)
# Please update as you see appropriate
describe 'CloudIdpApi' do
  before do
    # run before each test
    @api_instance = JamfPro::CloudIdpApi.new
  end

  after do
    # run after each test
  end

  describe 'test an instance of CloudIdpApi' do
    it 'should create an instance of CloudIdpApi' do
      expect(@api_instance).to be_instance_of(JamfPro::CloudIdpApi)
    end
  end

  # unit tests for v1_cloud_idp_export_post
  # Export Cloud Identity Providers collection 
  # Export Cloud Identity Providers collection 
  # @param [Hash] opts the optional parameters
  # @option opts [Array<String>] :export_fields Export fields parameter, used to change default order or ignore some of the response properties. Default is empty array, which means that all fields of the response entity will be serialized. Example: export-fields&#x3D;id,username
  # @option opts [Array<String>] :export_labels Export labels parameter, used to customize fieldnames/columns in the exported file. Default is empty array, which means that response properties names will be used. Number of the provided labels must match the number of export-fields Example: export-labels&#x3D;identifier,name with matching: export-fields&#x3D;id,username
  # @option opts [Integer] :page 
  # @option opts [Integer] :page_size 
  # @option opts [Array<String>] :sort Sorting criteria in the format: property:asc/desc. Default sort is id:desc. Multiple sort criteria are supported and must be seperated with a comma. Example: sort&#x3D;id:desc,name:asc
  # @option opts [String] :filter Query in the RSQL format, allowing to filter history notes collection. Default filter is empty query - returning all results for the requested page. Fields allowed in the query: id, name. This param can be combined with paging and sorting. Example: name&#x3D;&#x3D;\&quot;*department*\&quot;
  # @option opts [ExportParameters] :export_parameters Optional. Override query parameters since they can make URI exceed 2,000 character limit.
  # @return [Object]
  describe 'v1_cloud_idp_export_post test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for v1_cloud_idp_get
  # Get information about all Cloud Identity Providers configurations.
  # Returns basic informations about all configured Cloud Identity Provider.
  # @param [Hash] opts the optional parameters
  # @option opts [Integer] :page 
  # @option opts [Integer] :page_size 
  # @option opts [Array<String>] :sort Sorting criteria in the format: property:asc/desc. Default sort is id:asc. Multiple sort criteria are supported and must be separated with a comma. Example: sort&#x3D;date:desc,name:asc 
  # @return [ConfigurationSearchResults]
  describe 'v1_cloud_idp_get test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for v1_cloud_idp_id_get
  # Get Cloud Identity Provider configuration with given ID.
  # Get Cloud Identity Provider configuration with given ID.
  # @param id Cloud Identity Provider identifier
  # @param [Hash] opts the optional parameters
  # @return [CloudIdPCommon]
  describe 'v1_cloud_idp_id_get test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for v1_cloud_idp_id_history_get
  # Get Cloud Identity Provider history
  # Gets specified Cloud Identity Provider object history
  # @param id Cloud Identity Provider identifier
  # @param [Hash] opts the optional parameters
  # @option opts [Integer] :page 
  # @option opts [Integer] :page_size 
  # @option opts [Array<String>] :sort Sorting criteria in the format: property:asc/desc. Default sort is date:desc. Multiple sort criteria are supported and must be separated with a comma. Example: sort&#x3D;date:desc,name:asc 
  # @return [HistorySearchResults]
  describe 'v1_cloud_idp_id_history_get test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for v1_cloud_idp_id_history_post
  # Add Cloud Identity Provider history note
  # Adds specified Cloud Identity Provider object history notes 
  # @param id Cloud Identity Provider identifier
  # @param object_history_note history notes to create
  # @param [Hash] opts the optional parameters
  # @return [ObjectHistory]
  describe 'v1_cloud_idp_id_history_post test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for v1_cloud_idp_id_test_group_post
  # Get group test search
  # Do test search to ensure about configuration and mappings
  # @param id Cloud Identity Provider identifier
  # @param group_test_search_request Search request
  # @param [Hash] opts the optional parameters
  # @return [GroupTestSearchResponse]
  describe 'v1_cloud_idp_id_test_group_post test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for v1_cloud_idp_id_test_user_membership_post
  # Get membership test search
  # Do test search to ensure about configuration and mappings
  # @param id Cloud Identity Provider identifier
  # @param membership_test_search_request Search request
  # @param [Hash] opts the optional parameters
  # @return [MembershipTestSearchResponse]
  describe 'v1_cloud_idp_id_test_user_membership_post test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for v1_cloud_idp_id_test_user_post
  # Get user test search
  # Do test search to ensure about configuration and mappings
  # @param id Cloud Identity Provider identifier
  # @param user_test_search_request Search request
  # @param [Hash] opts the optional parameters
  # @return [UserTestSearchResponse]
  describe 'v1_cloud_idp_id_test_user_post test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

end
