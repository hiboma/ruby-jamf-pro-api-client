=begin
#Jamf Pro API

### Overview The Jamf Pro API is a RESTful API for Jamf Pro built to enable consistent and efficient programmatic access to Jamf Pro.<br/><br/> The swagger schema can be found [here](/api/schema/). 

The version of the OpenAPI document: production

Generated by: https://openapi-generator.tech
OpenAPI Generator version: 6.1.0-SNAPSHOT

=end

require 'spec_helper'
require 'json'

# Unit tests for JamfPro::PatchPoliciesPreviewApi
# Automatically generated by openapi-generator (https://openapi-generator.tech)
# Please update as you see appropriate
describe 'PatchPoliciesPreviewApi' do
  before do
    # run before each test
    @api_instance = JamfPro::PatchPoliciesPreviewApi.new
  end

  after do
    # run after each test
  end

  describe 'test an instance of PatchPoliciesPreviewApi' do
    it 'should create an instance of PatchPoliciesPreviewApi' do
      expect(@api_instance).to be_instance_of(JamfPro::PatchPoliciesPreviewApi)
    end
  end

  # unit tests for patch_patch_policies_get
  # Return a list of patch policies 
  # Returns a list of patch policies.
  # @param [Hash] opts the optional parameters
  # @option opts [Boolean] :on_dashboard Filters whether or not the patch policies are on the dashboard.
  # @option opts [Boolean] :enabled Filters whether or not the patch policies are enabled.
  # @return [Array<PatchPolicySummary>]
  describe 'patch_patch_policies_get test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for patch_patch_policies_id_dashboard_delete
  # Remove a patch policy from the dashboard 
  # Removes a patch policy from the dashboard.
  # @param id patch id
  # @param [Hash] opts the optional parameters
  # @return [nil]
  describe 'patch_patch_policies_id_dashboard_delete test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for patch_patch_policies_id_dashboard_get
  # Return whether or not the requested patch policy is on the dashboard 
  # Returns whether or not the requested patch policy is on the dashboard
  # @param id patch policy id
  # @param [Hash] opts the optional parameters
  # @return [PatchPolicyOnDashboard]
  describe 'patch_patch_policies_id_dashboard_get test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for patch_patch_policies_id_dashboard_post
  # Add a patch policy to the dashboard 
  # Adds a patch policy to the dashboard.
  # @param id patch policy id
  # @param [Hash] opts the optional parameters
  # @return [nil]
  describe 'patch_patch_policies_id_dashboard_post test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

end
