=begin
#Jamf Pro API

### Overview The Jamf Pro API is a RESTful API for Jamf Pro built to enable consistent and efficient programmatic access to Jamf Pro.<br/><br/> The swagger schema can be found [here](/api/schema/). 

The version of the OpenAPI document: production

Generated by: https://openapi-generator.tech
OpenAPI Generator version: 6.1.0-SNAPSHOT

=end

require 'spec_helper'
require 'json'

# Unit tests for JamfPro::CategoriesApi
# Automatically generated by openapi-generator (https://openapi-generator.tech)
# Please update as you see appropriate
describe 'CategoriesApi' do
  before do
    # run before each test
    @api_instance = JamfPro::CategoriesApi.new
  end

  after do
    # run after each test
  end

  describe 'test an instance of CategoriesApi' do
    it 'should create an instance of CategoriesApi' do
      expect(@api_instance).to be_instance_of(JamfPro::CategoriesApi)
    end
  end

  # unit tests for v1_categories_delete_multiple_post
  # Delete multiple Categories by their IDs 
  # Delete multiple Categories by their IDs
  # @param ids IDs of the categories to be deleted
  # @param [Hash] opts the optional parameters
  # @return [nil]
  describe 'v1_categories_delete_multiple_post test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for v1_categories_get
  # Get Category objects 
  # Gets &#x60;Category&#x60; objects. 
  # @param [Hash] opts the optional parameters
  # @option opts [Integer] :page 
  # @option opts [Integer] :page_size 
  # @option opts [Array<String>] :sort Sorting criteria in the format: property:asc/desc. Default sort is id:asc. Multiple sort criteria are supported and must be separated with a comma. Example: sort&#x3D;date:desc,name:asc 
  # @option opts [String] :filter Query in the RSQL format, allowing to filter categories collection. Default filter is empty query - returning all results for the requested page. Fields allowed in the query: name, priority. This param can be combined with paging and sorting. Example: filter&#x3D;name&#x3D;&#x3D;\&quot;Apps*\&quot; and priority&gt;&#x3D;5
  # @return [CategoriesSearchResults]
  describe 'v1_categories_get test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for v1_categories_id_delete
  # Remove specified Category record 
  # Removes specified category record 
  # @param id instance id of category record
  # @param [Hash] opts the optional parameters
  # @return [nil]
  describe 'v1_categories_id_delete test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for v1_categories_id_get
  # Get specified Category object 
  # Gets specified Category object 
  # @param id instance id of category record
  # @param [Hash] opts the optional parameters
  # @return [Category]
  describe 'v1_categories_id_get test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for v1_categories_id_history_get
  # Get specified Category history object 
  # Gets specified Category history object 
  # @param id instance id of category history record
  # @param [Hash] opts the optional parameters
  # @option opts [Integer] :page 
  # @option opts [Integer] :page_size 
  # @option opts [Array<String>] :sort Sorting criteria in the format: property:asc/desc. Default sort is id:asc. Multiple sort criteria are supported and must be separated with a comma. Example: sort&#x3D;date:desc,name:asc 
  # @option opts [String] :filter Query in the RSQL format, allowing to filter history notes collection. Default filter is empty query - returning all results for the requested page. Fields allowed in the query: username, date, note, details. This param can be combined with paging and sorting. Example: filter&#x3D;username!&#x3D;admin and details&#x3D;&#x3D;*disabled* and date&lt;2019-12-15
  # @return [HistorySearchResults]
  describe 'v1_categories_id_history_get test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for v1_categories_id_history_post
  # Add specified Category history object notes 
  # Adds specified Category history object notes 
  # @param id instance id of category history record
  # @param object_history_note history notes to create
  # @param [Hash] opts the optional parameters
  # @return [ObjectHistory]
  describe 'v1_categories_id_history_post test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for v1_categories_id_put
  # Update specified Category object 
  # Update specified category object 
  # @param id instance id of category record
  # @param category category object to create. id defined in this body will be ignored
  # @param [Hash] opts the optional parameters
  # @return [Category]
  describe 'v1_categories_id_put test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for v1_categories_post
  # Create Category record 
  # Create category record 
  # @param category category object to create. IDs defined in this body will be ignored
  # @param [Hash] opts the optional parameters
  # @return [HrefResponse]
  describe 'v1_categories_post test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

end
