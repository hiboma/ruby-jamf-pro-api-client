=begin
#Jamf Pro API

### Overview The Jamf Pro API is a RESTful API for Jamf Pro built to enable consistent and efficient programmatic access to Jamf Pro.<br/><br/> The swagger schema can be found [here](/api/schema/). 

The version of the OpenAPI document: production

Generated by: https://openapi-generator.tech
OpenAPI Generator version: 6.1.0-SNAPSHOT

=end

require 'spec_helper'
require 'json'

# Unit tests for JamfPro::JamfProServerUrlPreviewApi
# Automatically generated by openapi-generator (https://openapi-generator.tech)
# Please update as you see appropriate
describe 'JamfProServerUrlPreviewApi' do
  before do
    # run before each test
    @api_instance = JamfPro::JamfProServerUrlPreviewApi.new
  end

  after do
    # run after each test
  end

  describe 'test an instance of JamfProServerUrlPreviewApi' do
    it 'should create an instance of JamfProServerUrlPreviewApi' do
      expect(@api_instance).to be_instance_of(JamfPro::JamfProServerUrlPreviewApi)
    end
  end

  # unit tests for v1_jamf_pro_server_url_get
  # Get Jamf Pro Server URL settings 
  # Get Jamf Pro Server URL settings
  # @param [Hash] opts the optional parameters
  # @return [JamfProServerUrl]
  describe 'v1_jamf_pro_server_url_get test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for v1_jamf_pro_server_url_history_get
  # Get Jamf Pro Server URL settings history 
  # Gets Jamf Pro Server URL settings history
  # @param [Hash] opts the optional parameters
  # @option opts [Integer] :page 
  # @option opts [Integer] :size 
  # @option opts [Integer] :pagesize 
  # @option opts [Integer] :page_size 
  # @option opts [String] :sort Sorting criteria in the format: property:asc/desc. Default sort is date:desc. Multiple sort criteria are supported and must be separated with a comma. Example: sort&#x3D;date:desc,name:asc 
  # @return [HistorySearchResults]
  describe 'v1_jamf_pro_server_url_history_get test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for v1_jamf_pro_server_url_history_post
  # Add Jamf Pro Server URL settings history notes 
  # Adds Jamf Pro Server URL settings history notes
  # @param object_history_note History notes to create
  # @param [Hash] opts the optional parameters
  # @return [ObjectHistory]
  describe 'v1_jamf_pro_server_url_history_post test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for v1_jamf_pro_server_url_put
  # Update Jamf Pro Server URL settings 
  # Update Jamf Pro Server URL settings
  # @param jamf_pro_server_url Jamf Pro Server URL settings object
  # @param [Hash] opts the optional parameters
  # @return [JamfProServerUrl]
  describe 'v1_jamf_pro_server_url_put test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

end
